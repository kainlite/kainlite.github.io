<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</title>
    <link>https://techsquad.rocks/blog/</link>
    <description>Recent content in Blogs on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 31 Dec 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://techsquad.rocks/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to report your gmail spam folder to spamcop</title>
      <link>https://techsquad.rocks/blog/how_to_report_your_gmail_spam_folder_to_spamcop/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/how_to_report_your_gmail_spam_folder_to_spamcop/</guid>
      <tags>
      
        <tag>development</tag>
      
        <tag>golang</tag>
      
        <tag>go</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This post is a bit different from the other in the sense that it&amp;rsquo;s a small &amp;ldquo;tool&amp;rdquo; I did to ease spam reporting to &lt;a href=&#34;https://www.spamcop.net/&#34;&gt;SpamCop.net&lt;/a&gt;, this helps to reduce the true Spam from unknown sources, since for some reason I started to get like 40 emails per day (all went to spam), but it is still somewhat annoying, so I started reporting it to spamcop, but the process was kind of slow and I got tired of that quickly, so I created this &amp;ldquo;script&amp;rdquo; to make things easier. Basically what it does is list all messages in the spam folders fetches them and then forwards each one as an attachment to spamcop, then you get an email with a link to confirm the submission and that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;There are a few pre-requisites, like enabling the GMail API for your account, you can do that &lt;a href=&#34;https://developers.google.com/gmail/api/quickstart/go#step_1_turn_on_the&#34;&gt;here&lt;/a&gt;, after that the first time you use the app you have to authorize it, you do this by pasting the URL that the app gives you in the browser, then clicking Allow, and then pasting the token that it gives you back in the terminal (this only needs to be done once), after that you just run the binary in a cronjob or maybe even as a lambda (but I haven&amp;rsquo;t gone there yet), I usually check the spam folder remove what I don&amp;rsquo;t think it&amp;rsquo;s spam or whatever and then run the script to report everything else that it is clearly spam, it takes a few seconds and then I get the link to confirm all reports (one by one, sadly), this script is not perfect as sometimes spamcop cannot read properly the forwarded email, but I have checked exporting those as a file and I do see them all right, so that will be an investigation for another day, this only took like 2-4 hours, having 0 knowledge of the GMail API, etc.&lt;/p&gt;

&lt;p&gt;Also you need to setup a spamcop account which you will be using to send your reports, you can do that &lt;a href=&#34;https://www.spamcop.net/anonsignup.shtml&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code can be found &lt;a href=&#34;https://github.com/kainlite/spamcop&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;code&#34;&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I have added some comments along the code to make things easy to understand
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/557731e9b398e593fc6a176cd9f705e5.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;running-it&#34;&gt;&lt;strong&gt;Running it&lt;/strong&gt;&lt;/h5&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/244d04580a8ca63e4bbecdcecd649840.js&#34;&gt;&lt;/script&gt;


&lt;h5 id=&#34;sources&#34;&gt;&lt;strong&gt;Sources&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Some articles, pages, and files that I used and helped me to do what I wanted to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/gmail/api/quickstart/go&#34;&gt;https://developers.google.com/gmail/api/quickstart/go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gsuitedevs/go-samples/blob/master/gmail/quickstart/quickstart.go&#34;&gt;https://github.com/gsuitedevs/go-samples/blob/master/gmail/quickstart/quickstart.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://socketloop.com/tutorials/golang-send-email-with-attachment-rfc2822-using-gmail-api-example&#34;&gt;https://socketloop.com/tutorials/golang-send-email-with-attachment-rfc2822-using-gmail-api-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-go-client/master/examples/gmail.go&#34;&gt;https://raw.githubusercontent.com/googleapis/google-api-go-client/master/examples/gmail.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xDinomode/Go-Gmail-Api-Example/blob/master/email.go&#34;&gt;https://github.com/xDinomode/Go-Gmail-Api-Example/blob/master/email.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.spamcop.net/reporter.pl&#34;&gt;https://www.spamcop.net/reporter.pl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/google.golang.org/api/gmail/v1#Message&#34;&gt;https://godoc.org/google.golang.org/api/gmail/v1#Message&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-notes&#34;&gt;Additional notes&lt;/h3&gt;

&lt;p&gt;While this still needs some work hopefully will keep my account clean and probably help someone wondering about how to do the same.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brief introduction to terratest</title>
      <link>https://techsquad.rocks/blog/brief_introduction_to_terratest/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/brief_introduction_to_terratest/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>golang</tag>
      
        <tag>development</tag>
      
        <tag>linux</tag>
      
        <tag>terraform</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will see the basics to have tests for your terraform code using a re-usable pattern, we will use the code from the last article &lt;a href=&#34;https://techsquad.rocks/blog/serverless_authentication_with_cognito_and_golang/&#34;&gt;Serverless authentication with Cognito&lt;/a&gt;, so refer to that one before starting this one if you want to know how did we get here. Also as a side note this is a very basic example on how to get started with terratest.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gruntwork-io/terratest&#34;&gt;Terratest&lt;/a&gt; is a Go library that makes it easier to write automated tests for your infrastructure code, it supports Terraform, Docker, Packer, SSH, AWS, GCP, Kubernetes, Helm, and much more, also as it&amp;rsquo;s written as a Go library you have access to all the existing APIs.&lt;/p&gt;

&lt;h5 id=&#34;the-code&#34;&gt;&lt;strong&gt;The code&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;There are comments all over the code to explain each part, but what I want to highlight here is the pattern being used with the module &lt;code&gt;test-structure&lt;/code&gt;, this module allows us to split the test in sections and skip parts that we don&amp;rsquo;t need or want to run, so we have 3 stages here: &lt;code&gt;cleanup&lt;/code&gt;, &lt;code&gt;deploy&lt;/code&gt;, and &lt;code&gt;validate&lt;/code&gt;, this lets you use &lt;code&gt;SKIP_stage&lt;/code&gt;, for example &lt;code&gt;SKIP_cleanup&lt;/code&gt; when you run your tests with &lt;code&gt;go test -timeout 90m .&lt;/code&gt; (I added some extra bits, that I usually use, like timeout by default it&amp;rsquo;s 10 minutes I believe and it&amp;rsquo;s often too short), to only run &lt;code&gt;validate&lt;/code&gt; and &lt;code&gt;cleanup&lt;/code&gt;, it can be useful while developing a module to test without having to wait for everything to be re-created.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crypto/tls&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;http_helper&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/gruntwork-io/terratest/modules/http-helper&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/gruntwork-io/terratest/modules/retry&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/gruntwork-io/terratest/modules/terraform&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;test_structure&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/gruntwork-io/terratest/modules/test-structure&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#75715e&#34;&gt;// Main function, define stages and run.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestTerraformAws&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parallel&lt;/span&gt;()

    &lt;span style=&#34;color:#75715e&#34;&gt;// Pick a random AWS region to test in. This helps ensure your code works in all regions.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// awsRegion := aws.GetRandomStableRegion(t, nil, nil)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;awsRegion&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;us-east-1&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../terraform&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// At the end of the test, undeploy the web app using Terraform
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_structure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RunTestStage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cleanup&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;destroyTerraform&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt;)
    })

    &lt;span style=&#34;color:#75715e&#34;&gt;// Deploy the web app using Terraform
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test_structure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RunTestStage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deploy&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;deployTerraform&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;awsRegion&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt;)
    })

    &lt;span style=&#34;color:#75715e&#34;&gt;// Validate that the ASG deployed and is responding to HTTP requests
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test_structure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RunTestStage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;validate&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;validateAPIGateway&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt;)
    })
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Validate that the API Gateway has been deployed and is working
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validateAPIGateway&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// Load the Terraform Options saved by the earlier deploy_terraform stage
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;terraformOptions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_structure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LoadTerraformOptions&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;// Run `terraform output` to get the value of an output variable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;terraform&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Output&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;terraformOptions&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;URL&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;// It can take a few minutes for the API GW and CloudFront to finish spinning up, so retry a few times
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//  maxRetries := 30
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;timeBetweenRetries&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Setup a TLS configuration to submit with the helper, a blank struct is acceptable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;tlsConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tls&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{}

    &lt;span style=&#34;color:#75715e&#34;&gt;// Verify that the API Gateway returns a proper response
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;apigw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;retry&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DoInBackgroundUntilStopped&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check URL %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;timeBetweenRetries&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;http_helper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HttpGetWithCustomValidation&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s/app/health&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tlsConfig&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;statusCode&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;statusCode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
        })
    })

    &lt;span style=&#34;color:#75715e&#34;&gt;// Stop checking the API Gateway
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;apigw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;()
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Deploy the resources using Terraform
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deployTerraform&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;awsRegion&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;terraformOptions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;terraform&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Options&lt;/span&gt;{
        &lt;span style=&#34;color:#75715e&#34;&gt;// The path to where our Terraform code is located
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;TerraformDir&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt;,
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// Save the Terraform Options struct, instance name, and instance text so future test stages can use it
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test_structure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SaveTerraformOptions&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;terraformOptions&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;// This will run `terraform init` and `terraform apply` and fail the test if there are any errors
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;terraform&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;InitAndApply&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;terraformOptions&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Destroy the resources using Terraform
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;destroyTerraform&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testing&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// Load the Terraform Options saved by the earlier deploy_terraform stage
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;terraformOptions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_structure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LoadTerraformOptions&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;workingDir&lt;/span&gt;)

    &lt;span style=&#34;color:#a6e22e&#34;&gt;terraform&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Destroy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;terraformOptions&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Some high level notes on each stage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deploy&lt;/code&gt;: This stage will take care of running init and then apply.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;validate&lt;/code&gt;: This stage will take care of running a probe to check if our API is up and if the return code is &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cleanup&lt;/code&gt;: This stage will take care of running destroy and cleaning up everything.&lt;/p&gt;

&lt;h5 id=&#34;dep&#34;&gt;&lt;strong&gt;Dep&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Currently terratest uses dep, so you will need this file &lt;code&gt;Gopkg.toml&lt;/code&gt; and &lt;code&gt;dep&lt;/code&gt; installed to be able to install the dependencies with &lt;code&gt;dep ensure -v&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[[&lt;span style=&#34;color:#a6e22e&#34;&gt;constraint&lt;/span&gt;]]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/gruntwork-io/terratest&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.18.6&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;dockerfile&#34;&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Also you can use this small dockerfile that does all that for you, in this example using the code from the previously mentioned article.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;FROM golang:alpine
MAINTAINER &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kainlite &amp;lt;kainlite@gmail.com&amp;gt;&amp;#34;&lt;/span&gt;

ARG TERRAFORM_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.12.8
ENV TERRAFORM_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$TERRAFORM_VERSION

RUN apk --no-cache add curl git unzip gcc g++ make ca-certificates &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

RUN mkdir tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://releases.hashicorp.com/terraform/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;TERRAFORM_VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/terraform_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;TERRAFORM_VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_linux_amd64.zip&amp;#34;&lt;/span&gt; -o tmp/terraform.zip &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    unzip tmp/terraform.zip -d /usr/local/bin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rm -rf tmp/

ARG GOPROJECTPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/go/src/github.com/kainlite/serverless-cognito
COPY ./ $GOPROJECTPATH

WORKDIR $GOPROJECTPATH/test

RUN dep ensure -v

CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; -timeout&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;90m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;manually-testing-it&#34;&gt;&lt;strong&gt;Manually testing it&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;First we check that the URL actually works, and that everything is in place.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl https://api.skynetng.pw/app/health
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;healthy&amp;#34;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Next we can test it using our validate stage, using terratest:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ SKIP_deploy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true SKIP_cleanup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true go test -timeout 90m .
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ok      github.com/kainlite/test        1.117s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This works because in the terraform code we have an output called &lt;code&gt;URL&lt;/code&gt; which is &lt;code&gt;https://api.skynetng.pw&lt;/code&gt;, then we add at the end &lt;code&gt;/app/health&lt;/code&gt; and check if it return a &lt;code&gt;200&lt;/code&gt; code, otherwise we wait and retry until it does or times out.&lt;/p&gt;

&lt;h3 id=&#34;closing-notes&#34;&gt;Closing notes&lt;/h3&gt;

&lt;p&gt;And that&amp;rsquo;s all for now, in the next piece I will cover how to automate this deployment using a CI/CD tool, so you can have truly repeatable infrastructure, which can be of big importance when working on various modules, versions and deployments.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless authentication with Cognito and Go</title>
      <link>https://techsquad.rocks/blog/serverless_authentication_with_cognito_and_golang/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/serverless_authentication_with_cognito_and_golang/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>golang</tag>
      
        <tag>serverless</tag>
      
        <tag>aws</tag>
      
        <tag>security</tag>
      
        <tag>cognito</tag>
      
        <tag>lambda</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will see how to use Terraform and Go to create a serverless API using API Gateway, Lambda, and Go, and we will also handle authentication with AWS Cognito, the repo with the files can be found &lt;a href=&#34;https://github.com/kainlite/serverless-cognito&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;terraform&#34;&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this example I used terraform 0.12, and I kind of liked the new changes, it feels more like coding and a more natural way to describe things, however I think there are more bugs than usual in this version, but I really like the new output for the plan, apply, etc, getting back to the article since there is a lot of code I will gradually update the post with more notes and content or maybe another post explaining another section, but the initial version will only show the cognito part and the code to make it work and how to test it.&lt;/p&gt;

&lt;h5 id=&#34;cognito&#34;&gt;Cognito&lt;/h5&gt;

&lt;p&gt;&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/1e466c6ac28f9cfcf1513c105325e100.js&#34;&gt;&lt;/script&gt;

As we can see it&amp;rsquo;s really simple to have a cognito user pool working, the most important part here is the &lt;code&gt;auto_verified_attributes&lt;/code&gt; because that is what makes cognito to actually send an email or an sms with the confirmation code, the rest is self-describing, it creates a pool and a client, since what we need to be able to interact with out pool is the client that part is of considerable importance even that we have most things with default values. As you might have noticed we defined two &lt;code&gt;explicit_auth_flows&lt;/code&gt; and that is to be able to interact with this user pool using user and password.&lt;/p&gt;

&lt;h5 id=&#34;acm&#34;&gt;ACM&lt;/h5&gt;

&lt;p&gt;Next let&amp;rsquo;s see how we manage the certificate creation using ACM.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/21e47ec80a8c9c5cf84420a61ae44da9.js&#34;&gt;&lt;/script&gt;

Here basically we create the certificate using &lt;code&gt;aws_acm_certificate&lt;/code&gt; and validate it automatically using the &lt;code&gt;DNS&lt;/code&gt; method and the resource &lt;code&gt;aws_acm_certificate_validation&lt;/code&gt;, the other resources in the file are just there because they are kind of associated but not necessarily need to be there.&lt;/p&gt;

&lt;h5 id=&#34;route53&#34;&gt;Route53&lt;/h5&gt;

&lt;p&gt;Here we just create an alias record for the API Gateway and the validation record.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/6601b5154528547f5724e498712a8b4b.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;api-gateway&#34;&gt;API Gateway&lt;/h5&gt;

&lt;p&gt;While this file might seem relatively simple, the API Gateway has many features and can get really complex really fast, basically what we are doing here is creating an API with a resource that accepts all method types and proxy that as it is to our lambda function.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/455dfd82e2a23299dc2d22650a2c1cef.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;lambda&#34;&gt;Lambda&lt;/h5&gt;

&lt;p&gt;This file has the lambda function definition, the policy and the roles needed, basically the policy is to be able to log to CloudWatch and to inspect with X-Ray, then the log group to store the logs will set the retention period by default 7 days.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/f8d4db31c0b353d627df97418dd5dc87.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;variables-and-locals&#34;&gt;Variables and locals&lt;/h5&gt;

&lt;p&gt;First the variables file with the default values
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/0b69599f35957612616dae4220207e37.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;And last the locals file, in this small snippet we are just making a map with a computed value and the values that can come from a variable which can be quite useful in many scenarios where you don&amp;rsquo;t know all the information in advance or something is dynamically assigned:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/348a4919f625452412beeed8e2a45200.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;deployment-scripts&#34;&gt;Deployment scripts&lt;/h5&gt;

&lt;p&gt;There is a small bash script to make it easier to run the deployment, AKA as compiling the code, zipping it, and running terraform to update our function or whatever we changed.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/eafa48d2156b8a5bb2e5a458a928fab5.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;go&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The good thing is that everything is code, but we don&amp;rsquo;t have to manage any server, we just consume services from AWS completely from code, isn&amp;rsquo;t that amazing?, I apologize for the length of the file, but you will notice that it&amp;rsquo;s very repetitive, in most functions we load the AWS configuration, we make a request and return a response, we&amp;rsquo;re also using Gin as a router, which is pretty straight-forward and easy to use, we have only one authenticated path (&lt;code&gt;/user/profile&lt;/code&gt;), and we also have another unauthenticated path which is a health check (&lt;code&gt;/app/health&lt;/code&gt;), the other two paths (&lt;code&gt;/user&lt;/code&gt; and &lt;code&gt;/user/validate&lt;/code&gt;) are exclusively for the user creation process with cognito.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/755f0c1b2381af46fb2f69f8865cabb9.js&#34;&gt;&lt;/script&gt;

All logs go to CloudWatch and you can also use X-Ray to diagnose issues.&lt;/p&gt;

&lt;h5 id=&#34;testing-it&#34;&gt;&lt;strong&gt;Testing it&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;So we&amp;rsquo;re going to hit the API to create, validate, and query the empty profile of the user from the terminal using curl.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/71ba07ed304b527793ddd1f95c92d244.js&#34;&gt;&lt;/script&gt;

I have added most info in as comments in the snippet, note that I also used my test domain &lt;code&gt;skynetng.pw&lt;/code&gt; with the subdomain &lt;code&gt;api&lt;/code&gt; for all tests.&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This post was heavily inspired by &lt;a href=&#34;https://a.l3x.in/2018/07/25/lambda-api-custom-domain-tutorial.html&#34;&gt;this post&lt;/a&gt; from Alexander, kudos to him for the great work!, this post expands on that and adds the certificate with ACM, it also handles a basic AWS Cognito configuration and the necessary go code to make it work, there are other ways to accomplish the same, but what I like about this approach is that you can have some endpoints or paths without authentication and you can use authentication, etc on-demand. This article is a bit different but I will try to re-shape it in the following weeks, and also cover more of the content displayed here, let me know if you have any comments or suggestions!&lt;/p&gt;

&lt;p&gt;In some near future I will build upon this article in another article adding a few cool things, for example to allow an user to upload an image to an S3 bucket and fetch that with a friendly name using Cloudfront (In a secure manner, and only able to upload/update his/her profile picture, while being able to fetch anyone profile pic), the idea is to have a fully functional small API using AWS services and serverless facilities with common tasks that you can find in any functional website.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with terraform modules</title>
      <link>https://techsquad.rocks/blog/getting_started_with_terraform_modules/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/getting_started_with_terraform_modules/</guid>
      <tags>
      
        <tag>terraform</tag>
      
        <tag>kubernetes</tag>
      
        <tag>gcp</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will see a subtle introduction to terraform modules, how to pass data into the module, get something from the module and create a resource (GKE cluster), it&amp;rsquo;s intended to be as simple as possible just to be aware of what a module is composed of, or how can you do your own modules, sometimes it makes sense to have modules to abstract implementations that you use over several projects, or things that are often repeated along the project. So let&amp;rsquo;s see what it takes to create and use a module. The source code for this article can be found &lt;a href=&#34;https://github.com/kainlite/terraform-module-example&#34;&gt;here&lt;/a&gt;. Note that in this example I&amp;rsquo;m using GCP since they give you $300 USD for a year to try their services and it looks pretty good so far, after sign-up you will need to go to IAM, then create a service account and after that export the the key (this is required for the terraform provider to talk to GCP).&lt;/p&gt;

&lt;h5 id=&#34;composition-of-a-module&#34;&gt;&lt;strong&gt;Composition of a module&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;A module can be any folder with a &lt;code&gt;main.tf&lt;/code&gt; file in it, yes, that is the only &lt;em&gt;required&lt;/em&gt; file for a module to be usable, but the recommendation is that you also put a &lt;code&gt;README.md&lt;/code&gt; file with a description of the module if it&amp;rsquo;s intended to be used by people if it&amp;rsquo;s a sub-module it&amp;rsquo;s not necessary, also you will need a file called &lt;code&gt;variables.tf&lt;/code&gt; and other &lt;code&gt;outputs.tf&lt;/code&gt; of course if it&amp;rsquo;s a big module that cannot be splitted into sub-modules you can split those files for convenience or readability, variables should have descriptions so the tooling can show you what are they for, you can read more about the basics for a module &lt;a href=&#34;https://www.terraform.io/docs/modules/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before moving on let&amp;rsquo;s see the folder structure of our project:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/4229babfdf16f9caaf16889246a5b53c.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;okay-enough-talking-show-me-the-code&#34;&gt;&lt;strong&gt;Okay enough talking, show me the code&lt;/strong&gt;&lt;/h5&gt;

&lt;h6 id=&#34;the-project&#34;&gt;&lt;strong&gt;The project&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;Let&amp;rsquo;s start with the &lt;code&gt;main.tf&lt;/code&gt; that will call our module, notice that I added a few additional comments but it&amp;rsquo;s pretty much straight forward, we set the provider, then we define some variables, call our module and print some output (output can also be used to pass data between modules).
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/63f7b16e104bd3d2c827e4d491cbd347.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;terraform.tfvars&lt;/code&gt; has some values to override the defaults that we defined:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/2ff76f85396f70f5a5d0fd406fc91381.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h6 id=&#34;the-module&#34;&gt;&lt;strong&gt;The module&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;Now into the module itself, this module will create a GKE cluster, and while it&amp;rsquo;s not a good practice to have a module as a wrapper but for this example we will forget about that rule for a while, this is the &lt;code&gt;main.tf&lt;/code&gt; file:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/8a2db80dbcba38160e4c8f0112e55424.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;variables.tf&lt;/code&gt; file:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/183d577eef0b1967792b0e2e95e79e1e.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;And finally the &lt;code&gt;outputs.tf&lt;/code&gt; file:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/3b30dcc163e97103e9503be86672bd39.js&#34;&gt;&lt;/script&gt;

Notice that we have a lot more outputs than the one we decided to print out, but you can play with that and experiment if you want :)&lt;/p&gt;

&lt;h6 id=&#34;testing-it&#34;&gt;&lt;strong&gt;Testing it&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;First we need to initialize our project so terraform can put modules, provider files, etc in place, it&amp;rsquo;s a good practice to version things and to move between versions that way everything can be tested and if something is not working as expected you can always rollback to the previous state.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/346e84ef3577ef708625741a508afb2c.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Then we will just run it.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/e77dbdd482eb26cd54414324761900f4.js&#34;&gt;&lt;/script&gt;

If we check the output we will see that the name of the cluster matches the one from our variables and at the end we can see the output that the module produced.&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see, creating a module is pretty simple and with good planing and practice it can save you a lot of effort along big projects or while working on multiple projects, let me know your thoughts about it. Always remember to destroy the resources that you&amp;rsquo;re not going to use with &lt;code&gt;terraform destroy&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go gRPC Cheap Ping</title>
      <link>https://techsquad.rocks/blog/go_grpc_cheap_ping/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/go_grpc_cheap_ping/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>grpc</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will explore gRPC with a cheap ping application, basically we will do a ping and measure the time it takes for the message to go to the server and back before reporting it to the terminal. You can find the source code &lt;a href=&#34;https://github.com/kainlite/grpc-ping&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;protobuf&#34;&gt;&lt;strong&gt;Protobuf&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you might already know gRPC serializes data using &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protocol buffers&lt;/a&gt;, We are just going to create a &lt;a href=&#34;https://grpc.io/docs/guides/concepts/&#34;&gt;Unary RPC&lt;/a&gt; as follows.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/ad4f85164730c6c6fb2257329f7fc164.js&#34;&gt;&lt;/script&gt;

With this file in place we are defining a service that will be able to send a single &lt;code&gt;PingRequest&lt;/code&gt; and get a single &lt;code&gt;PingResponse&lt;/code&gt;, we have a &lt;code&gt;Data&lt;/code&gt; field that goes back and forth in order to send some bytes over the wire (even that we don&amp;rsquo;t really care about that, it could be important or crucial in a performance test).&lt;/p&gt;

&lt;h5 id=&#34;generating-the-code&#34;&gt;&lt;strong&gt;Generating the code&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In order to be able to use protobuf we need to generate the code for the app that we&amp;rsquo;re writing in this case for golang the command would be this one:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/dac49c31ffaedac1d0cc1584a8cce306.js&#34;&gt;&lt;/script&gt;

This will give us a definition of the service and the required structs to carry the data that we have defined as messages.&lt;/p&gt;

&lt;h5 id=&#34;client&#34;&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The client does most of the work here, as you can see you can supply 2 arguments one to point to another host:port and the second to send a string of your liking, then it measures the time it takes to send and receive the message back and prints it to the screen with a similar line to what the actual &lt;code&gt;ping&lt;/code&gt; command looks in linux.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/663a25de0321b85bde37e006c1621e60.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;server&#34;&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The server is a merely echo server since it will send back whatever you send to it and log it to the console, by default it will listen in port &lt;code&gt;50000&lt;/code&gt;.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/7c809672a86b6454f7080a88d87da977.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;testing-it&#34;&gt;&lt;strong&gt;Testing it&lt;/strong&gt;&lt;/h5&gt;

&lt;h6 id=&#34;regular-ping&#34;&gt;&lt;strong&gt;Regular ping&lt;/strong&gt;&lt;/h6&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/8f60f178d0e6796256647d0e5a5c4078.js&#34;&gt;&lt;/script&gt;


&lt;h6 id=&#34;client-1&#34;&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;This is what we would see in the terminal while testing it.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/3abc2ac34d1390680fc9fb5787c1da02.js&#34;&gt;&lt;/script&gt;

As you can see the initial connection takes a bit more time but after that the roundtrip time is very consistent (of course our cheap ping doesn&amp;rsquo;t cover errors, packet loss, etc).&lt;/p&gt;

&lt;h6 id=&#34;server-1&#34;&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;The server just echoes back and logs what received over the wire.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/edf6fc9b5f1c71e2eab054b5dbae3a24.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see gRPC is pretty fast and simplifies a lot everything that you need to do in order to have a highly efficient message system or communication between microservices for example, it&amp;rsquo;s also easy to generate the boilerplate for whatever language you prefer and have a common interface that everyone has to agree on.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go continuous delivery with Terraform and Kubernetes</title>
      <link>https://techsquad.rocks/blog/go_continuous_delivery_with_terraform_and_kubernetes/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/go_continuous_delivery_with_terraform_and_kubernetes/</guid>
      <tags>
      
        <tag>travis-ci</tag>
      
        <tag>docker</tag>
      
        <tag>golang</tag>
      
        <tag>go</tag>
      
        <tag>linux</tag>
      
        <tag>continuous-integration</tag>
      
        <tag>continuous-delivery</tag>
      
        <tag>terraform</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will continue where we left off the last time &lt;a href=&#34;https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/&#34;&gt;Go continuous integration with Travis CI and Docker&lt;/a&gt;, the files used here can be found &lt;a href=&#34;https://github.com/kainlite/whatismyip-go/tree/continuos-delivery&#34;&gt;HERE&lt;/a&gt;, and we will be creating our terraform cluster with a load balancer and generating our kubeconfig file based on the certs provided by terraform on travis and then finally creating a basic deployment and validate that everything works.&lt;/p&gt;

&lt;h5 id=&#34;digitalocean&#34;&gt;&lt;strong&gt;DigitalOcean&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;We need to create a token so terraform can create resources using DO API. Go to your account then in the menu on the left click API, then you should see something like this:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-token-1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

Once there click generate token (give it a meaningful name to you), and make sure it can write.
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-token-2.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h5 id=&#34;terraform&#34;&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As the next step it would be good to set the token for terraform, so let&amp;rsquo;s examine all files and see what they are going to do, but first we&amp;rsquo;re going to provide the secrets to our app via environment variables, and I&amp;rsquo;ve found quite useful to use &lt;code&gt;direnv&lt;/code&gt; on many projects, so the content of the first file &lt;code&gt;.envrc&lt;/code&gt; would look something like:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/2da0abc285e227b966b492f8e7f3eddc.js&#34;&gt;&lt;/script&gt;

and after that you will need to allow it&amp;rsquo;s execution by running &lt;code&gt;direnv allow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first terraform file that we are going to check is &lt;code&gt;provider.tf&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/add2f8b31929468359e9222bce0855f1.js&#34;&gt;&lt;/script&gt;

As we&amp;rsquo;re using environment variables we need to declare it and then set it in the provider, for now we only need the token.&lt;/p&gt;

&lt;p&gt;Then the &lt;code&gt;kubernetes.tf&lt;/code&gt; file:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/11d6eb62a0b3c5f0e5978e6b43e4b166.js&#34;&gt;&lt;/script&gt;

This file will be the responsible of creating the kubernetes cluster, as it&amp;rsquo;s our development cluster we only need one node.&lt;/p&gt;

&lt;p&gt;Next the file &lt;code&gt;lb.tf&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/85185e39960765a189ee70b5c9489fea.js&#34;&gt;&lt;/script&gt;

This one is particularly interesting because it will provide a point of access to our applications (port 80 on it&amp;rsquo;s public IP address), and it also uses a basic health check.&lt;/p&gt;

&lt;p&gt;And last but not least the &lt;code&gt;output.tf&lt;/code&gt; file:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/18205b3ba693be054e2ea22832f4ecef.js&#34;&gt;&lt;/script&gt;

This file will print the kubernetes config file that we need to be able to use &lt;code&gt;kubectl&lt;/code&gt;, and also the IP address of our load balancer.&lt;/p&gt;

&lt;p&gt;So what do we do with all of this?, first you will need to run &lt;code&gt;terraform init&lt;/code&gt; inside the terraform folder to download plugins and providers, once that is done you can run &lt;code&gt;terraform plan&lt;/code&gt; to see what changes terraform wants to make or &lt;code&gt;terraform apply&lt;/code&gt; to do the changes. How is that going to look?:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/d4a4c4f18be5022e2ed23e74879ff975.js&#34;&gt;&lt;/script&gt;

This will create our cluster in DigitalOcean, remember to destroy it after you&amp;rsquo;re done using it with &lt;code&gt;terraform destroy&lt;/code&gt;, if you don&amp;rsquo;t use a plan you will be prompted for a confirmation when you do &lt;code&gt;terraform apply&lt;/code&gt;, review and say &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;travis&#34;&gt;&lt;strong&gt;Travis&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;We did some additions to our &lt;code&gt;.travis.yml&lt;/code&gt; file, which are mostly to prepare &lt;code&gt;kubectl&lt;/code&gt; and to also trigger a deployment if the build succeeded.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/69cdd243a815b68c483bdc71e6bf9186.js&#34;&gt;&lt;/script&gt;

As shown in the screenshot we took the base64 encoded certificates and loaded them into travis as environment variables (KUBERNETES_CA, KUBERNETES_CLIENT_CA, KUBERNETES_CLIENT_KEY, KUBERNETES_ENDPOINT), then we decode that into files, create the configuration using kubectl and set it as active and then we apply the deployment with the newly rendered hash.&lt;/p&gt;

&lt;p&gt;This is how it should look in travis:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-environment-variables.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the generated kubernetes configuration and what values you should take into account:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/ebd9e3c82d4aa0f1e43be53078a9b593.js&#34;&gt;&lt;/script&gt;

Never do that, don&amp;rsquo;t share your configuration or anybody will be able to use your cluster, also be careful not to commit it to your repo, in this example it&amp;rsquo;s no longer valid because after running the examples I destroyed the cluster with &lt;code&gt;terraform destroy&lt;/code&gt;. Now there are four values of interest for us: certificate-authority-data: KUBERNETES_CA, client-certificate-data: KUBERNETES_CLIENT_CA, client-key-data: KUBERNETES_CLIENT_KEY and server: KUBERNETES_ENDPOINT, with these variables we can re-create our kubernetes configuration easily using kubectl, be aware that we&amp;rsquo;re not decoding to save it in travis, we do that in the travis configuration file (&lt;code&gt;.travis.yml&lt;/code&gt;).&lt;/p&gt;

&lt;h5 id=&#34;kubernetes&#34;&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;So after all that, we still need to have a deployment template to deploy our application, and it&amp;rsquo;s a template because we need to replace the SHA of the current build in the manifest before committing it to the Kubernetes API, so let&amp;rsquo;s check it &lt;code&gt;manifest.yml.template&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/aa1d9181112582ef94b5602480f95bf9.js&#34;&gt;&lt;/script&gt;

Here we expose our service in the port 30000 as a NodePort, and deploy the current SHA (replaced during execution by travis)&lt;/p&gt;

&lt;h5 id=&#34;testing-everything&#34;&gt;&lt;strong&gt;Testing everything&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Validate that the deployment went well by checking our kubernetes cluster:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/fa4e77e771c564bc14185afba4903a8c.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;First we test the load balancer, and as we will see the ip is not right, it&amp;rsquo;s the internal ip of the load balancer and not our public ip address.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/4d9b99cd269d2eb346f60c308af054da.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;But if we hit our service directly we can see the correct IP address, this could be improved but it&amp;rsquo;s left as an exercise for the avid reader ◕_◕.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/cc2618efbf28bdb8c2a83d344a6dcff7.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Finally let&amp;rsquo;s check what we should see in travis:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-travis-result-1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;As we can see everything went well and our deployment applied successfully in our cluster
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-travis-result-2.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I will be posting some articles about CI and CD and good practices that DevOps/SREs should have in mind, tips, tricks, and full deployment examples, this is the second part of a possible series of three articles (Next one should be about the same but using Jenkins) with a complete but basic example of CI first and then CD. This can of course change and any feedback would be greatly appreciated :).&lt;/p&gt;

&lt;p&gt;In this example many things could be improved, for example we use a node port and there is no firewall so we can hit our app directly via nodeport or using the load balancer, we should add some firewall rules so only the load balancer is able to talk to the node port range (30000-32767).&lt;/p&gt;

&lt;p&gt;Also be aware that for production this setup will not be sufficient but for a development environment would suffice initially.&lt;/p&gt;

&lt;p&gt;Some useful links for &lt;a href=&#34;https://docs.travis-ci.com/user/job-lifecycle/&#34;&gt;travis&lt;/a&gt; and &lt;a href=&#34;https://www.terraform.io/docs/providers/do/r/kubernetes_cluster.html&#34;&gt;terraform&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go continuous integration with Travis CI and Docker</title>
      <link>https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/</guid>
      <tags>
      
        <tag>travis-ci</tag>
      
        <tag>docker</tag>
      
        <tag>golang</tag>
      
        <tag>linux</tag>
      
        <tag>continuous-integration</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will see how to create a simple continuous integration process using &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis-CI&lt;/a&gt; and &lt;a href=&#34;https://cloud.docker.com&#34;&gt;Docker HUB&lt;/a&gt;, the files used here can be found &lt;a href=&#34;https://github.com/kainlite/whatismyip-go&#34;&gt;HERE&lt;/a&gt;, in the next article we will continue with what we have here to provide continuous deployment possibly using Jenkins or maybe Travis, let me know which one you would prefer to see.&lt;/p&gt;

&lt;h5 id=&#34;first-thing-first&#34;&gt;&lt;strong&gt;First thing first&lt;/strong&gt;&lt;/h5&gt;

&lt;h5 id=&#34;app&#34;&gt;App&lt;/h5&gt;

&lt;p&gt;We will review the docker file, the app code and the travis-ci file, so let&amp;rsquo;s start with the app &lt;code&gt;main.go&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/f7e0c3e40b02cc31a78f4eef491fa834.js&#34;&gt;&lt;/script&gt;

Let&amp;rsquo;s quickly check what this code does, first we check for the port to use, then convert it to a number, register the handler for our HTTP function and listen for requests, this code should print our ip address as you would expect by the name.&lt;/p&gt;

&lt;p&gt;Then the &lt;code&gt;main_test.go&lt;/code&gt; code:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/13391af166c77ffb10b940e5a9a1ac4d.js&#34;&gt;&lt;/script&gt;

The test is fairly simple it just checks that the web server works by trying to fetch &lt;code&gt;/&lt;/code&gt; and checking for an empty body and &lt;code&gt;200&lt;/code&gt; status code.&lt;/p&gt;

&lt;h5 id=&#34;docker&#34;&gt;Docker&lt;/h5&gt;

&lt;p&gt;Next the &lt;code&gt;Dockerfile&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/5db561f6f8808f1b5eaf091887416311.js&#34;&gt;&lt;/script&gt;

We set the working directory to please go, then fetch dependencies and install our binary, we also generate a test binary, expose the port that we want to use and set the user as nobody in case someone can exploit our app and jump into our container, then just set the command to execute on &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;travis&#34;&gt;Travis&lt;/h5&gt;

&lt;p&gt;And last but not least the &lt;code&gt;.travis.yml&lt;/code&gt; file:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/55c5fcd1fde0bfc148b8a9ee8a41fc5a.js&#34;&gt;&lt;/script&gt;

We let travis know that we will be running some go code and also docker, then build the image, run the tests and then the app as initialization, after that we validate that the app works and lastly login to dockerhub and push the image, the important things to have in mind here is that we use variables for example the repo name, the commit SHA, and the docker username and password in a secure way, since travis-ci hides the values that we tell them to.&lt;/p&gt;

&lt;h5 id=&#34;putting-everything-together&#34;&gt;&lt;strong&gt;Putting everything together&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;So far we got the &lt;a href=&#34;https://github.com/kainlite/whatismyip-go&#34;&gt;repo&lt;/a&gt; going, the configuration for travis, the dockerfile, the app, but now we need to make use of it, so you will need to create a travis account for this to work then link your github account to it, then you will be able to sync your repositories and you should see something like this:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-travis-list.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

Once you have your account linked you will be able to sync and enable repositories to be built.&lt;/p&gt;

&lt;p&gt;After enabling the repository you can configure some details like environment variables, here we will set the credentials for dockerhub.
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-travis-settings.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;And now we will create the repository in dockerhub:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-docker-repo.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

After the repository is created we can trigger a build from travis or push a commit to the repo in order to trigger a build and to validate that everything works.&lt;/p&gt;

&lt;p&gt;You should see something like this in travis if everything went well:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-travis-log-1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

You can validate that everything went well by checking the commit SHA that triggered the build.&lt;/p&gt;

&lt;p&gt;And dockerhub:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-travis-log-2.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

The same SHA will be used to tag the image.&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I will be posting some articles about CI and CD and good practices that DevOps/SREs should have in mind, tips, tricks, and full deployment examples, this is the first part of a possible series of two or three articles with a complete but basic example of CI first and then CD. This can of course change and any feedback would be greatly appreciated :).&lt;/p&gt;

&lt;p&gt;Some useful links for travis and &lt;a href=&#34;https://docs.travis-ci.com/user/docker/&#34;&gt;docker&lt;/a&gt; and the &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables/&#34;&gt;environment variables list&lt;/a&gt; that can be used.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Actually using Vault on Kubernetes</title>
      <link>https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/</guid>
      <tags>
      
        <tag>kubernetes</tag>
      
        <tag>vault</tag>
      
        <tag>linux</tag>
      
        <tag>security</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In the previous article we configured Vault with Consul on our cluster, now it&amp;rsquo;s time to go ahead and use it to provision secrets to our pods/applications. If you don&amp;rsquo;t remember about it or don&amp;rsquo;t have your Vault already configured you can go to &lt;a href=&#34;https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/&#34;&gt;Getting started with HashiCorp Vault on Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article we will actually create an example using mutual TLS and provision some secrets to our app, You can find the files used here in &lt;a href=&#34;https://github.com/kainlite/vault-kubernetes&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;creating-a-cert-for-our-new-client&#34;&gt;&lt;strong&gt;Creating a cert for our new client&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As we see here we need to enable kv version 1 on &lt;code&gt;/secret&lt;/code&gt; for this to work, then we just create a secret and store it as a kubernetes secret for myapp, note that the CA was created in the previous article and we rely on these certificates so we can keep building on that.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/2989cf05404896f7b65ac400068ac903.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;service-account-for-kubernetes&#34;&gt;&lt;strong&gt;Service account for kubernetes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In Kubernetes, a service account provides an identity for processes that run in a Pod so that the processes can contact the API server.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/8440fe3654d36fb2055c7ceb894f167e.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;vault-policy&#34;&gt;&lt;strong&gt;Vault policy&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Then we need to set a read-only policy for our secrets, we don&amp;rsquo;t want or app to be able to write or rewrite secrets.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/aef3234eb43aa37f7cce5f20ecf7c757.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;kubernetes-configuration&#34;&gt;&lt;strong&gt;Kubernetes configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Set the environment variables to point to the running Minikube environment and enable the &lt;a href=&#34;https://www.vaultproject.io/docs/auth/kubernetes.html#configuration&#34;&gt;kubernetes authentication method&lt;/a&gt; and then validate it from a temporal Pod.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/a47d22781b177c483bfe706cc436f049.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;the-deployment-and-the-consul-template-configuration&#34;&gt;&lt;strong&gt;The deployment and the consul-template configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;If you check the volume mounts and the secrets we load the certificates we created initially and use them to fetch the secret from vault
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/0cc0e90b668c2fef4d2442e1b9eed03f.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;This is where the magic happens so we&amp;rsquo;re able to fetch secrets (thanks to that role and the token that then will be stored there)
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/f977a689000a20c5163ce72cea0039f5.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;And last but not least we create a file based in the template provided which our nginx container will render on the screen later, this is done using Consul Template.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/3dd851d97eba8222dd978a2e7ed067a9.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;test-it&#34;&gt;&lt;strong&gt;Test it!&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The last step would be to test all that, so after having deployed the files to kubernetes we should see something like this
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/269dd3f96ef2b5505a50513eef9ff94c.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This post was heavily inspired by &lt;a href=&#34;https://learn.hashicorp.com/vault/identity-access-management/vault-agent-k8s&#34;&gt;this doc page&lt;/a&gt;, the main difference is that we have mutual TLS on, the only thing left would be to auto unseal our Vault, but we will left that for a future article or as an exercise for the reader.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with HashiCorp Vault on Kubernetes</title>
      <link>https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/</guid>
      <tags>
      
        <tag>kubernetes</tag>
      
        <tag>vault</tag>
      
        <tag>linux</tag>
      
        <tag>security</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Vault secures, stores, and tightly controls access to tokens, passwords, certificates, API keys, and other secrets in modern computing. What this means is that you can safely store all your App secrets in Vault without having to worry anymore how to store, provide, and use those secrets, we will see how to install it on a running kubernetes cluster and save and read a secret by our application, in this page we will be using Vault version 1.1.1, we will be using dynamic secrets, that means that each pod will have a different secret and that secret will expire once the pod is killed.&lt;/p&gt;

&lt;p&gt;Before you start you will need &lt;a href=&#34;https://www.consul.io/docs/install/index.html&#34;&gt;Consul&lt;/a&gt;, &lt;a href=&#34;https://www.vaultproject.io/docs/install/&#34;&gt;Vault&lt;/a&gt; client binaries and &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube/&#34;&gt;Minikube&lt;/a&gt; or any running cluster, you can find the files used here in &lt;a href=&#34;https://github.com/kainlite/vault-consul-tls&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the part one of &lt;a href=&#34;https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/&#34;&gt;two&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;preparing-the-cluster&#34;&gt;&lt;strong&gt;Preparing the cluster&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s start minikube and validate that we can reach our cluster with &lt;code&gt;minikube start&lt;/code&gt; and then with &lt;code&gt;kubectl get nodes&lt;/code&gt;, also the dashboard can become handy you can invoke it like this &lt;code&gt;minikube dashboard&lt;/code&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/750ee3b20d03fe3e999844c1c80fcf3f.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;creating-certificates-for-consul-and-vault&#34;&gt;&lt;strong&gt;Creating certificates for Consul and Vault&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Vault needs a backend to store data, this backend can be consul, etcd, postgres, and &lt;a href=&#34;https://www.vaultproject.io/docs/configuration/storage/index.html&#34;&gt;many more&lt;/a&gt;, so the first thing that we are going to do is create a certificate so consul and vault can speak to each other securely.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/f46c829de562750d0fb21ec25f8fa91b.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;consul&#34;&gt;&lt;strong&gt;Consul&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The next steps would be to create an encryption key for the consul cluster and to create all the kubernetes resources associated with it
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/4f787ef0e5152eb14928a73b3e2b9d91.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;vault&#34;&gt;&lt;strong&gt;Vault&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Once we have Consul running starting vault should be straight forward, we need to create all kubernetes resources associated with it and then initialize and unseal the vault.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/dbe6cb3055b5c202bb3f65b7178e2f7c.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see it takes a while to configure a Vault server but I really like the pattern that renders for the apps using it, in the next post we will see how to unlock it automatically with kubernetes and also how to mount the secrets automatically to our pods so our applications can use it :), this post was heavily inspired by &lt;a href=&#34;https://testdriven.io/blog/running-vault-and-consul-on-kubernetes/&#34;&gt;this one&lt;/a&gt; and &lt;a href=&#34;https://learn.hashicorp.com/consul/advanced/day-1-operations/certificates#configuring-agents&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a lambda function with terraform</title>
      <link>https://techsquad.rocks/blog/creating_a_lambda_function_with_terraform/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/creating_a_lambda_function_with_terraform/</guid>
      <tags>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>aws</tag>
      
        <tag>terraform</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Here we will see how to use terraform to manage lambda functions, it will be a simple hello world in node.js, available as a &lt;a href=&#34;https://gist.github.com/smithclay/e026b10980214cbe95600b82f67b4958&#34;&gt;gist here&lt;/a&gt;, note that I did not create this example but it&amp;rsquo;s really close to the official documentation but shorter, you can see another example with &lt;a href=&#34;https://github.com/terraform-providers/terraform-provider-aws/tree/master/examples/lambda&#34;&gt;python here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before you start make sure you already have your account configured for &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html&#34;&gt;awscli&lt;/a&gt; and &lt;a href=&#34;https://learn.hashicorp.com/terraform/getting-started/install.html&#34;&gt;terraform&lt;/a&gt; installed.&lt;/p&gt;

&lt;h5 id=&#34;configuration-files&#34;&gt;&lt;strong&gt;Configuration files&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;First of all we need to get our terraform file or files (in a normal case scenario, but since this is a hello world it is easier to have everything in the same file), I have added some comments of what each part does as you can see.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/67b5e84684ae6cca6c0f0847352df55f.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;the-code-itself&#34;&gt;&lt;strong&gt;The code itself&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Then we need the code that we need or want to run there.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/e52a9a9e63f7de88f11090add8668dd1.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;initialize-terraform&#34;&gt;&lt;strong&gt;Initialize terraform&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;First of all we will need to initialize terraform like in the gist below, this will download the necessary plugins that we used in the code, otherwise it won&amp;rsquo;t be able to run.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/cca6fe034015ee2ce205baf6b68750c3.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;apply-the-changes&#34;&gt;&lt;strong&gt;Apply the changes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The next step would be to apply the changes, you can also plan to an outfile and then apply from that file, but also apply works, this command will take care of doing everything that we defined, it will archive the code, the IAM role and the function itself.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/128f522071e66f2a33799241a79ebd1a.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;running-the-function&#34;&gt;&lt;strong&gt;Running the function&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Then the last step would be to run our function to see if it actually works, in this case we&amp;rsquo;re using the awscli but you can use the AWS console as well, the result will be the same.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/ea98dcf28b0fe1df31c662e5051bb5b5.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;clean-up&#34;&gt;&lt;strong&gt;Clean up&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Remember to clean up before leaving.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/83be5bcc8e237cc30d7aee17667a5171.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know about you, but I&amp;rsquo;m going to keep using the &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless framework&lt;/a&gt; for now, but it&amp;rsquo;s good to see that we have alternatives and with some effort can give us the same functionality.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Socks Proxy</title>
      <link>https://techsquad.rocks/blog/ssh_socks_proxy/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/ssh_socks_proxy/</guid>
      <tags>
      
        <tag>openssh</tag>
      
        <tag>tips-and-tricks</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Socks proxy and what it means, we also will explore &lt;a href=&#34;https://techsquad.rocks/blog/ssh_remote_port_forward/&#34;&gt;SSH Remote Port Forward&lt;/a&gt; and &lt;a href=&#34;https://techsquad.rocks/blog/ssh_local_port_forward/&#34;&gt;SSH Local Port Forward&lt;/a&gt; and how to use that functionality.&lt;/p&gt;

&lt;h5 id=&#34;explanation&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SOCKS is an Internet protocol that exchanges network packets between a client and server through a proxy server (Extracted from Wikipedia). So basically it allows our remote server to become a VPNey likey thingy using SSH, so let&amp;rsquo;s see the different options of how and when to use it. But we will need to tell the application to use that SOCKS proxy, for example our browser or curl.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The command&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -D &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt; -Nn ec2-user@54.210.37.203&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;For example I started a EC2 instance for this example and this is the output from curl:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl --socks4 localhost:9999 icanhazip.com
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 54.210.37.203&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;the-parameters-and-their-meaning&#34;&gt;&lt;strong&gt;The parameters and their meaning&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I extracted a portion of the meaning of parameter from the man page, but in a nutshell it means dynamic port forward without a shell.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-N Do not execute a remote command. This is useful for just forwarding ports.
-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.
-D Specifies a local “dynamic” application-level port forwarding.  This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see this option can be really handy to have a temporary VPN or proxy, also if you want to make this automatic and not so temporary you can check autossh or any real VPN solution like OpenVPN. You can use this kind of proxy in any App that supports SOCKS, most browsers do for example.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Remote Port Forward</title>
      <link>https://techsquad.rocks/blog/ssh_remote_port_forward/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/ssh_remote_port_forward/</guid>
      <tags>
      
        <tag>openssh</tag>
      
        <tag>tips-and-tricks</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Remote port forward and what it means, we also will explore &lt;a href=&#34;https://techsquad.rocks/blog/ssh_local_port_forward/&#34;&gt;SSH Local Port Forward&lt;/a&gt; and &lt;a href=&#34;https://techsquad.rocks/blog/ssh_socks_proxy/&#34;&gt;SSH Socks Proxy&lt;/a&gt; and how to use that functionality.&lt;/p&gt;

&lt;h5 id=&#34;explanation&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Remote port forward basically let&amp;rsquo;s you forward one port from your machine to a remote machine, for example you want to connect to a local service from a remote server but just temporarily, let&amp;rsquo;s say you want to connect to a mysql instance on the default port (3306).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The command&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -Nn -R &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;:localhost:3306 user@example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The parameters and their meaning&lt;/strong&gt;
I extracted a portion of the meaning of parameter from the man page, but in a nutshell it means remote port forward without a shell.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-N Do not execute a remote command. This is useful for just forwarding ports.
-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.
-R Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;server-configuration&#34;&gt;&lt;strong&gt;Server configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;There are two configuration parameters that can change the behaviour of remote and local forwarded ports, those parameters are &lt;code&gt;GatewayPorts&lt;/code&gt; and &lt;code&gt;AllowTcpForwarding&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;gatewayports&#34;&gt;&lt;strong&gt;GatewayPorts&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;By default this option is &lt;code&gt;no&lt;/code&gt; which means that only the remote computer will be able to connect to the forwarded port, you can set it to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;clientspecified&lt;/code&gt; to allow other machines use that remote port-forward (handy and dangerous).&lt;/p&gt;

&lt;h5 id=&#34;allowtcpforwarding&#34;&gt;&lt;strong&gt;AllowTcpForwarding&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;By default this option is set to &lt;code&gt;yes&lt;/code&gt;, you can restrict remote and local port forwarding by setting it to &lt;code&gt;no&lt;/code&gt; or allow only local by setting it to &lt;code&gt;local&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;As you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don&amp;rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Local Port Forward</title>
      <link>https://techsquad.rocks/blog/ssh_local_port_forward/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/ssh_local_port_forward/</guid>
      <tags>
      
        <tag>openssh</tag>
      
        <tag>tips-and-tricks</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Local port forward and what it means, we also will explore &lt;a href=&#34;https://techsquad.rocks/blog/ssh_remote_port_forward/&#34;&gt;SSH Remote Port Forward&lt;/a&gt; and &lt;a href=&#34;https://techsquad.rocks/blog/ssh_socks_proxy/&#34;&gt;SSH Socks Proxy&lt;/a&gt; and how to use that functionality.&lt;/p&gt;

&lt;h5 id=&#34;explanation&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Local port forward basically let&amp;rsquo;s you forward one port from a remote machine to your local machine, for example you want to connect to a remote service from machine but just temporarily or there is a firewall that won&amp;rsquo;t let you do it, let&amp;rsquo;s say you want to connect to a mysql instance on the default port (3306).&lt;/p&gt;

&lt;h5 id=&#34;the-command&#34;&gt;&lt;strong&gt;The command&lt;/strong&gt;&lt;/h5&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet1.sh&#34;&gt;&lt;/script&gt;


&lt;p&gt;Here we are forwarding localhost:3306 in the remote machine to localhost:3306, but you can specify another address in the network for example 172.16.16.200 and the command would look like this:&lt;/p&gt;

&lt;p&gt;&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet2.sh&#34;&gt;&lt;/script&gt;

This will give you access to the ip 172.16.16.200 and port 3306 in the remote network.&lt;/p&gt;

&lt;h5 id=&#34;the-parameters-and-their-meaning&#34;&gt;&lt;strong&gt;The parameters and their meaning&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I extracted a portion of the meaning of parameter from the man page, but in a nutshell it means local port forward without a shell.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet3.txt&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;server-configuration&#34;&gt;&lt;strong&gt;Server configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;There is a configuration parameter that can change the behaviour of remote and local forwarded ports, that parameter is &lt;code&gt;AllowTcpForwarding&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;allowtcpforwarding&#34;&gt;&lt;strong&gt;AllowTcpForwarding&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;By default this option is set to &lt;code&gt;yes&lt;/code&gt;, you can restrict remote and local port forwarding by setting it to &lt;code&gt;no&lt;/code&gt; or allow only local by setting it to &lt;code&gt;local&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don&amp;rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create an AWS lambda function in Go</title>
      <link>https://techsquad.rocks/blog/create_an_aws_lambda_function_in_go/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/create_an_aws_lambda_function_in_go/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>golang</tag>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>linux</tag>
      
        <tag>terraform</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will create a lambda function and an API Gateway route like we did with the serverless framework but only using AWS tools, we will be using the same generated code for our function from the last article &lt;a href=&#34;https://techsquad.rocks/blog/what_does_the_serverless_framework_does_for_me/&#34;&gt;What does the serverless framework does for me&lt;/a&gt;, so refer to that one before starting this one if you want to know how did we get here. Also as a side note this is a very basic example on how to get started with lambda without any additional tool.&lt;/p&gt;

&lt;h5 id=&#34;let-s-see-the-code-one-more-time&#34;&gt;&lt;strong&gt;Let&amp;rsquo;s see the code one more time&lt;/strong&gt;&lt;/h5&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/events&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#75715e&#34;&gt;// Response is of type APIGatewayProxyResponse since we&amp;#39;re leveraging the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// AWS Lambda Proxy Request functionality (default behavior)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// https://serverless.com/framework/docs/providers/aws/events/apigateway/#lambda-proxy-integration
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;events&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;APIGatewayProxyResponse&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Handler is our lambda handler invoked by the `lambda.Start` function call
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}{
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go Serverless v1.0! Your function executed successfully!&amp;#34;&lt;/span&gt;,
    })
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HTMLEscape&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;)

    &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;:      &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;IsBase64Encoded&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;:            &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;:           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-MyCompany-Func-Reply&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-handler&amp;#34;&lt;/span&gt;,
        },
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With that code as a starting point, now we need to build, package, upload, and deploy our function:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux go build main.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Package&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;zip main.zip ./main
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   adding: main (deflated 51%)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create the role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to IAM &amp;gt; Roles &amp;gt; Create.
Then select Lambda, assign a name and a description and then get the ARN for this role. Note that with the serverless framework this is done automatically for us, so we don&amp;rsquo;t need to create a new role for each&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upload / Deploy&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws lambda create-function &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --region us-east-1 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --function-name helloworld &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --memory &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --role arn:aws:iam::894527626897:role/testing-aws-go &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --runtime go1.x &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --zip-file fileb://main.zip &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --handler main

&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;FunctionName&amp;#34;: &amp;#34;helloworld&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;FunctionArn&amp;#34;: &amp;#34;arn:aws:lambda:us-east-1:894527626897:function:helloworld&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Runtime&amp;#34;: &amp;#34;go1.x&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Role&amp;#34;: &amp;#34;arn:aws:iam::894527626897:role/testing-aws-go&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Handler&amp;#34;: &amp;#34;main&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;CodeSize&amp;#34;: 4346283,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Timeout&amp;#34;: 3,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;MemorySize&amp;#34;: 128,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;LastModified&amp;#34;: &amp;#34;2019-02-16T15:44:10.610+0000&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;CodeSha256&amp;#34;: &amp;#34;02/PQBeQuCC8JS1TLjyU38oiUwiyQSmKJXjya25XpFA=&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Version&amp;#34;: &amp;#34;$LATEST&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;TracingConfig&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Mode&amp;#34;: &amp;#34;PassThrough&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;RevisionId&amp;#34;: &amp;#34;7c9030e5-4a26-4f7e-968d-3a4f65dfde21&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that your function-name must match the name of your Lambda handler name (Handler). Note that this role might be insecure in some scenarios if you grant too much permissions, so try to restrict it as much as possible as with any role and policy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test the function&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws lambda invoke --function-name helloworld --log-type Tail /dev/stdout
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&amp;#34;statusCode&amp;#34;:200,&amp;#34;headers&amp;#34;:{&amp;#34;Content-Type&amp;#34;:&amp;#34;application/json&amp;#34;,&amp;#34;X-MyCompany-Func-Reply&amp;#34;:&amp;#34;hello-handler&amp;#34;},&amp;#34;body&amp;#34;:&amp;#34;{\&amp;#34;message\&amp;#34;:\&amp;#34;Go Serverless v1.0! Your function executed successfully!\&amp;#34;}&amp;#34;}{&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;StatusCode&amp;#34;: 200,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;LogResult&amp;#34;: &amp;#34;U1RBUlQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQgVmVyc2lvbjogJExBVEVTVApFTkQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQKUkVQT1JUIFJlcXVlc3RJZDogZmU0ZjFhOGYtZGMwMi00MmFkLWIwZWMtMDIwOWI2ODA2NWFkCUR1cmF0aW9uOiAxMy4xOSBtcwlCaWxsZWQgRHVyYXRpb246IDEwMCBtcyAJTWVtb3J5IFNpemU6IDEyOCBNQglNYXggTWVtb3J5IFVzZWQ6IDQ1IE1CCQo=&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;ExecutedVersion&amp;#34;: &amp;#34;$LATEST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Everything looks about right, so what&amp;rsquo;s next? We will eventually need to communicate with this code from an external source, so let&amp;rsquo;s see how we can do that with the API Gateway. Also the log is encoded in base64, so if you want to see what the log result was do the following.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check the logs&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;U1RBUlQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQgVmVyc2lvbjogJExBVEVTVApFTkQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQKUkVQT1JUIFJlcXVlc3RJZDogZmU0ZjFhOGYtZGMwMi00MmFkLWIwZWMtMDIwOWI2ODA2NWFkCUR1cmF0aW9uOiAxMy4xOSBtcwlCaWxsZWQgRHVyYXRpb246IDEwMCBtcyAJTWVtb3J5IFNpemU6IDEyOCBNQglNYXggTWVtb3J5IFVzZWQ6IDQ1IE1CCQo=&amp;#34;&lt;/span&gt; | base64 -d
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# START RequestId: fe4f1a8f-dc02-42ad-b0ec-0209b68065ad Version: $LATEST&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# END RequestId: fe4f1a8f-dc02-42ad-b0ec-0209b68065ad&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# REPORT RequestId: fe4f1a8f-dc02-42ad-b0ec-0209b68065ad  Duration: 13.19 ms      Billed Duration: 100 ms         Memory Size: 128 MB     Max Memory Used: 45 MB&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You should also be able to see this same output in CloudWatch.&lt;/p&gt;

&lt;h5 id=&#34;api-gateway&#34;&gt;&lt;strong&gt;API Gateway&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;To make this step simpler I decided to use the AWS Console instead of the CLI it will also cut down the size of this article substantially.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we need to create the API Gateway endpoint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note that you only have to go to Lambda-&amp;gt;Functions-&amp;gt;helloworld-&amp;gt;Add triggers-&amp;gt;API Gateway. And then complete as shown in the image, when you save this new trigger you will get the resource that then can be used to test the API Gateway integration.
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/lambda-helloworld-example.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The endpoint will show as follows (Click on API Gateway):
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/lambda-helloworld-example-endpoint.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test the API&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -v https://r8efasfb26.execute-api.us-east-1.amazonaws.com/default/helloworld
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *   Trying 54.236.123.239...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TCP_NODELAY set&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connected to r8efasfb26.execute-api.us-east-1.amazonaws.com (54.236.123.239) port 443 (#0)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * ALPN, offering h2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * ALPN, offering http/1.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * successfully set certificate verify locations:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *   CAfile: /etc/ssl/certs/ca-certificates.crt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   CApath: none&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.3 (OUT), TLS handshake, Client hello (1):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.3 (IN), TLS handshake, Server hello (2):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Certificate (11):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Server key exchange (12):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Server finished (14):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (OUT), TLS handshake, Client key exchange (16):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (OUT), TLS handshake, Finished (20):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Finished (20):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * ALPN, server accepted to use h2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Server certificate:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  subject: CN=*.execute-api.us-east-1.amazonaws.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  start date: Sep 20 00:00:00 2018 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  expire date: Oct 20 12:00:00 2019 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  subjectAltName: host &amp;#34;r8efasfb26.execute-api.us-east-1.amazonaws.com&amp;#34; matched cert&amp;#39;s &amp;#34;*.execute-api.us-east-1.amazonaws.com&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  SSL certificate verify ok.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Using HTTP2, server supports multi-use&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connection state changed (HTTP/2 confirmed)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Using Stream ID: 1 (easy handle 0x56394c766db0)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; GET /default/helloworld HTTP/2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; Host: r8efasfb26.execute-api.us-east-1.amazonaws.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; User-Agent: curl/7.63.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; Accept: */*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connection state changed (MAX_CONCURRENT_STREAMS == 128)!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; HTTP/2 200&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; date: Sat, 16 Feb 2019 17:17:58 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; content-type: application/json&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; content-length: 70&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amzn-requestid: ce5c5863-320e-11e9-9e76-875e7540974c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amz-apigw-id: VM_XAGhoIAMFqoQ=&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-mycompany-func-reply: hello-handler&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amzn-trace-id: Root=1-5c6845c6-920cfc7da3cfd94f3e644647;Sampled=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connection #0 to host r8efasfb26.execute-api.us-east-1.amazonaws.com left intact&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&amp;#34;message&amp;#34;:&amp;#34;Go Serverless v1.0! Your function executed successfully!&amp;#34;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If you ask me that was a lot of effort to handle without automation, maybe AWS SAM or the serverless framework can make things easier and let you focus on your application rather than the boilerplate required for it to run.&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;Always remember to clean up and delete everything that you created (to avoid surprises and save money), in this article I will leave that as an exercise for the reader :)&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What does the serverless framework does for me</title>
      <link>https://techsquad.rocks/blog/what_does_the_serverless_framework_does_for_me/</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/what_does_the_serverless_framework_does_for_me/</guid>
      <tags>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>go</tag>
      
        <tag>golang</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless framework&lt;/a&gt; is a nice tool to manage all your cloud functions. from their page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Serverless Framework helps you develop and deploy your AWS Lambda functions, along with the AWS infrastructure resources they require. It&amp;rsquo;s a CLI that offers structure, automation and best practices out-of-the-box, allowing you to focus on building sophisticated, event-driven, serverless architectures, comprised of Functions and Events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;let-s-take-the-golang-example-for-a-spin&#34;&gt;&lt;strong&gt;Let&amp;rsquo;s take the golang example for a spin&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;So let&amp;rsquo;s generate a project with the serverless framework and see everything that it does for us.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir foo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$_&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  serverless create -t aws-go
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Generating boilerplate...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  _______                             __&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |   _   .-----.----.--.--.-----.----|  .-----.-----.-----.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |   |   |             The Serverless Application Framework&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |       |                           serverless.com, v1.36.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  -------&amp;#39;&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Successfully generated boilerplate for template: &amp;#34;aws-go&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: NOTE: Please update the &amp;#34;service&amp;#34; property in serverless.yml with your service name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Got you a bit of command line fu right there with the &amp;ldquo;$_&amp;rdquo; (it means the first parameter of the previous command)&lt;/p&gt;

&lt;p&gt;Okay all peachy but what just happened? We initialized a serverless framework project with the template aws-go (as you probably figured by now) the serverless framework can handle different languages and cloud providers, in this example we picked aws and go (there is another template for go called aws-go-dep which as the name indicates uses dep to manage dependencies), enough talking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s take a look at the files&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tree .
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ├── hello&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# │   └── main.go&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ├── Makefile&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ├── serverless.yml&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# └── world&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     └── main.go&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# 2 directories, 4 files&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We got a manifest &lt;code&gt;serverless.yml&lt;/code&gt; a &lt;code&gt;Makefile&lt;/code&gt; (which you can use to build your functions (to validate syntax errors for instance or run in test mode before pushing them to AWS, it will also be used to build them while deploying)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The manifest file indicates a lot of things, I will add comments to the &lt;em&gt;code&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;frameworkVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;=1.28.0 &amp;lt;2.0.0&amp;#34;&lt;/span&gt;

provider:
  name: aws
  runtime: go1.x

&lt;span style=&#34;color:#75715e&#34;&gt;# Which files needs to be included and which to be ignored&lt;/span&gt;
package:
 exclude:
   - ./**
 include:
   - ./bin/**

&lt;span style=&#34;color:#75715e&#34;&gt;# The functions and the handlers (the actual function definition in the code), and events which then will be translated into API Gateway endpoints for your functions&lt;/span&gt;
functions:
  hello:
    handler: bin/hello
    events:
      - http:
          path: hello
          method: get
  world:
    handler: bin/world
    events:
      - http:
          path: world
          method: get&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s take a look at the hello function / file&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;package main

import &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/events&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

// Response is of type APIGatewayProxyResponse since we&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;re leveraging the
// AWS Lambda Proxy Request functionality &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default behavior&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
//
// https://serverless.com/framework/docs/providers/aws/events/apigateway/#lambda-proxy-integration
type Response events.APIGatewayProxyResponse

// Handler is our lambda handler invoked by the &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;lambda.Start&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; call
func Handler&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Response, error&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    var buf bytes.Buffer

    body, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json.Marshal&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;interface&lt;span style=&#34;color:#f92672&#34;&gt;{}{&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go Serverless v1.0! Your function executed successfully!&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Response&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;StatusCode: &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, err
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    json.HTMLEscape&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;amp;buf, body&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

    resp :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Response&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        StatusCode:      &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
        IsBase64Encoded: false,
        Body:            buf.String&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;,
        Headers: map&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;:           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-MyCompany-Func-Reply&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-handler&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resp, nil
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    lambda.Start&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Handler&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This function only returns some text with some headers, every lambda function requires the lambda.Start with your function name as an entrypoint, in this case Handler, the context is usually used to pass data between calls or functions. The rest of the code is pretty straight forward go code, it builds a json object and returns it along with some headers.&lt;/p&gt;

&lt;h5 id=&#34;let-s-deploy-it&#34;&gt;&lt;strong&gt;Let&amp;rsquo;s deploy it&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;serverless deploy
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: WARNING: Missing &amp;#34;tenant&amp;#34; and &amp;#34;app&amp;#34; properties in serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Packaging service...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Excluding development dependencies...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading CloudFormation file to S3...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading artifacts...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading service .zip file to S3 (10.88 MB)...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Validating template...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Updating Stack...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Checking Stack update progress...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ............&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Stack update finished...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Service Information&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# service: aws-go&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stage: dev&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# region: us-east-1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stack: aws-go-dev&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# api keys:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# endpoints:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   GET - https://cfr9zyw3r1.execute-api.us-east-1.amazonaws.com/dev/hello&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   GET - https://cfr9zyw3r1.execute-api.us-east-1.amazonaws.com/dev/world&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# functions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   hello: aws-go-dev-hello&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   world: aws-go-dev-world&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# layers:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
So a lot happened here, the deploy function compiled our binary, packaged it, uploaded that package to s3, created a cloudformation stack and after everything was completed, returned the endpoints that were defined, as you can see the framework enabled us to create and deploy a function (two actually) really easily which totally simplifies the process of managing functions and events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And test it&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -v https://cfr9zyw3r1.execute-api.us-east-1.amazonaws.com/dev/hello
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *   Trying 99.84.27.2...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TCP_NODELAY set&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connected to cfr9zyw3r1.execute-api.us-east-1.amazonaws.com (99.84.27.2) port 443 (#0)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * ALPN, offering h2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * ALPN, offering http/1.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * successfully set certificate verify locations:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *   CAfile: /etc/ssl/certs/ca-certificates.crt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   CApath: none&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.3 (OUT), TLS handshake, Client hello (1):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.3 (IN), TLS handshake, Server hello (2):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Certificate (11):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Server key exchange (12):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Server finished (14):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (OUT), TLS handshake, Client key exchange (16):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (OUT), TLS handshake, Finished (20):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Finished (20):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * ALPN, server accepted to use h2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Server certificate:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  subject: CN=*.execute-api.us-east-1.amazonaws.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  start date: Oct  9 00:00:00 2018 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  expire date: Oct  9 12:00:00 2019 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  subjectAltName: host &amp;#34;cfr9zyw3r1.execute-api.us-east-1.amazonaws.com&amp;#34; matched cert&amp;#39;s &amp;#34;*.execute-api.us-east-1.amazonaws.com&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  SSL certificate verify ok.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Using HTTP2, server supports multi-use&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connection state changed (HTTP/2 confirmed)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Using Stream ID: 1 (easy handle 0x55944b9d7db0)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; GET /dev/hello HTTP/2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; Host: cfr9zyw3r1.execute-api.us-east-1.amazonaws.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; User-Agent: curl/7.63.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; Accept: */*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connection state changed (MAX_CONCURRENT_STREAMS == 128)!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; HTTP/2 200&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; content-type: application/json&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; content-length: 70&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; date: Sat, 16 Feb 2019 04:32:04 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amzn-requestid: cf4c6094-31a3-11e9-b61e-bb2138b2f390&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amz-apigw-id: VLPKmHj4oAMFbbw=&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-mycompany-func-reply: hello-handler&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amzn-trace-id: Root=1-5c679243-d4f945debb1a2b675c41675f;Sampled=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-cache: Miss from cloudfront&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; via: 1.1 655473215401ef909f449b92f216caa1.cloudfront.net (CloudFront)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amz-cf-id: LOHG0oG-WbGKpTnlGz-VDVqb9DxXQX-kgJJEUkchh1v_zLfUqNCpEQ==&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connection #0 to host cfr9zyw3r1.execute-api.us-east-1.amazonaws.com left intact&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&amp;#34;message&amp;#34;:&amp;#34;Go Serverless v1.0! Your function executed successfully!&amp;#34;}%&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As expected we can see the headers x-my-company-func-reply and the json object that it created for us.&lt;/p&gt;

&lt;h3 id=&#34;cleanup&#34;&gt;&lt;strong&gt;Cleanup&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;serverless remove
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: WARNING: Missing &amp;#34;tenant&amp;#34; and &amp;#34;app&amp;#34; properties in serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Getting all objects in S3 bucket...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Removing objects in S3 bucket...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Removing Stack...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Checking Stack removal progress...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ...............&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Stack removal finished...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This will as you expect remove everything that was created with the deploy command.&lt;/p&gt;

&lt;p&gt;In the next article we will explore how to do create and deploy a function like this one by hand.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sending emails with AWS Lambda and SES from a HTML form</title>
      <link>https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>golang</tag>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;serverless-series&#34;&gt;&lt;strong&gt;Serverless series&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Part I: &lt;a href=&#34;https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/&#34;&gt;Serving static websites with s3 and cloudfront&lt;/a&gt;, so refer to that one before starting this one if you want to know how did we get here.&lt;/p&gt;

&lt;p&gt;Part II: &lt;a href=&#34;https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/&#34;&gt;Sending emails with AWS Lambda and SES from a HTML form&lt;/a&gt;, &lt;strong&gt;You are here&lt;/strong&gt;.&lt;/p&gt;

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This article is part of the serverless series, in this article we will see how to create a serverless function in AWS Lambda to send an email coming from the HTML form in the site the source code can be &lt;a href=&#34;https://github.com/kainlite/aws-serverless-go-ses-example&#34;&gt;found here&lt;/a&gt;, that is the go version but if you prefer node you can use &lt;a href=&#34;https://github.com/kainlite/aws-serverless-nodejs-ses-example&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;serverless-framework&#34;&gt;&lt;strong&gt;Serverless framework&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;As usual I will be using the serverless framework to manage our functions, create the project&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir techsquad-functions &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd techsquad-functions &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; serverless create -t aws-go
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Generating boilerplate...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  _______                             __&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |   _   .-----.----.--.--.-----.----|  .-----.-----.-----.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |   |   |             The Serverless Application Framework&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |       |                           serverless.com, v1.36.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  -------&amp;#39;&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Successfully generated boilerplate for template: &amp;#34;aws-go&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: NOTE: Please update the &amp;#34;service&amp;#34; property in serverless.yml with your service name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;After creating the project we can update the serverless manifest as follow:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;service: sendMail

frameworkVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;=1.28.0 &amp;lt;2.0.0&amp;#34;&lt;/span&gt;

provider:
  name: aws
  runtime: go1.x
  region: us-east-1
  memorySize: &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;
  versionFunctions: false
  stage: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prod&amp;#39;&lt;/span&gt;

  iamRoleStatements:
    - Effect: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;
      Action:
        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ses:*&amp;#34;&lt;/span&gt;
        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lambda:*&amp;#34;&lt;/span&gt;
      Resource:
        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;

package:
 exclude:
   - ./**
 include:
   - ./send_mail/send_mail

functions:
  send_mail:
    handler: send_mail/send_mail
    events:
      - http:
          path: sendMail
          method: post&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The interesting parts here are the IAM permissions and the function send_mail, the rest is pretty much standard, we define a function and the event HTTP POST for the API Gateway, where our executable can be found and we also request permissions to send emails via SES.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploy the function&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make deploy
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# rm -rf ./send_mail/send_mail&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# env GOOS=linux go build -ldflags=&amp;#34;-s -w&amp;#34; -o send_mail/send_mail send_mail/main.go&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# sls deploy --verbose&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: WARNING: Missing &amp;#34;tenant&amp;#34; and &amp;#34;app&amp;#34; properties in serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Packaging service...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Excluding development dependencies...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading CloudFormation file to S3...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading artifacts...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading service .zip file to S3 (7.31 MB)...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Validating template...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Updating Stack...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Checking Stack update progress...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_IN_PROGRESS - AWS::CloudFormation::Stack - sendMail-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Function - SendUnderscoremailLambdaFunction&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_COMPLETE - AWS::Lambda::Function - SendUnderscoremailLambdaFunction&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246566486&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246566486&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - CREATE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246566486&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_COMPLETE_CLEANUP_IN_PROGRESS - AWS::CloudFormation::Stack - sendMail-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - DELETE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246013644&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - DELETE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246013644&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_COMPLETE - AWS::CloudFormation::Stack - sendMail-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Stack update finished...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Service Information&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# service: sendMail&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stage: prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# region: us-east-1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stack: sendMail-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# api keys:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# endpoints:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   POST - https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod/sendMail&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# functions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   send_mail: sendMail-prod-send_mail&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# layers:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Stack Outputs&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ServiceEndpoint: https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ServerlessDeploymentBucketName: sendmail-prod-serverlessdeploymentbucket-1vbmb6gwt8559&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Everything looks right, so what&amp;rsquo;s next? the source code.&lt;/p&gt;

&lt;h5 id=&#34;lambda&#34;&gt;&lt;strong&gt;Lambda&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This is basically the full source code for this function, as you will see it&amp;rsquo;s really simple:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/events&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws/awserr&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/service/ses&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;events&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;APIGatewayProxyResponse&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RequestData&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// This could be env vars
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; (
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Sender&lt;/span&gt;    = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web@serverless.techsquad.rocks&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Recipient&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kainlite@gmail.com&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;CharSet&lt;/span&gt;   = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;events&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;APIGatewayProxyRequest&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Request: %+v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processing request data for request %s.\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestContext&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestID&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Body size = %d.\n&amp;#34;&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;))

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RequestData&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RequestData: %+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;:      &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;IsBase64Encoded&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;:            &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;:           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-MyCompany-Func-Reply&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;send-mail-handler&amp;#34;&lt;/span&gt;,
		},
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// This could be an env var
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sess&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewSession&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Region&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;us-east-1&amp;#34;&lt;/span&gt;)},
	)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Create an SES session.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;svc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sess&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Assemble the email.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SendEmailInput&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Destination&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Destination&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;CcAddresses&lt;/span&gt;: []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{},
			&lt;span style=&#34;color:#a6e22e&#34;&gt;ToAddresses&lt;/span&gt;: []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Recipient&lt;/span&gt;),
			},
		},
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Html&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Content&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Charset&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;CharSet&lt;/span&gt;),
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;),
				},
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Content&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Charset&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;CharSet&lt;/span&gt;),
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;),
				},
			},
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Subject&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Content&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Charset&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;CharSet&lt;/span&gt;),
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;),
			},
		},
		&lt;span style=&#34;color:#75715e&#34;&gt;// We are using the same sender because it needs to be validated in SES.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;Source&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Sender&lt;/span&gt;),

		&lt;span style=&#34;color:#75715e&#34;&gt;// Uncomment to use a configuration set
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//ConfigurationSetName: aws.String(ConfigurationSet),
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Attempt to send the email.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;svc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SendEmail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Display error messages if they occur.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.(&lt;span style=&#34;color:#a6e22e&#34;&gt;awserr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Code&lt;/span&gt;() {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeMessageRejected&lt;/span&gt;:
				&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeMessageRejected&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeMailFromDomainNotVerifiedException&lt;/span&gt;:
				&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeMailFromDomainNotVerifiedException&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeConfigurationSetDoesNotExistException&lt;/span&gt;:
				&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeConfigurationSetDoesNotExistException&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
			&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
				&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// Print the error, cast err to awserr.Error to get the Code and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// Message from an error.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;there was an unexpected error&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Email Sent to address: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Recipient&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sent!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The code is pretty much straight forward it only expects 2 parameters and it will send an email and return sent! if everything went well. You can debug and compile your function before uploading by issuing the command &lt;code&gt;make&lt;/code&gt; (This is really useful), and if you use &lt;code&gt;make deploy&lt;/code&gt; you will save lots of time by only deploying working files.&lt;/p&gt;

&lt;h5 id=&#34;ses&#34;&gt;&lt;strong&gt;SES&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;For this to work you will need to verify/validate your domain in SES.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;SES-&amp;gt;Domains-&amp;gt;Verify a New Domain&lt;/code&gt;.
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-ses-validate-domain.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;After putting your domain in, you will see something like this:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-ses-validation-and-dkim.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;As I don&amp;rsquo;t have this domain in Route53 I don&amp;rsquo;t have a button to add the records to it (which makes everything simpler and faster), but it&amp;rsquo;s easy enough just create a few dns records and wait a few minutes until you get something like this:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-ses-validation-ok.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After that just test it&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;serverless invoke -f send_mail -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ &amp;#34;Email&amp;#34;: &amp;#34;kainlite@gmail.com&amp;#34;, &amp;#34;Message&amp;#34;: &amp;#34;test&amp;#34; }&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;statusCode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-MyCompany-Func-Reply&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;send-mail-handler&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
After hitting enter the message popped up right away in my inbox :).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Another option is to use &lt;a href=&#34;https://devhints.io/httpie&#34;&gt;httpie&lt;/a&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ &amp;#34;email&amp;#34;: &amp;#34;kainlite@gmail.com&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;test2&amp;#34; }&amp;#39;&lt;/span&gt; | http https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod/sendMail
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# HTTP/1.1 200 OK&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Access-Control-Allow-Origin: *&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Connection: keep-alive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Content-Length: 32&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Content-Type: application/json&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Date: Sun, 03 Feb 2019 02:24:25 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Via: 1.1 3421ea0c15d4fdc0bcb792131861cb1f.cloudfront.net (CloudFront)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# X-Amz-Cf-Id: kGK4R9kTpcWjZap8aeyPu0vdiCtpQ4gnhCAtCeeA6OJufzaTDL__0w==&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# X-Amzn-Trace-Id: Root=1-5c5650d9-7c3c8fcc5e303ca480739560;Sampled=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# X-Cache: Miss from cloudfront&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amz-apigw-id: UgGR7FlWIAMF75Q=&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amzn-RequestId: d2f45b14-275a-11e9-a8f3-47d675eed13e&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# sent!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR &lt;a href=&#34;https://devhints.io/curl&#34;&gt;curl&lt;/a&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X POST https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod/sendMail -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ &amp;#34;email&amp;#34;: &amp;#34;kainlite@gmail.com&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;test3&amp;#34; }&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# HTTP/2 200&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# content-type: application/json&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# content-length: 32&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# date: Sun, 03 Feb 2019 02:28:04 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amzn-requestid: 55cc72d0-275b-11e9-99bd-91c3fab78a2f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# access-control-allow-origin: *&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amz-apigw-id: UgG0OEigoAMF-Yg=&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amzn-trace-id: Root=1-5c5651b4-fc5427b4798e14dc61fe161e;Sampled=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-cache: Miss from cloudfront&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# via: 1.1 2167e4d6cf81822217c1ea31b3d3ba7e.cloudfront.net (CloudFront)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amz-cf-id: FttmBoeUaSwQ2AArTgVmI5br51zwVMfUrVpXPLGm1HacV4yS9IYMHA==&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# sent!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s all for now, see you in the next article.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serve your static website with S3 and CloudFront</title>
      <link>https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/</guid>
      <tags>
      
        <tag>elm</tag>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>aws</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;serverless-series&#34;&gt;&lt;strong&gt;Serverless series&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Part I: &lt;a href=&#34;https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/&#34;&gt;Serving static websites with s3 and cloudfront&lt;/a&gt;, &lt;strong&gt;You&amp;rsquo;re here&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Part II: &lt;a href=&#34;https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/&#34;&gt;Sending emails with AWS Lambda and SES from a HTML form&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This article will be part of a series, the idea is to get a fully serverless site up and running with login functionality, maybe a profile page, and some random utility, but as we are just starting with it we will host our first draft of the page with a contact form, for the distribution of the files we will see how to configure CloudFront and for storing the files we will be using S3, S3 is an object storage service that offers industry leading scalability, data availability, security and performance, and CloudFront is a fast content delivery network (CDN). The site that we will be using were written using &lt;a href=&#34;https://elm-lang.org/&#34;&gt;elm&lt;/a&gt; and can be &lt;a href=&#34;https://github.com/kainlite/aws-serverless-s3-elm-example&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;s3&#34;&gt;&lt;strong&gt;S3&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;First of all we need to create a bucket&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api create-bucket --bucket techsquad-serverless-site --region us-east-1
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Location&amp;#34;: &amp;#34;/techsquad-serverless-site&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We could serve directly from S3 but that can be expensive in a site with lots of traffic (You can do it by &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/s3/website.html&#34;&gt;enabling web hosting in the bucket&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For this setup to work we first need to create a cloud-front-origin-access-identity&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;aws cloudfront create-cloud-front-origin-access-identity --cloud-front-origin-access-identity-config CallerReference=techsquad-serverless-site-cloudfront-origin,Comment=techsquad-serverless-site-cloudfront-origin
{
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cloudfront.amazonaws.com/2018-11-05/origin-access-identity/cloudfront/E3IJG9M5PO9BYE&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ETag&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E2XHDQQ0DDY9IJ&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CloudFrontOriginAccessIdentity&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E3IJG9M5PO9BYE&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S3CanonicalUserId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c951e48af14afcf935c2455a6d503150c80f20df93b27af9ed0928eb48feb67d1b933aa1adb7e1bf88a7aacccccccccc&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CloudFrontOriginAccessIdentityConfig&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CallerReference&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront-origin&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Comment&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront-origin&amp;#34;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Our origin access identity was successfully created, we need to grab the S3CanonicalUserId for our S3 bucket policy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Limit access to your bucket with the following policy (save as bucket-policy.json)&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;{
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2012-10-17&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PolicyForCloudFrontPrivateContent&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Statement&amp;#34;&lt;/span&gt;:[
        {
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront-origin&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Principal&amp;#34;&lt;/span&gt;:{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CanonicalUser&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c951e48af14afcf935c2455a6d503150c80f20df93b27af9ed0928eb48feb67d1b933aa1adb7e1bf88a7aacccccccccc&amp;#34;&lt;/span&gt;},
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3:GetObject&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Resource&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arn:aws:s3:::techsquad-serverless-site/*&amp;#34;&lt;/span&gt;
             }
      ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This policy will only allow CloudFront to fetch the files from the S3 bucket, because we want to avoid users or anyone actually from hitting the bucket directly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And then just attach that policy to the bucket&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-policy --bucket techsquad-serverless-site --policy file://bucket-policy.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m using an old example I created and probably will continue building upon it, copy the files (the source files are in &lt;a href=&#34;https://github.com/kainlite/aws-serverless-s3-elm-example&#34;&gt;this github repo&lt;/a&gt;)&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3 sync . s3://techsquad-serverless-site/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
So far so good, We have our S3 bucket ready.&lt;/p&gt;

&lt;h5 id=&#34;cloudfront&#34;&gt;&lt;strong&gt;CloudFront&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;We will use this file to create our CF distribution (save it as distconfig.json or generate it with &lt;code&gt;aws cloudfront create-distribution --generate-cli-skeleton &amp;gt; /tmp/distconfig.json&lt;/code&gt; and then replace the values: Id, DomainName, TargetOriginId, and the cname in Aliases.Items):
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CallerReference&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-distribution&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Aliases&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Items&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serverless.techsquad.rocks&amp;#34;&lt;/span&gt;
         &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DefaultRootObject&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Origins&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Items&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DomainName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site.s3.amazonaws.com&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S3OriginConfig&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OriginAccessIdentity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;origin-access-identity/cloudfront/E3IJG9M5PO9BYE&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DefaultCacheBehavior&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TargetOriginId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ForwardedValues&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QueryString&amp;#34;&lt;/span&gt;: true,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cookies&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Forward&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TrustedSigners&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enabled&amp;#34;&lt;/span&gt;: false,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ViewerProtocolPolicy&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;allow-all&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MinTTL&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CacheBehaviors&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Comment&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enabled&amp;#34;&lt;/span&gt;: false,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IncludeCookies&amp;#34;&lt;/span&gt;: true,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bucket&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Prefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PriceClass&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PriceClass_All&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enabled&amp;#34;&lt;/span&gt;: true
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We will leave most values in their defaults, but if you want to know more or customize your deployment &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html&#34;&gt;check here&lt;/a&gt; or type &lt;code&gt;aws cloudfront create-distribution help&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s finally create the CloudFront distribution for our site&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront create-distribution --distribution-config file://distconfig.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Location&amp;#34;: &amp;#34;https://cloudfront.amazonaws.com/2018-11-05/distribution/E1M22XXNIJ5BLN&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;ETag&amp;#34;: &amp;#34;EW1AZUQ33NKQ7&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Distribution&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Id&amp;#34;: &amp;#34;E1M22XXNIJ5BLN&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;ARN&amp;#34;: &amp;#34;arn:aws:cloudfront::894527626897:distribution/E1M22XXNIJ5BLN&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Status&amp;#34;: &amp;#34;InProgress&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;LastModifiedTime&amp;#34;: &amp;#34;2019-02-02T19:35:45.729Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;InProgressInvalidationBatches&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DomainName&amp;#34;: &amp;#34;d3v3xtkl1l2ynj.cloudfront.net&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;ActiveTrustedSigners&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Enabled&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DistributionConfig&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;CallerReference&amp;#34;: &amp;#34;techsquad-serverless-site-distribution&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Aliases&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;DefaultRootObject&amp;#34;: &amp;#34;index.html&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Origins&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 1,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Items&amp;#34;: [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Id&amp;#34;: &amp;#34;techsquad-serverless-site-cloudfront&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;DomainName&amp;#34;: &amp;#34;techsquad-serverless-site.s3.amazonaws.com&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;OriginPath&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;CustomHeaders&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                             &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;S3OriginConfig&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                             &amp;#34;OriginAccessIdentity&amp;#34;: &amp;#34;origin-access-identity/cloudfront/E3IJG9M5PO9BYE&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 ]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;OriginGroups&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Items&amp;#34;: []&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;DefaultCacheBehavior&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;TargetOriginId&amp;#34;: &amp;#34;techsquad-serverless-site-cloudfront&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;ForwardedValues&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;QueryString&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Cookies&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Forward&amp;#34;: &amp;#34;none&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Headers&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;QueryStringCacheKeys&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;TrustedSigners&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Enabled&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;ViewerProtocolPolicy&amp;#34;: &amp;#34;allow-all&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;MinTTL&amp;#34;: 3600,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;AllowedMethods&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Quantity&amp;#34;: 2,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Items&amp;#34;: [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;HEAD&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;GET&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     ],&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;CachedMethods&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Quantity&amp;#34;: 2,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Items&amp;#34;: [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                             &amp;#34;HEAD&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                             &amp;#34;GET&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         ]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;SmoothStreaming&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;DefaultTTL&amp;#34;: 86400,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;MaxTTL&amp;#34;: 31536000,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Compress&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;LambdaFunctionAssociations&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;FieldLevelEncryptionId&amp;#34;: &amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;CacheBehaviors&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;CustomErrorResponses&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Comment&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Logging&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Enabled&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;IncludeCookies&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Bucket&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Prefix&amp;#34;: &amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;PriceClass&amp;#34;: &amp;#34;PriceClass_All&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Enabled&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;ViewerCertificate&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;CloudFrontDefaultCertificate&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;MinimumProtocolVersion&amp;#34;: &amp;#34;TLSv1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;CertificateSource&amp;#34;: &amp;#34;cloudfront&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Restrictions&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;GeoRestriction&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;RestrictionType&amp;#34;: &amp;#34;none&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;WebACLId&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;HttpVersion&amp;#34;: &amp;#34;http2&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;IsIPV6Enabled&amp;#34;: true&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Woah a lot of details in there, but what we might need later is the ETAG if we want to download and update our distribution, so have that handy, also we can see our CloudFront URL in there which is: d3v3xtkl1l2ynj.cloudfront.net in this case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It might take a few minutes to initialize the distribution, you can check the progress with&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront list-distributions | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.DistributionList.Items[0].Status&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;InProgress&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Once it&amp;rsquo;s ready the status will be: &amp;ldquo;Deployed&amp;rdquo;, and now if we go to the CloudFront url you should see the site :). The S3 bucket will only let CloudFront access to the files so the only way to serve the site is through CloudFront.&lt;/p&gt;

&lt;h5 id=&#34;dns&#34;&gt;&lt;strong&gt;DNS&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;The only thing missing is the record in the DNS (I don&amp;rsquo;t have this domain name in Route53, shame on me but a CNAME will do for now), so let&amp;rsquo;s add it and verify it using dig.&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dig serverless.techsquad.rocks
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# dig CNAME serverless.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.5 &amp;lt;&amp;lt;&amp;gt;&amp;gt; CNAME serverless.techsquad.rocks&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; global options: +cmd&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; Got answer:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 52651&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; OPT PSEUDOSECTION:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ; EDNS: version: 0, flags:; udp: 1452&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; QUESTION SECTION:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;serverless.techsquad.rocks.    IN      CNAME&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; ANSWER SECTION:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# serverless.techsquad.rocks. 292 IN      CNAME   d3v3xtkl1l2ynj.cloudfront.net.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; Query time: 20 msec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; SERVER: 1.1.1.1#53(1.1.1.1)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; WHEN: Sat Feb 02 17:47:11 -03 2019&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; MSG SIZE  rcvd: 98&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we can see the record is already there so we can go to &lt;a href=&#34;http://serverless.techsquad.rocks&#34;&gt;http://serverless.techsquad.rocks&lt;/a&gt; (note that this only works because we set that alias in the distribution), We could add SSL by creating a certificate using Amazon Certificate Manager, but we will leave that as an exercise or a future small article.&lt;/p&gt;

&lt;h5 id=&#34;useful-commands&#34;&gt;&lt;strong&gt;Useful commands&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In case you need to get some information some useful commands:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This command will give us the Id of our distribution&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront list-distributions --output table --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DistributionList.Items[*].Id&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -------------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |ListDistributions|&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# +-----------------+&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |  EFJVJEPWAPGU2  |&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# +-----------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This one the ETag (needed to perform updates for example)&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront get-distribution-config --id EFJVJEPWAPGU2 | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. | .ETag&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;E2TPQRAUPJL2P3&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And this one will save the current config in /tmp so we can update it.&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront get-distribution-config --id EFJVJEPWAPGU2 | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. | .DistributionConfig&amp;#39;&lt;/span&gt; &amp;gt; /tmp/curent-distribution-E2TPQRAUPJL2P&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;upcoming-articles&#34;&gt;&lt;strong&gt;Upcoming articles&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This article is the first one in this series of serverless articles, the idea is to build a fully functional website using only serverless technologies, the next post will cover the AWS Lambda function used to send the contact form, also all code from the site can be &lt;a href=&#34;https://github.com/kainlite/aws-serverless-s3-elm-example&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainjkjkjklite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serve your static website in Github</title>
      <link>https://techsquad.rocks/blog/serving_static_sites_with_github/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/serving_static_sites_with_github/</guid>
      <tags>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>git</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;GitHub offers static web hosting for you and your apps this is called &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;, you can use markdown (&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;jekyll&lt;/a&gt; or just plain html), for example for this blog I generate all the files with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo.io&lt;/a&gt; and that gets deployed to GitHub Pages, the configuration is fairly simple as we will see in the following example (this blog setup).&lt;/p&gt;

&lt;p&gt;GitHub pages offers some great examples that are really easy to follow, but if you want to know how I configured everything for this blog continue reading :), if you like it or have any comment use the disqus box at the bottom of the page.&lt;/p&gt;

&lt;h3 id=&#34;pages&#34;&gt;&lt;strong&gt;Pages&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The first step in order to use GH Pages is to create a repo (assuming that you already have an account) with the following name: username.github.io in my case is kainlite.github.io, as we can see in the following screenshot:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/github-pages-repository.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

This repo already has the blog files, but as with any github repo you will see the default commands to push something to it, the next step is to configure the pages itself, for that you need to go to &lt;a href=&#34;https://github.com/username/username.github.io/settings&#34;&gt;Settings&lt;/a&gt; (be sure to replace username in the link), then scroll down to the GitHub Pages section. It will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/github-pages-configuration.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

As you can see the configuration is fairly simple, you choose the branch that will be used to serve the site, you can even pick a theme if you are going to go with Jekyll, and you can also have a custom domain and https, in this case as I push the static html files to the master branch I selected that branch, you can have any branch you like but it&amp;rsquo;s common to use gh-pages.&lt;/p&gt;

&lt;h5 id=&#34;dns&#34;&gt;&lt;strong&gt;DNS&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;For the custom domain you need to create the following entries in your DNS &lt;code&gt;dig techsquad.rocks&lt;/code&gt;, you can find these ips in &lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/&#34;&gt;this page&lt;/a&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;techsquad.rocks.        &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;     IN      A       &lt;span style=&#34;color:#ae81ff&#34;&gt;185&lt;/span&gt;.199.110.153
techsquad.rocks.        &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;     IN      A       &lt;span style=&#34;color:#ae81ff&#34;&gt;185&lt;/span&gt;.199.111.153
techsquad.rocks.        &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;     IN      A       &lt;span style=&#34;color:#ae81ff&#34;&gt;185&lt;/span&gt;.199.108.153
techsquad.rocks.        &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;     IN      A       &lt;span style=&#34;color:#ae81ff&#34;&gt;185&lt;/span&gt;.199.109.153&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
After a few minutes it should start working, and whatever you have in that repo will be served as static files, there are some limits but they are really high so you can probably start your site or blog or whatever without having to worry to much about it. If you want to know what those limits are go &lt;a href=&#34;https://help.github.com/articles/what-is-github-pages/&#34;&gt;here&lt;/a&gt;, as of now the repository size limit is 1Gb, and there is a soft bandwidth limit of 100GB per month, also 10 builds per hour.&lt;/p&gt;

&lt;h5 id=&#34;go-hugo&#34;&gt;&lt;strong&gt;Go Hugo&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Now to the interesting part, &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; let&amp;rsquo;s you configure and customize several aspects of the generated files, first be sure to install hugo with your package manager or with go, the steps to create a blog are fairly simple:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new site testing-hugo
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Congratulations! Your new Hugo site is created in /home/kainlite/Webs/testing-hugo.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Just a few more steps and you&amp;#39;re ready to go:&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# 1. Download a theme into the same-named folder.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    Choose a theme from https://themes.gohugo.io/, or&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    create your own with the &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34; command.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 2. Perhaps you want to add some content. You can add single files&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    with &amp;#34;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;#34;.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 3. Start the built-in live server via &amp;#34;hugo server&amp;#34;.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Visit https://gohugo.io/ for quickstart guide and full documentation.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As I have shown in the tmux article, I like to have 2 panes one small pane where I can see the files being rebuilt at each save and another pane with Vim to edit the source code. You can start the hugo webserver for development with &lt;code&gt;hugo serve -D&lt;/code&gt; and it will listen by default in the port 1313. It is very common to use themes, so you can go to the &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;themes page&lt;/a&gt; and start your project with one of those, there are several ways to install the themes, and you can see the installation steps at the theme page, for example for the blog I started with &lt;a href=&#34;https://themes.gohugo.io/hugo-sustain/&#34;&gt;Sustain&lt;/a&gt; but then modified it to match my needs.&lt;/p&gt;

&lt;h5 id=&#34;publishing-with-git-push&#34;&gt;&lt;strong&gt;Publishing with git push&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The most interesting part of this setup is the simple automation that I use to publish with &lt;code&gt;git push&lt;/code&gt;, I created the following hook in the blog repo &lt;code&gt;.git/hooks/pre-push&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
COMMIT_MESSAGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;git log -n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --pretty&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;format:%s &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;local_ref&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;

hugo -d ~/Webs/kainlite.github.io
ANYTHING_CHANGED&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cd ~/Webs/kainlite.github.io &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git diff --exit-code&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $? -gt &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    cd ~/Webs/kainlite.github.io &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;COMMIT_MESSAGE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push origin master
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
What this simple hook does is check if there is any change and push the changes with the same commit message than in the original repo, we first grab the commit message from the original repo, and then check if something changed with git, if it did then we just add all files and push that to the repo, that will trigger a build in github pages and once completed our page will be updated and visible (it can take a few seconds sometimes, but in general it&amp;rsquo;s pretty fast).&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s how this blog was configured, in the upcoming articles I will show you how to host your static website with S3 and serve it with cloudflare, after that we will use a go lambda function to send the form email, let me know any comments or anything that you might want me to write about.&lt;/p&gt;

&lt;h5 id=&#34;pages-environment&#34;&gt;&lt;strong&gt;Pages Environment&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;If you paid attention at the first screenshot you probably noticed that it says &lt;em&gt;1 Environment&lt;/em&gt; that means that GH Pages have been already configured and if we click it we can see something like this:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/github-pages-environment.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

&lt;br /&gt;
For static html sites it would be unlikely to see a failure, but it can happen if you use Jekyll for example and there is any syntax error.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Give super powers to your terminal with tmux</title>
      <link>https://techsquad.rocks/blog/give_super_powers_to_your_terminal_with_tmux/</link>
      <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/give_super_powers_to_your_terminal_with_tmux/</guid>
      <tags>
      
        <tag>urxvt</tag>
      
        <tag>vim</tag>
      
        <tag>linux</tag>
      
        <tag>tmux</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In this article I want to introduce you to &lt;code&gt;tmux&lt;/code&gt;, you might have used &lt;code&gt;screen&lt;/code&gt; in the past or heard about it, what tmux and screen are is terminal multiplexers, what does that mean? That you can have many windows/tabs and splits/panes in just one terminal window, this can really make things easier when using it as a development environment for example, you can detach from the terminal and leave things running indefinitely, or share your terminal with a colleague over ssh, for the examples I will be explaining bits of my configuration and how do I use it. The full configuration can be found &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.tmux.conf&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;m using ZSH as shell and Vim as text editor.&lt;/p&gt;

&lt;h3 id=&#34;tmux&#34;&gt;&lt;strong&gt;Tmux&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I also use tmux to maintain sessions, for example I can only have one terminal window open because with the help from ZSH it will attach automatically to a session thanks to &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; and the plugin tmux, I use tabs aka windows a lot, sometimes I also use splits aka as panes.&lt;/p&gt;

&lt;p&gt;Now you have some basic understanding of what tmux does and how does it name its things, let&amp;rsquo;s examine some bits of the config and how to use it.&lt;/p&gt;

&lt;h5 id=&#34;attach-detach-from-a-session&#34;&gt;&lt;strong&gt;Attach/detach from a session&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In order to create a session and attach to it you need to execute &lt;code&gt;tmux new -s my-session&lt;/code&gt;, then to detach from it: &lt;code&gt;CTRL-a d&lt;/code&gt; and to re-attach &lt;code&gt;tmux a -t my-session&lt;/code&gt;, then kill it &lt;code&gt;tmux kill-session -t my-session&lt;/code&gt; or logout from all windows.&lt;/p&gt;

&lt;h5 id=&#34;prefix&#34;&gt;&lt;strong&gt;Prefix&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I don&amp;rsquo;t use the default prefix that is: &lt;code&gt;CTRL-b&lt;/code&gt;, I use &lt;code&gt;CTRL-a&lt;/code&gt; like in screen.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use ctrl-a instead of ctrl-b&lt;/span&gt;
set -g prefix C-a
unbind C-b
bind C-a send-prefix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;example&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;You can print the numbers of the panes with &lt;code&gt;CTRL-a q&lt;/code&gt;, and you can navigate windows and panes as a list with &lt;code&gt;CTRL-a w&lt;/code&gt;.
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/tmux-windows-panes.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I usually like to have 3 panes, something like this:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/tmux-sample-usage.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

I can edit the code or whatever in the pane 0, run commands if I need to in the pane 1, and have the webserver or code compiler, etc in the pane 2. This is very handy because I can write and test things at the same time without leaving the keyboard, or look at 2 different projects/files/etc side by side.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;tmux ls&lt;/code&gt; we can list active sessions, also tmux has a command mode (&lt;code&gt;CTRL-a :&lt;/code&gt;) like Vim, where you can issue some commands or change settings on the fly, for example instead of executing &lt;code&gt;tmux ls&lt;/code&gt;, you can get the same information doing &lt;code&gt;CTRL-a :&lt;/code&gt; and then &lt;code&gt;ls&amp;lt;CR&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;defaults&#34;&gt;&lt;strong&gt;Defaults&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Some helpful settings, for example start windows at 1 instead of 0, renumber on exit also makes it easier with windows.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Start window numbers at 1 to match keyboard order with tmux window order&lt;/span&gt;
set -g base-index &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Scrollback buffer n lines&lt;/span&gt;
set -g history-limit &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Renumber tabs on exit&lt;/span&gt;
set-option -g renumber-windows on

&lt;span style=&#34;color:#75715e&#34;&gt;# Use vi keybindings in copy and choice modes&lt;/span&gt;
set-window-option -g mode-keys vi

&lt;span style=&#34;color:#75715e&#34;&gt;# Enable mouse, enables you to scroll in the tmux history buffer.&lt;/span&gt;
set -g mouse on&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;movement&#34;&gt;&lt;strong&gt;Movement&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I move between windows with &lt;code&gt;CTRL+h&lt;/code&gt; and &lt;code&gt;CTRL+l&lt;/code&gt;, and between panes with &lt;code&gt;CTRL-a [hjkl]&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Move between windows&lt;/span&gt;
bind-key -n C-h prev
bind-key -n C-l next

&lt;span style=&#34;color:#75715e&#34;&gt;# Move between panes&lt;/span&gt;
unbind h
bind h &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -L
unbind j
bind j &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -D
unbind k
bind k &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -U
unbind l
bind l &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -R&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;configuration&#34;&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;A handy trick if you are testing the configuration is to reload it from the file with &lt;code&gt;CTRL-a r&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Force a reload of the config file&lt;/span&gt;
unbind r
bind r source-file ~/.tmux.conf &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt; display &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reloaded!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;panes&#34;&gt;&lt;strong&gt;Panes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Everything is nice and shiny, but how do I open a pane or a new window?
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Horizontal and vertical splits&lt;/span&gt;
unbind |
bind | split-window -h
unbind -
bind - split-window&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Easy, &lt;code&gt;CTRL-a |&lt;/code&gt; will give you a vertical pane, and &lt;code&gt;CTRL-a -&lt;/code&gt; will give you an horizontal pane.
You an also re-order the panes with &lt;code&gt;CTRL-a SPACE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also re-order windows with &lt;code&gt;SHIFT-Left Arrow&lt;/code&gt; and &lt;code&gt;SHIFT-Right Arrow&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Swap windows&lt;/span&gt;
bind-key -n S-Left swap-window -t -1
bind-key -n S-Right swap-window -t +1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;status-bar&#34;&gt;&lt;strong&gt;Status bar&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The status bar and the colors, it&amp;rsquo;s fairly simple but I like it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Status bar has a dim gray background&lt;/span&gt;
set-option -g status-bg colour234
set-option -g status-fg colour0
&lt;span style=&#34;color:#75715e&#34;&gt;# Left shows the session name, in blue&lt;/span&gt;
set-option -g status-left-bg default
set-option -g status-left-fg colour74
&lt;span style=&#34;color:#75715e&#34;&gt;# Right is some CPU stats, so terminal green&lt;/span&gt;
set-option -g status-right-bg default
set-option -g status-right-fg colour71
&lt;span style=&#34;color:#75715e&#34;&gt;# Windows are medium gray; current window is white&lt;/span&gt;
set-window-option -g window-status-fg colour244
set-window-option -g window-status-current-fg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#ffffff&amp;#39;&lt;/span&gt;
set-window-option -g window-status-current-bg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Beeped windows get a blinding orange background&lt;/span&gt;
set-window-option -g window-status-bell-fg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;
set-window-option -g window-status-bell-bg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#d78700&amp;#39;&lt;/span&gt;
set-window-option -g window-status-bell-attr none
&lt;span style=&#34;color:#75715e&#34;&gt;# Trim window titles to a reasonable length&lt;/span&gt;
set-window-option -g window-status-format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#[fg=yellow] #F#I#[default] #W &amp;#39;&lt;/span&gt;
set-window-option -g window-status-current-format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#[bg=yellow] #I#[bg=yellow] #W &amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;copy-paste&#34;&gt;&lt;strong&gt;Copy/paste&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/tmux-vi-mode.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

Tmux also supports the vi-copy mode, you can enter this mode with &lt;code&gt;CTRL-a ESC&lt;/code&gt;, then pressing &lt;code&gt;v&lt;/code&gt; for normal selection or &lt;code&gt;V&lt;/code&gt; for line selection you can mark and copy with &lt;code&gt;Y&lt;/code&gt; (by default is &lt;code&gt;ENTER&lt;/code&gt; aka &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;And as you can imagine you can paste with &lt;code&gt;CTRL-a p&lt;/code&gt;, this is really handy when copying from one pane to another or from one window to another, in Vim I recommend you &lt;code&gt;:set paste!&lt;/code&gt; before pasting into it, so it doesn&amp;rsquo;t try to format, etc.&lt;/p&gt;

&lt;p&gt;It also copies to the clipboard buffer, using xsel.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make copy mode more vim like&lt;/span&gt;
bind Escape copy-mode
unbind p
bind p paste-buffer
bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down
unbind-key -T copy-mode-vi Space     ;   bind-key -T copy-mode-vi v send-keys -X begin-selection

unbind-key -T copy-mode-vi Enter     ;   bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xsel -i --clipboard&amp;#34;&lt;/span&gt;
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xsel -i --clipboard&amp;#34;&lt;/span&gt;

unbind-key -T copy-mode-vi C-v       ;   bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
unbind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;         ;   bind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; send-keys -X begin-selection
unbind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;         ;   bind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; send-keys -X copy-selection&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about tmux a good place to start is the &lt;a href=&#34;https://wiki.archlinux.org/index.php/tmux&#34;&gt;Arch Linux wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;notes&#34;&gt;&lt;strong&gt;notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Sometimes you can have issues with the keys &lt;code&gt;HOME&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt;, this can help with that.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Home / End patch&lt;/span&gt;
bind -n End send-key C-e
bind -n Home send-key C-a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create a serverless twitter bot</title>
      <link>https://techsquad.rocks/blog/creating_a_serverless_twitter_bot/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/creating_a_serverless_twitter_bot/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>aws</tag>
      
        <tag>serverless</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This article explains how to create a serverless tweet-bot, basically pulls articles from this blog and post them to twitter in a nice way. It uses cron as the trigger so it should post a tweet every 12 hours, or you can invoke it manually.&lt;/p&gt;

&lt;h3 id=&#34;twitter&#34;&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;So before you can start with the Twitter API you need to get a developer account in &lt;a href=&#34;https://developer.twitter.com/en/apply/user&#34;&gt;this url&lt;/a&gt;, after submitted and created, you then need to create an App and generate the keys and tokens to be able to use it, it might take a while, I recommend you read everything that Twitter wants you to read while creating both the dev account and the app, so you can understand the scope and the good practices of using their services.&lt;/p&gt;

&lt;h3 id=&#34;the-code&#34;&gt;&lt;strong&gt;The code&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I added several comments over the code so it&amp;rsquo;s easy to understand what everything is supposed to do, also it can be found &lt;a href=&#34;https://github.com/kainlite/tbo&#34;&gt;here&lt;/a&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/dghubble/go-twitter/twitter&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/dghubble/oauth1&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/joho/godotenv&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/sirupsen/logrus&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#75715e&#34;&gt;// Version
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Environment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Page JSON object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Page&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;version&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Title&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;title&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;BaseURL&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;home_page_url&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;FeedURL&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;feed_url&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Articles&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;items&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Article JSON object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ID&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;id&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;url&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Title&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;title&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Content&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;content_html&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Published&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;date_published&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Twitter Access
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Token&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;twitter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;tweetFormat&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;screenName&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// This functions grabs all the necessary bits to connect to the Twitter API.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Setup&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setting up twitter client&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessKey&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessSecret&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerKey&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerSecret&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Get the access keys from ENV
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessKey&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_ACCESS_KEY&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessSecret&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_ACCESS_SECRET&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerKey&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_CONSUMER_KEY&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerSecret&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_CONSUMER_SECRET&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterScreenName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_SCREEN_NAME&amp;#34;&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterScreenName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter screen name cannot be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter consumer key can not be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerSecret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter consumer secret can not be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter access key can not be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessSecret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter access secret can not be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setting up oAuth for twitter&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// Setup the new oauth client
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewConfig&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerKey&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerSecret&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewToken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessKey&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessSecret&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NoContext&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Twitter client
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;twitter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewClient&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Set the screen name for later use
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;screenName&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterScreenName&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// This is the format of the tweet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;tweetFormat&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s: %s - TBO&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter client setup complete&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Format tweets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;tweetFormat&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Title&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Send the tweet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sending tweet&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Infof&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Non production mode, would&amp;#39;ve tweeted: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;))
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Infof&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sending tweet: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;))
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Statuses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error sending tweet to twitter: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		}
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Get a random article from the feed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This functions checks that the same tweet is not present
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in the last 30 tweets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;PickArticle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checking to see if the tweet appeared in the last 30 tweets&amp;#34;&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;tweets&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Timelines&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UserTimeline&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;twitter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UserTimelineParams&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ScreenName&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;screenName&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Count&lt;/span&gt;:      &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;TweetMode&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;extended&amp;#34;&lt;/span&gt;,
	})

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error getting last 30 tweets from user: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tweet&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tweets&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Contains&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tweet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;)) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Twitter API constant
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tw&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// This function is rather large, but basically grabs the a big json from
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the jsonfeed url and tests several tweets until it finds one that it&amp;#39;s valid
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// a tweet could be invalid if for example it was already tweeted in the last 30 tweets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetArticle&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://techsquad.rocks/index.json&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Setup a new HTTP Client with 3 seconds timeout
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Create a new HTTP Request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRequest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodGet&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// An error has occurred that we can&amp;#39;t recover from, bail.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error occurred creating new request: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Set the user agent to tbo &amp;lt;version&amp;gt; - twitter.com/kainlite
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User-Agent&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TBO %s - twitter.com/kainlite&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;))

	&lt;span style=&#34;color:#75715e&#34;&gt;// Tell the remote server to send us JSON
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accept&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// We&amp;#39;re only going to try maxTries times, otherwise we&amp;#39;ll fatal out.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Execute the request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attempting request to %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;getErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Do&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// We got an error, lets bail out, we can&amp;#39;t do anything more
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error occurred retrieving article from API: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;getErr&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// BGet the body from the result
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;readErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ioutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadAll&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// This shouldn&amp;#39;t happen, but if it does, error out.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error occurred reading from result body: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;readErr&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Parse json into the struct Page
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Page&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// Invalid JSON was received, bail out
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error occurred decoding article: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;invalidArticle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;maxTries&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Attempt to get a valid article for the next tweet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invalidArticle&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Seed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;UnixNano&lt;/span&gt;())
		&lt;span style=&#34;color:#a6e22e&#34;&gt;randomInt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intn&lt;/span&gt;(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Articles&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Articles&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;randomInt&lt;/span&gt;]

		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;randomInt&lt;/span&gt;)
		&lt;span style=&#34;color:#75715e&#34;&gt;// check to make sure the tweet hasn&amp;#39;t been sent before
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PickArticle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// If we get here we&amp;#39;ve found a tweet, exit the loop
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;invalidArticle&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxTries&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exiting after attempts to retrieve article failed.&amp;#34;&lt;/span&gt;)

		}
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Return the valid article response
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// HandleRequest - Handle the incoming Lambda request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HandleRequest&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Started handling request&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;tw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Setup&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetArticle&lt;/span&gt;()

	&lt;span style=&#34;color:#75715e&#34;&gt;// Send tweet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;tw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Set the local environment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setRunningEnvironment&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Get the environment variable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;APP_ENV&amp;#34;&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;development&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;development&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;development&amp;#34;&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shutdown&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Info&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Shutdown request registered&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Set the environment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;setRunningEnvironment&lt;/span&gt;()

	&lt;span style=&#34;color:#75715e&#34;&gt;// Set logging configuration
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetFormatter&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TextFormatter&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;DisableColors&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;FullTimestamp&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
	})

	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetReportCaller&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;development&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetLevel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DebugLevel&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetLevel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrorLevel&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetLevel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;InfoLevel&lt;/span&gt;)
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Start the bot
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting main&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TBO %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleRequest&lt;/span&gt;)
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// this environment variables are used locally while debugging, it can be quite handy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;godotenv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error loading .env file&amp;#34;&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleRequest&lt;/span&gt;()
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The code is fairly straigth forward, it checks for the environment to have a locally runable/debuggable app if it&amp;rsquo;s development or if it&amp;rsquo;s running as an AWS Function in production.&lt;/p&gt;

&lt;h3 id=&#34;while-debugging-locally-it-can-be-ran-like-this&#34;&gt;&lt;strong&gt;While debugging locally it can be ran like this&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;You can save use an .env file to test debug how your tweets are going to look.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go run .
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Starting main&amp;#34; func=main.main file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:279&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=info msg=&amp;#34;TBO development&amp;#34; func=main.main file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:280&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Started handling request&amp;#34; func=main.HandleRequest file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:225&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Setting up twitter client&amp;#34; func=&amp;#34;main.(*Twitter).Setup&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:55&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Setting up oAuth for twitter&amp;#34; func=&amp;#34;main.(*Twitter).Setup&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:88&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Twitter client setup complete&amp;#34; func=&amp;#34;main.(*Twitter).Setup&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:102&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Attempting request to &amp;amp;{GET https://techsquad.rocks/index.json HTTP/1.1 %!s(int=1) %!s(int=1) map[User-Agent:[TBO development - twitter.com/kainlite] Accept:[application/json]] &amp;lt;nil&amp;gt; %!s(func() (io.ReadCloser, error)=&amp;lt;nil&amp;gt;) %!s(int64=0) [] %!s(bool=false) techsquad.rocks map[] map[] %!s(*multipart.Form=&amp;lt;nil&amp;gt;) map[]   %!s(*tls.ConnectionState=&amp;lt;nil&amp;gt;) %!s(&amp;lt;-chan struct {}=&amp;lt;nil&amp;gt;) %!s(*http.Response=&amp;lt;nil&amp;gt;) &amp;lt;nil&amp;gt;}&amp;#34; func=main.GetArticle file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:173&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 4time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Checking to see if the tweet appeared in the last 30 tweets&amp;#34; func=&amp;#34;main.(*Twitter).PickArticle&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:125&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:16-03:00&amp;#34; level=debug msg=&amp;#34;Sending tweet&amp;#34; func=&amp;#34;main.(*Twitter).Send&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:111&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:16-03:00&amp;#34; level=info msg=&amp;#34;Non production mode, would&amp;#39;ve tweeted: Getting started with skaffold: https://techsquad.rocks/blog/getting_started_with_skaffold/ - TBO&amp;#34; func=&amp;#34;main.(*Twitter).Send&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:113&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The output is very verbose but it will show you everything that the function will do.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-project&#34;&gt;&lt;strong&gt;Creating the project&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;But how did you get the project skeleton?
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir tbo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd tbo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; serverless create -t aws-go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
By default it creates two go functions: hello and world, if you look at the files serverless.yaml and the go code, it will be easy to understand how everything is tied together in the default example.&lt;/p&gt;

&lt;h3 id=&#34;serverless-framework&#34;&gt;&lt;strong&gt;Serverless framework&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This function is managed by the &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless framework&lt;/a&gt;, as you can see it&amp;rsquo;s an easy way to manage your functions, what this small block of YAML will do is compile, upload, and schedule our function (because we use an event schedule)
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Welcome to Serverless!&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# This file is the main config file for your service.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# It&amp;#39;s very minimal at this point and uses default values.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# You can always add more config options for more control.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# We&amp;#39;ve included some commented out config examples here.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Just uncomment any of them to get that config option.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# For full config options, check the docs:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    docs.serverless.com&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Happy Coding!&lt;/span&gt;

service: handler

&lt;span style=&#34;color:#75715e&#34;&gt;# You can pin your service to only deploy with a specific Serverless version&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Check out our docs for more details&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# frameworkVersion: &amp;#34;=X.X.X&amp;#34;&lt;/span&gt;
frameworkVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;=1.28.0 &amp;lt;2.0.0&amp;#34;&lt;/span&gt;

provider:
  name: aws
  runtime: go1.x
  region: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;env:AWS_DEFAULT_REGION, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
  stage: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;env:TBO_BUILD_STAGE, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prod&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
  memorySize: &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;
  versionFunctions: false

package:
 exclude:
   - ./**
 include:
   - ./tbo/tbo

functions:
  tweet:
    handler: tbo/tbo
    events:
      - schedule: cron&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; */12 * * ? *&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    environment:
      APP_ENV: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;
      TWITTER_SCREEN_NAME: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twitter_username&amp;#34;&lt;/span&gt;
      TWITTER_CONSUMER_KEY: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example_key&amp;#34;&lt;/span&gt;
      TWITTER_CONSUMER_SECRET: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example_secret&amp;#34;&lt;/span&gt;
      TWITTER_ACCESS_KEY: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example_key&amp;#34;&lt;/span&gt;
      TWITTER_ACCESS_SECRET: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example_secret&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We provide the environment variables there that the app needs to run, under the hood what serverless will do is create an s3 bucket for this function with a cloudformation stack and a zip file with your function (for each version or deployment), then it will apply that that stack and validate that everything went ok.&lt;/p&gt;

&lt;h3 id=&#34;deploy-the-function&#34;&gt;&lt;strong&gt;Deploy the function&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Once the code is ready and you are ready to test it in production aka send a real tweet, just deploy it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;serverless deploy
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: WARNING: Missing &amp;#34;tenant&amp;#34; and &amp;#34;app&amp;#34; properties in serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Packaging service...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Excluding development dependencies...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading CloudFormation file to S3...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading artifacts...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading service .zip file to S3 (9.86 MB)...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Validating template...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Updating Stack...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Checking Stack update progress...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ..................&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Stack update finished...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Service Information&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# service: handler&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stage: prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# region: us-east-1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stack: handler-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# api keys:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# endpoints:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# functions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   tweet: handler-prod-tweet&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# layers:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we described before you can see everything that the serverless framework did for us, nothing really hard to remember and everything automated.&lt;/p&gt;

&lt;h3 id=&#34;s3&#34;&gt;&lt;strong&gt;S3&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Example s3 bucket from the previous deployment.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3 ls
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 2019-01-21 22:42:05 handler-prod-serverlessdeploymentbucket-1s5fs5igk2pwc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we can see after the deployment we see a new bucket with our function and if we take a look at the files we will find several (depending on how many deployments you do) stacks/manifests and the zip file with our function for each version/deployment.&lt;/p&gt;

&lt;h3 id=&#34;invoke-the-function&#34;&gt;&lt;strong&gt;Invoke the function&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Ok, but I don&amp;rsquo;t want to wait 12 hours to see if everything is okay, then just invoke the function.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;serverless invoke -f tweet
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Wait, where did tweet came from?, if you look at the serverless manifest you will see that our function is called tweet. If everything went well you will be able to see that tweet in your profile, something like this:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/twitter-tbo.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Why TBO, what&amp;rsquo;s tbo? bot misspelled.&lt;/li&gt;
&lt;li&gt;The Serverless framework is really cool and works in a variety of environments, I certainly recommend taking a look and at least trying it, I use it for a few small projects and it eases my life a lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From zero to hero with kops and AWS</title>
      <link>https://techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</guid>
      <tags>
      
        <tag>AWS</tag>
      
        <tag>kops</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In this article we will create a cluster from scratch with &lt;a href=&#34;https://github.com/kubernetes/kops&#34;&gt;kops&lt;/a&gt; (K8s installation, upgrades and management) in &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;, We will configure &lt;a href=&#34;https://github.com/kubernetes-sigs/aws-alb-ingress-controller&#34;&gt;aws-alb-ingress-controller&lt;/a&gt; (External traffic into our services/pods) and &lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns&#34;&gt;external dns&lt;/a&gt; (Update the records based in the ingress rules) and also learn a bit about awscli in the process.&lt;/p&gt;

&lt;p&gt;Basically we will have a fully functional cluster that will be able to handle public traffic in minutes, first we will install the cluster with kops, then we will enable the ingress controller and lastly external-dns, then we will deploy a basic app to test that everything works fine, SSL/TLS is out of the scope but it&amp;rsquo;s fairly easy to implement if you are using ACM.&lt;/p&gt;

&lt;p&gt;Just in case you don&amp;rsquo;t know this setup is not going to be free, cheap for sure because we will use small instances, etc, but not completely free, so before you dive in, be sure that you can spend a few bucks testing it out.&lt;/p&gt;

&lt;h3 id=&#34;kops&#34;&gt;&lt;strong&gt;Kops&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This is an awesome tool to setup and maintain your clusters, currently only compatible with AWS and GCE, other platforms are planned and some are also supported in alpha, we will be using AWS in this example, it requires kubectl so make sure you have it installed:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -LO https://github.com/kubernetes/kops/releases/download/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Export the credentials that we will be using to create the kops user and policies&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export AWS_ACCESS_KEY_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;XXXX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; export AWS_SECRET_ACCESS_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;XXXXX&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can do it this way or just use &lt;code&gt;aws configure&lt;/code&gt; and set a profile.&lt;/p&gt;

&lt;p&gt;The next thing that we need are IAM credentials for kops to work, you will need awscli configured and working with your AWS admin-like account most likely before proceeding:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create iam group&lt;/span&gt;
aws iam create-group --group-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Group&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupId&amp;#34;: &amp;#34;AGPAIABI3O4WYM46AIX44&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:group/kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:04:23Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops

&lt;span style=&#34;color:#75715e&#34;&gt;# Attach policies&lt;/span&gt;
aws iam create-user --user-name kops
aws iam add-user-to-group --user-name kops --group-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Group&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupId&amp;#34;: &amp;#34;AGPAIABI3O4WYM46AIX44&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:group/kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:04:23Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Create access key - save the output of this command.&lt;/span&gt;
aws iam create-access-key --user-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;AccessKey&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UserName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AccessKeyId&amp;#34;: &amp;#34;AKIAJE*********&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Status&amp;#34;: &amp;#34;Active&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;SecretAccessKey&amp;#34;: &amp;#34;zWJhfemER**************************&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:05:44Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The last command will output the access key and the secret key for the &lt;em&gt;kops&lt;/em&gt; user, save that information because we will use it from now on, note that we gave kops a lot of power with that user, so be careful with the keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional permissions to be able to create ALBs&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; kops-alb-policy.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Statement&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;ec2:Describe*&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;iam:CreateServiceLinkedRole&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;tag:GetResources&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;elasticloadbalancing:*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

aws iam create-policy --policy-name kops-alb-policy --policy-document file://kops-alb-policy.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Policy&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyName&amp;#34;: &amp;#34;kops-alb-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyId&amp;#34;: &amp;#34;ANPAIRIYZZZTCPJGNZZXS&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:policy/kops-alb-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultVersionId&amp;#34;: &amp;#34;v1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AttachmentCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PermissionsBoundaryUsageCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;IsAttachable&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T03:50:00Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UpdateDate&amp;#34;: &amp;#34;2019-01-18T03:50:00Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; kops-route53-policy.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Statement&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ChangeResourceRecordSets&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;arn:aws:route53:::hostedzone/*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ListHostedZones&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ListResourceRecordSets&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

aws iam create-policy --policy-name kops-route53-policy --policy-document file://kops-route53-policy.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Policy&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyName&amp;#34;: &amp;#34;kops-route53-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyId&amp;#34;: &amp;#34;ANPAIEWAGN62HBYC7QOS2&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:policy/kops-route53-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultVersionId&amp;#34;: &amp;#34;v1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AttachmentCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PermissionsBoundaryUsageCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;IsAttachable&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T03:15:37Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UpdateDate&amp;#34;: &amp;#34;2019-01-18T03:15:37Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that even we just created these kops policies for alb and route53 we cannot add them right now, we need to first create the cluster, you can skip them if you don&amp;rsquo;t plan on using these resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we will also export or set the cluster name and kops state store as environment variables&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k8s.techsquad.rocks
export KOPS_STATE_STORE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;techsquad-cluster-state-store&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We will be using these in a few places, so to not repeat ourselves let&amp;rsquo;s better have it as variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create the zone for the subdomain in Route53&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;uuidgen&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; aws route53 create-hosted-zone --name &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --caller-reference $ID | jq .DelegationSet.NameServers
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-848.awsdns-42.net&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-12.awsdns-01.com&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-1047.awsdns-02.org&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-1862.awsdns-40.co.uk&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As I&amp;rsquo;m already using this domain for the blog with github we can create a subdomain for it and add some NS records in our root zone for that subdomain, in this case k8s.techsquad.rocks. To make this easier I will show you how it should look like:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/kops-dns-subdomain.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

So with this change and our new zone in Route53 for the subdomain, we can freely manage it like if it was another domain, this means that everything that goes to *.k8s.techsquad.rocks will be handled by our Route53 zone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a bucket to store the cluster state&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api create-bucket &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --region us-east-1
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Location&amp;#34;: &amp;#34;/techsquad-cluster-state-store&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that bucket names are unique, so it&amp;rsquo;s always a good idea to prefix them with your domain name or something like that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set the versioning on, in case we need to rollback at some point&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-versioning --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;  --versioning-configuration Status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Enabled&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set encryption on for the bucket&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-encryption --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --server-side-encryption-configuration &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;Rules&amp;#34;:[{&amp;#34;ApplyServerSideEncryptionByDefault&amp;#34;:{&amp;#34;SSEAlgorithm&amp;#34;:&amp;#34;AES256&amp;#34;}}]}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And finally let&amp;rsquo;s create our cluster&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export KOPS_STATE_STORE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

kops create cluster &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --zones us-east-1a &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --networking calico &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --yes
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:06.449479   10314 create_cluster.go:1318] Using SSH public key: /home/kainlite/.ssh/id_rsa.pub&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:08.367862   10314 create_cluster.go:472] Inferred --cloud=aws from zone &amp;#34;us-east-1a&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:09.736030   10314 subnets.go:184] Assigned CIDR 172.20.32.0/19 to subnet us-east-1a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# W0117 23:14:18.049687   10314 firewall.go:249] Opening etcd port on masters for access from the nodes, for calico.  This is unsafe in untrusted environments.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:19.385541   10314 executor.go:91] Tasks: 0 done / 77 total; 34 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:21.779681   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-aggregator-ca&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:21.940026   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;ca&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:24.404810   10314 executor.go:91] Tasks: 34 done / 77 total; 24 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.548234   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;master&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.689470   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-aggregator&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.766563   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-scheduler&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.863562   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-controller-manager&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.955776   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubecfg&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.972837   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-proxy-client&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.973239   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kops&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.055466   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubelet&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.127778   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubelet-api&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.570516   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-proxy&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:29.503168   10314 executor.go:91] Tasks: 58 done / 77 total; 17 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:31.594404   10314 executor.go:91] Tasks: 75 done / 77 total; 2 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:33.297131   10314 executor.go:91] Tasks: 77 done / 77 total; 0 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:33.297168   10314 dns.go:153] Pre-creating DNS records&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:34.947302   10314 update_cluster.go:291] Exporting kubecfg for cluster&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kops has set your kubectl context to k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Cluster is starting.  It should be ready in a few minutes.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Suggestions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * validate cluster: kops validate cluster&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * list nodes: kubectl get nodes --show-labels&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * ssh to the master: ssh -i ~/.ssh/id_rsa admin@api.k8s.techsquad.rocks&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * the admin user is specific to Debian. If not using Debian please use the appropriate user based on your OS.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * read about installing addons at: https://github.com/kubernetes/kops/blob/master/docs/addons.md.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We set the KOPS_STATE_STORE to a valid S3 url for kops, and then created the cluster, this will set kubectl context to our new cluster, we might need to wait a few minutes before being able to use it, but before doing anything let&amp;rsquo;s validate that&amp;rsquo;s up and ready.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kops validate cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Using cluster from kubectl context: k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Validating cluster k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# INSTANCE GROUPS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# master-us-east-1a       Master  m3.medium       1       1       us-east-1a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# nodes                   Node    t2.medium       2       2       us-east-1a&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# NODE STATUS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                            ROLE    READY&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-39-123.ec2.internal   node    True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-52-65.ec2.internal    node    True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-61-51.ec2.internal    master  True&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Your cluster k8s.techsquad.rocks is ready&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The validation passed and we can see that our cluster is ready, it can take several minutes until the cluster is up and functional, in this case it took about 3-5 minutes.&lt;/p&gt;

&lt;p&gt;We will create an additional subnet to satisfy our ALB:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 create-subnet --vpc-id vpc-06e2e104ad785474c --cidr-block &lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.20.64.0/19 --availability-zone us-east-1b
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Subnet&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AvailabilityZone&amp;#34;: &amp;#34;us-east-1b&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AvailableIpAddressCount&amp;#34;: 8187,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CidrBlock&amp;#34;: &amp;#34;172.20.64.0/19&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultForAz&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;MapPublicIpOnLaunch&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;State&amp;#34;: &amp;#34;pending&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;SubnetId&amp;#34;: &amp;#34;subnet-017a5609ce6104e1b&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;VpcId&amp;#34;: &amp;#34;vpc-06e2e104ad785474c&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AssignIpv6AddressOnCreation&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Ipv6CidrBlockAssociationSet&amp;#34;: []&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;KubernetesCluster,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k8s.techsquad.rocks
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Name,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;us-east-1b.k8s.techsquad.rocks
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SubnetType,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Public
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes.io/cluster/k8s.techsquad.rocks,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;owned
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes.io/role/elb,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that we applied some required tags for the controller, and created an extra subnet, in a HA setup this would not be necessary since kops would create it for us but this is a small testing/dev cluster, so we will need to do it manually.&lt;/p&gt;

&lt;p&gt;And lastly a security group for our ALB:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 create-security-group --group-name WebApps --description &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default web security group&amp;#34;&lt;/span&gt;  --vpc-id vpc-06e2e104ad785474c
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;GroupId&amp;#34;: &amp;#34;sg-09f0b1233696e65ef&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws ec2 authorize-security-group-ingress --group-id sg-09f0b1233696e65ef --protocol tcp --port &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; --cidr &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id sg-057d2b0f6e288aa70 --protocol all --port &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; --source-group sg-09f0b1233696e65ef&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that this rule will open the port 80 to the world, you can add your ip or your VPN ips there if you want to restrict it, the second rule will allow the traffic from the load balancer to reach the nodes where our app is running.&lt;/p&gt;

&lt;h3 id=&#34;aws-alb-ingress-controller&#34;&gt;&lt;strong&gt;Aws-alb-ingress-controller&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We will use &lt;a href=&#34;https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/&#34;&gt;Aws ALB Ingress Controller&lt;/a&gt;, to serve our web traffic, this will create an manage an ALB based in our ingress rules.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/rbac-role.yaml

clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress-controller&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress-controller&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Download the manifest and then modify the cluster-name to &lt;code&gt;k8s.techsquad.rocks&lt;/code&gt; and a few other parameters, you can list the vpcs with &lt;code&gt;aws ec2 describe-vpcs&lt;/code&gt; it will have some kops tags, so it&amp;rsquo;s easy to identify.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -sS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/alb-ingress-controller.yaml&amp;#34;&lt;/span&gt; &amp;gt; alb-ingress-controller.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Or copy and paste the following lines:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; alb-ingress-controller.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Application Load Balancer (ALB) Ingress Controller Deployment Manifest.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# This manifest details sensible defaults for deploying an ALB Ingress Controller.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# GitHub: https://github.com/kubernetes-sigs/aws-alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: apps/v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # Namespace the ALB Ingress Controller should run in. Does not impact which
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # namespaces it&amp;#39;s able to resolve ingress resource for. For limiting ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # namespace scope, see --watch-namespace.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: kube-system
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  replicas: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  strategy:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    rollingUpdate:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      maxSurge: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      maxUnavailable: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    type: RollingUpdate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      creationTimestamp: null
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - -v=1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Limit the namespace where this ALB Ingress Controller deployment will
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # resolve ingress resources. If left commented, all namespaces are used.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - --watch-namespace=your-k8s-namespace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --feature-gates=waf=false
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Setting the ingress-class flag below ensures that only ingress resources with the
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # annotation kubernetes.io/ingress.class: &amp;#34;alb&amp;#34; are respected by the controller. You may
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # choose any class you&amp;#39;d like for this controller to respect.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --ingress-class=alb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Name of your cluster. Used when naming resources created
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # by the ALB Ingress Controller, providing distinction between
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # clusters.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --cluster-name=k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS VPC ID this ingress controller will use to create AWS resources.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If unspecified, it will be discovered from ec2metadata.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --aws-vpc-id=vpc-06e2e104ad785474c
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS region this ingress controller will operate in.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If unspecified, it will be discovered from ec2metadata.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # List of regions: http://docs.aws.amazon.com/general/latest/gr/rande.html#vpc_region
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --aws-region=us-east-1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Enables logging on all outbound requests sent to the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If logging is desired, set to true.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - ---aws-api-debug
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Maximum number of times to retry the aws calls.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # defaults to 10.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - --aws-max-retries=10
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          env:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS key id for authenticating with the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # This is only here for examples. It&amp;#39;s recommended you instead use
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # a project like kube2iam for granting access.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #- name: AWS_ACCESS_KEY_ID
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #  value: KEYVALUE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS key secret for authenticating with the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # This is only here for examples. It&amp;#39;s recommended you instead use
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # a project like kube2iam for granting access.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #- name: AWS_SECRET_ACCESS_KEY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #  value: SECRETVALUE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          # Repository location of the ALB Ingress Controller.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          image: 894847497797.dkr.ecr.us-west-2.amazonaws.com/aws-alb-ingress-controller:v1.0.0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          imagePullPolicy: Always
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name: server
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          resources: {}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          terminationMessagePath: /dev/termination-log
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      dnsPolicy: ClusterFirst
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      restartPolicy: Always
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      securityContext: {}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      terminationGracePeriodSeconds: 30
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccountName: alb-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccount: alb-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that I only modified the args section if you want to compare it with the original.&lt;/p&gt;

&lt;p&gt;Then finally apply it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f alb-ingress-controller.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.apps &amp;#34;alb-ingress-controller&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;external-dns&#34;&gt;&lt;strong&gt;External-dns&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns/blob/master/docs/tutorials/aws.md&#34;&gt;External DNS&lt;/a&gt; will update our zone in Route53 based in the ingress rules as well, so everything will be done automatically for us once we add an ingress resource.&lt;/p&gt;

&lt;p&gt;But first let&amp;rsquo;s attach those policies that we created before:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name nodes.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name masters.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name nodes.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name masters.k8s.techsquad.rocks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that we just used the policies that we created before but we needed the cluster running because kops creates the roles nodes.k8s.techsquad.rocks and masters.k8s.techsquad.rocks, and this is needed for the aws-alb-ingress-controller and external-dns so these are able to do their job.&lt;/p&gt;

&lt;p&gt;We need to download the manifests and modify a few parameters to match our deployment, the parameters are domain-filter and txt-owner-id, the rest is as is:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Ss https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.0/docs/examples/external-dns.yaml &amp;gt; external-dns.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This configuration will only update records, that&amp;rsquo;s the default policy (upsert), and it will only look for public hosted zones.&lt;/p&gt;

&lt;p&gt;Or copy and paste the following lines:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; external-dns.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ServiceAccount
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ClusterRole
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;services&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;pods&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;extensions&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;ingresses&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;nodes&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ClusterRoleBinding
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns-viewer
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;roleRef:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  apiGroup: rbac.authorization.k8s.io
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  kind: ClusterRole
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;subjects:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- kind: ServiceAccount
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: default
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: extensions/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  strategy:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    type: Recreate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        app: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccountName: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        image: registry.opensource.zalan.do/teapot/external-dns:v0.5.9
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --source=service
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --source=ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --domain-filter=k8s.techsquad.rocks # will make ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --provider=aws
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --policy=upsert-only # would prevent ExternalDNS from deleting any records, omit to enable full synchronization
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --aws-zone-type=public # only look at public hosted zones (valid values are public, private or no value for both)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --registry=txt
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --txt-owner-id=k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And apply it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f external-dns.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# serviceaccount &amp;#34;external-dns&amp;#34; unchanged&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# clusterrole.rbac.authorization.k8s.io &amp;#34;external-dns&amp;#34; configured&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# clusterrolebinding.rbac.authorization.k8s.io &amp;#34;external-dns-viewer&amp;#34; configured&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.extensions &amp;#34;external-dns&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Validate that we have everything that we installed up and running:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get pods
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                            READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# external-dns-7d7998f7bb-lb5kq   1/1       Running   0          2m&lt;/span&gt;

kubectl get pods -n kube-system
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                                                   READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# alb-ingress-controller-5885ddd5f9-9rsc8                1/1       Running   0          12m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-kube-controllers-f6bc47f75-n99tl                1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-4ps9c                                      2/2       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-kjztv                                      2/2       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-zs4fg                                      2/2       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# dns-controller-67f5c6b7bd-r67pl                        1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# etcd-server-events-ip-172-20-42-37.ec2.internal        1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# etcd-server-ip-172-20-42-37.ec2.internal               1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-apiserver-ip-172-20-42-37.ec2.internal            1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-controller-manager-ip-172-20-42-37.ec2.internal   1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-756bfc7fdf-2kzjs                              3/3       Running   0          24m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-756bfc7fdf-rq5nd                              3/3       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-autoscaler-787d59df8f-c2d52                   1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-42-109.ec2.internal               1/1       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-42-37.ec2.internal                1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-54-175.ec2.internal               1/1       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-scheduler-ip-172-20-42-37.ec2.internal            1/1       Running   0          26m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We can see that alb-ingress-controller is running, also external-dns, and everything looks good and healthy, time to test it with a deployment.&lt;/p&gt;

&lt;h3 id=&#34;testing-everything&#34;&gt;&lt;strong&gt;Testing everything&lt;/strong&gt;&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-deployment.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-service.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# namespace &amp;#34;2048-game&amp;#34; created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.extensions &amp;#34;2048-deployment&amp;#34; created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# service &amp;#34;service-2048&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to download and edit the ingress resource to make it use our domain so we can then see the record pointing to the ALB.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Ss https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-ingress.yaml &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Or just copy and paste the next snippet.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; 2048-ingress.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: extensions/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: &amp;#34;2048-ingress&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: &amp;#34;2048-game&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  annotations:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    kubernetes.io/ingress.class:                alb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/scheme:           internet-facing
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/target-type:      instance
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/subnets:          subnet-017a5609ce6104e1b, subnet-060e6d3c3d3c2b34a
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/security-groups:  sg-09f0b1233696e65ef
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # You can check all the alternatives here:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # https://github.com/riccardofreixo/alb-ingress-controller/blob/master/docs/ingress-resources.md
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: 2048-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  - host: 2048.k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    http:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      paths:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - backend:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          serviceName: &amp;#34;service-2048&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          servicePort: 80
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        path: /*
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can use &lt;code&gt;aws ec2 describe-subnets&lt;/code&gt;, to find the first subnet id, this subnet already has some tags that we need in order to make it work, for example: &lt;code&gt;kubernetes.io/role/elb: 1&lt;/code&gt;, and the second subnet is the one that we created manually and applied the same tags.&lt;/p&gt;

&lt;p&gt;And finally apply it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ingress.extensions &amp;#34;2048-ingress&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Wait a few moments and verify.&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The ALB&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-listeners.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The DNS records&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-route53-records.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And the app&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-result.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;&lt;strong&gt;Clean up&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Remember this is not free, and if you don&amp;rsquo;t want to get charged after you&amp;rsquo;re done testing just shutdown and delete everything.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name nodes.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name masters.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name nodes.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name masters.k8s.techsquad.rocks

kops delete cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --yes
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Deleted kubectl config for k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Deleted cluster: &amp;#34;k8s.techsquad.rocks&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This command is really verbose, so I skipped it to the end, be aware that in order to delete the cluster with kops you first need to detach the additionally attached privileges. Also be careful to delete first the ingress resources so the ALB gets removed before you delete the cluster, or you will have an ALB laying around afterwards. You can re-run it if it gets stuck and cannot delete any resource.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I was going to use helm and deploy a more complex application here, but the article was already too long, so I decided to go with the aws alb ingress controller example.&lt;/li&gt;
&lt;li&gt;If something doesn&amp;rsquo;t go well or things aren&amp;rsquo;t happening you can always check the logs for external-dns and aws-alb-ingress-controller, the messages are usually very descriptive and easy to understand.&lt;/li&gt;
&lt;li&gt;For an ALB you need two subnets in two different AZs beforehand.&lt;/li&gt;
&lt;li&gt;If you are going to use ALBs, have in mind that it will create an ALB for each deployment, there is a small project that merges everything into one ALB but you need to have a unified or consolidated way to do health checks or or some of the apps will fail and the ALB will return a 502, the project can be found &lt;a href=&#34;https://github.com/jakubkulhan/ingress-merge&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Documenting what you do and how you do it (Also keeping the documentation updated is really important), not only will help the future you (Yes, you can thank your past self when reading and old doc), but also it will make it easier to share the knowledge and purpose of whatever you are implementing with your team.&lt;/li&gt;
&lt;li&gt;I spent 3 bucks with all the instances and dns zones, etc during this tutorial in case you are interested :).&lt;/li&gt;
&lt;li&gt;Notes I also removed all $ from the code blocks and added the output of the commands with # OUTPUT:, let me know if this is clear and easy to read, or if you have any suggestion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My local environment</title>
      <link>https://techsquad.rocks/blog/my_local_environment/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/my_local_environment/</guid>
      <tags>
      
        <tag>urxvt</tag>
      
        <tag>vim</tag>
      
        <tag>linux</tag>
      
        <tag>tmux</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This article is about my current configuration, but I&amp;rsquo;m going to talk only about the terminal and my text editor because those will work in any linux distribution, I&amp;rsquo;m currently using &lt;strong&gt;Arch Linux&lt;/strong&gt; and &lt;strong&gt;AwesomeWM&lt;/strong&gt; (I used Gnome Shell previously, and Gnome 2 before that), you can find my &lt;a href=&#34;https://github.com/kainlite/dotfiles&#34;&gt;dotfiles here&lt;/a&gt; with all my configurations.&lt;/p&gt;

&lt;p&gt;While my terminal doesn&amp;rsquo;t look exactly like the one from the picture you can get something like that with &lt;a href=&#34;https://github.com/jtyr/gbt&#34;&gt;GBT&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;terminal&#34;&gt;Terminal&lt;/h3&gt;

&lt;p&gt;My current terminal is &lt;strong&gt;rxvt-unicode&lt;/strong&gt; and I&amp;rsquo;m pretty happy with it, it&amp;rsquo;s relatively easy to configure and use, it looks like this:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/urxvt.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

And the configuration file can be &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.Xresources&#34;&gt;found here&lt;/a&gt;, note that even if you don&amp;rsquo;t like Ponys by any reason, it&amp;rsquo;s useful to test colors in the terminal.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s different than other terminals I have tried in the way it manages and uses the configuration, it uses an additional tool called &lt;code&gt;xrdb&lt;/code&gt; (X server resource database utility) to manage the configuration provided in the configuration file &lt;code&gt;.Xresources&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Loads the configuration from Xresources in xrdb&lt;/span&gt;
$ xrdb -merge .Xresources

&lt;span style=&#34;color:#75715e&#34;&gt;# List the current configuration&lt;/span&gt;
$ xrdb -query

&lt;span style=&#34;color:#75715e&#34;&gt;# Deletes the current database&lt;/span&gt;
$ xrdb -remove&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;theme&#34;&gt;Theme&lt;/h3&gt;

&lt;p&gt;My current theme is &lt;a href=&#34;https://github.com/morhetz/gruvbox&#34;&gt;gruvbox&lt;/a&gt; in Vim and also in my &lt;a href=&#34;https://github.com/morhetz/gruvbox-contrib/blob/master/xresources/gruvbox-dark.xresources&#34;&gt;terminal&lt;/a&gt;, and changing from &lt;a href=&#34;https://ethanschoonover.com/solarized/&#34;&gt;solazired&lt;/a&gt; to it is what inspired this small article.&lt;/p&gt;

&lt;h3 id=&#34;tmux&#34;&gt;Tmux&lt;/h3&gt;

&lt;p&gt;I also use tmux to maintan sessions, some of it&amp;rsquo;s nice features are tiling, tabs. The configuration can be &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.tmux.conf&#34;&gt;found here&lt;/a&gt;. I move between tabs with control-h and control-l, and between panes with control-a [hjkl].&lt;/p&gt;

&lt;h3 id=&#34;vim&#34;&gt;Vim&lt;/h3&gt;

&lt;p&gt;As my text editor I really like and enjoy using Vim, there is always something to learn but once you make some good habits it pays off in the way you write and move around, you can check some amazing screencasts on vim &lt;a href=&#34;http://vimcasts.org/&#34;&gt;here&lt;/a&gt; and also the book Practical Vim can be really helpful to get started and/or improve your current vim-fu.&lt;/p&gt;

&lt;p&gt;As a plugin manager I use &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.vimrc.bundles&#34;&gt;Plug&lt;/a&gt; even that it&amp;rsquo;s not really necessary with Vim 8, but that is a matter of taste I guess. You can see my full vim configuration &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.vimrc&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It looks something like this, as you can see I have a small tmux pane in the bottom with Hugo &lt;em&gt;compiling&lt;/em&gt; the site after every save and live reloading it in my browser:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/vim.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m also using zsh and &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;oh-my-zsh&lt;/a&gt; with the theme agnoster. I really like zsh it&amp;rsquo;s fast and has some nice features like autocomplete everywhere, but again this is a matter of taste.&lt;/li&gt;
&lt;li&gt;I like to take advantage of all the space in the screen, that&amp;rsquo;s why AwesomeWM fits great (even that I do not use the tiling feature a lot, tabs and full screen apps), with some minor configuration I&amp;rsquo;m able to do everything from the keyboard, I use the mouse when checking emails and things like that but otherwise the keyboard is more than enough.&lt;/li&gt;
&lt;li&gt;I used cowsay and ponysay in the first screenshot so you can have an idea of how the terminal looks like.&lt;/li&gt;
&lt;li&gt;If you are going to use unicode I recommend you to install the fonts from nerd-fonts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring some Istio features</title>
      <link>https://techsquad.rocks/blog/exploring_some_istio_features/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/exploring_some_istio_features/</guid>
      <tags>
      
        <tag>istio</tag>
      
        <tag>routing</tag>
      
        <tag>service-mesh</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This article builds up on what we did in the &lt;a href=&#34;https://techsquad.rocks/blog/why_do_i_need_a_service_mesh/&#34;&gt;last article&lt;/a&gt;, so refer to that one before starting this one, if you are planing to follow the documentation examples you will find many similarities since I based this article on that.&lt;/p&gt;

&lt;p&gt;In this example I will be using &lt;a href=&#34;https://m.do.co/c/01d040b789de&#34;&gt;Digital Ocean&lt;/a&gt; (that&amp;rsquo;s my referral link), note that I do not have any association with Digital Ocean but they give you $100 to test their products for 60 days, if you spend $25 I get another $25.&lt;/p&gt;

&lt;h3 id=&#34;before-starting-a-few-concepts&#34;&gt;Before starting a few concepts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A VirtualService defines the rules that control how requests for a service are routed within an Istio service mesh.&lt;/li&gt;
&lt;li&gt;A DestinationRule configures the set of policies to be applied to a request after VirtualService routing has occurred.&lt;/li&gt;
&lt;li&gt;A ServiceEntry is commonly used to enable requests to services outside of an Istio service mesh.&lt;/li&gt;
&lt;li&gt;A Gateway configures a load balancer for HTTP/TCP traffic, most commonly operating at the edge of the mesh to enable ingress traffic for an application.
These basic concepts will help you understand the manifest that we are going to see.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h3&gt;

&lt;p&gt;We already have the bookinfo project deployed and using all three versions of the service (ratings) but we will need to make some changes to test route based on user identity, you can check the configuration with:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get destinationrules -o yaml
apiVersion: v1
items:
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DestinationRule&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;details&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;details&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subsets&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}]}}&lt;/span&gt;
    creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T00:58:54Z
    generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    name: details
    namespace: default
    resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;921688&amp;#34;&lt;/span&gt;
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules/details
    uid: &lt;span style=&#34;color:#ae81ff&#34;&gt;11490656&lt;/span&gt;-153c-11e9-9eda-6a85233ec1d5
  spec:
    host: details
    subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DestinationRule&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productpage&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productpage&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subsets&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}]}}&lt;/span&gt;
    creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T00:58:53Z
    generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    name: productpage
    namespace: default
    resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;921684&amp;#34;&lt;/span&gt;
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules/productpage
    uid: 10a42a24-153c-11e9-9eda-6a85233ec1d5
  spec:
    host: productpage
    subsets:
    - labels:
        version: v1
      name: v1
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DestinationRule&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subsets&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2-mysql&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2-mysql&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2-mysql-vm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2-mysql-vm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}]}}&lt;/span&gt;
    creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T00:58:54Z
    generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    name: ratings
    namespace: default
    resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;921686&amp;#34;&lt;/span&gt;
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules/ratings
    uid: 111299e1-153c-11e9-9eda-6a85233ec1d5
  spec:
    host: ratings
    subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2
    - labels:
        version: v2-mysql
      name: v2-mysql
    - labels:
        version: v2-mysql-vm
      name: v2-mysql-vm
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DestinationRule&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subsets&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}]}}&lt;/span&gt;
    creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T00:58:53Z
    generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    name: reviews
    namespace: default
    resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;921685&amp;#34;&lt;/span&gt;
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules/reviews
    uid: 10db9ee2-153c-11e9-9eda-6a85233ec1d5
  spec:
    host: reviews
    subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2
    - labels:
        version: v3
      name: v3
kind: List
metadata:
  resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  selfLink: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
There we have all the destination rules, and now we need to apply the new manifest that will send everything to the version 1 and the user &lt;em&gt;jason&lt;/em&gt; to the version 2 of the reviews microservice.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istio-1.0.5/samples/bookinfo $ kubectl apply -f networking/virtual-service-reviews-test-v2.yaml
virtualservice.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt; created

$ kubectl get virtualservice reviews -o yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VirtualService&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end-user&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exact&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jason&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}}]&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subset&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}]}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subset&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}]}]}}&lt;/span&gt;
  creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T02:30:35Z
  generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  name: reviews
  namespace: default
  resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;930577&amp;#34;&lt;/span&gt;
  selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/virtualservices/reviews
  uid: e0701f0d-1548-11e9-9eda-6a85233ec1d5
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
What&amp;rsquo;s going on here, how Istio knows what user is logged in?, well, the app adds a header called end-user and value &lt;em&gt;jason&lt;/em&gt; then the route will be used, it&amp;rsquo;s a nifty trick.&lt;/p&gt;

&lt;p&gt;Not jason:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/istio-servicev1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;jason:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/istio-servicev2.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

As you can see the difference in the v1 and v2 of the app are the stars below the reviews, but that is more than enough to indicate that it works, this is really nice for beta testers you don&amp;rsquo;t need or have to complicate your code but just add a header.&lt;/p&gt;

&lt;h3 id=&#34;injecting-an-http-abort-fault&#34;&gt;Injecting an HTTP abort fault:&lt;/h3&gt;

&lt;p&gt;This time we will inject a failure for our friend &lt;em&gt;jason&lt;/em&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istio-1.0.5/samples/bookinfo $ kubectl apply -f networking/virtual-service-ratings-test-abort.yaml
virtualservice.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt; created

$ kubectl get virtualservice ratings -o yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VirtualService&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fault&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abort&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;httpStatus&amp;#34;&lt;/span&gt;:500,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;percent&amp;#34;&lt;/span&gt;:100&lt;span style=&#34;color:#f92672&#34;&gt;}}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end-user&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exact&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jason&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}}]&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subset&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}]}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subset&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}]}]}}&lt;/span&gt;
  creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T02:50:59Z
  generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  name: ratings
  namespace: default
  resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;932552&amp;#34;&lt;/span&gt;
  selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/virtualservices/ratings
  uid: b98799b0-154b-11e9-9eda-6a85233ec1d5
spec:
  hosts:
  - ratings
  http:
  - fault:
      abort:
        httpStatus: &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;
        percent: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
    match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: ratings
        subset: v1
  - route:
    - destination:
        host: ratings
        subset: v1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;So he decided to check the book reviews again and boom, the ratings service was not available but everything else works just fine, this only applies for &lt;em&gt;jason&lt;/em&gt; everyone else will see the version without stars or the error message.
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/istio-servicev3.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;Istio seems an it is indeed really powerful, there many more features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Traffic shifting.&lt;/li&gt;
&lt;li&gt;Requests timeouts.&lt;/li&gt;
&lt;li&gt;Circuit breaking.&lt;/li&gt;
&lt;li&gt;Mirroring.&lt;/li&gt;
&lt;li&gt;And a lot more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I left aside Policies, Telemetry and Security, if you want to learn more about Istio I highly recommend you to try the examples yourself and read on the &lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/#collapse24&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also spent some time improving the navigation of the blog and some other minor details, but I wanted to keep the articles going so that&amp;rsquo;s why this one is so simple and similar to the documentation.&lt;/p&gt;

&lt;h3 id=&#34;upcoming-topics-and-ideas&#34;&gt;Upcoming topics and ideas&lt;/h3&gt;

&lt;p&gt;I Want to start creating series of content on different topics, brief articles that can get you started with some new technology or maybe give you an idea of how it works, let me know if you are interested in that kind of content in the comments or via twitter 🐦 (it&amp;rsquo;s a bird, in case you cannot see unicode characters).&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why do I need a service mesh?</title>
      <link>https://techsquad.rocks/blog/why_do_i_need_a_service_mesh/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/why_do_i_need_a_service_mesh/</guid>
      <tags>
      
        <tag>istio</tag>
      
        <tag>service-mesh</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This time we will see how to get started with &lt;a href=&#34;https://istio.io/&#34;&gt;Istio&lt;/a&gt; and why do we need to use a service mesh.&lt;/p&gt;

&lt;p&gt;In this example I will be using &lt;a href=&#34;https://m.do.co/c/01d040b789de&#34;&gt;Digital Ocean&lt;/a&gt; (that&amp;rsquo;s my referral link), note that I do not have any association with Digital Ocean but they give you $100 to test their products for 60 days, if you spend $25 I get another $25.&lt;/p&gt;

&lt;h3 id=&#34;istio&#34;&gt;Istio&lt;/h3&gt;

&lt;p&gt;So&amp;hellip; You might be wondering some of those questions: why Istio? Why do I need a service mesh?, when do I need that? And I want to help you with some answers:&lt;/p&gt;

&lt;p&gt;Why do I need a service mesh? Basically because in cloud environments you cannot trust that the network will be reliable 100% of the time, that the latency will be low, that the network is secure and the bandwidth is infinite, the service mesh is just an extra layer to help microservices communicate with each other safely and reliably.&lt;/p&gt;

&lt;p&gt;When do I need to have one? This one can be tricky and will depend on your environment, but the moment that you start experiencing network issues between your microservices would be a good moment to do it, it could be done before of course, but it will highly depend on the project, if you can start early with it the better and easier to implement will be, always have in mind the benefits of added security, observability and likely performance improvement.&lt;/p&gt;

&lt;p&gt;Why Istio? This will be a small series of service meshes for kubernetes and I decided to start with Istio.&lt;/p&gt;

&lt;p&gt;In case you don&amp;rsquo;t agree with my explanations that&amp;rsquo;s ok, this is a TL;DR version and also I simplified things a lot, for a more complete overview you can check &lt;a href=&#34;https://blog.buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&#34;&gt;this&lt;/a&gt; article or &lt;a href=&#34;https://www.oreilly.com/ideas/do-you-need-a-service-mesh&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h3&gt;

&lt;p&gt;First of all we need to download and install Istio in our cluster, the recommended way of doing it is using helm (In this case I will be using the no Tiller alternative, but it could be done with helm install as well, check here for &lt;a href=&#34;https://istio.io/docs/setup/kubernetes/helm-install/&#34;&gt;more info&lt;/a&gt;):
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -L https://git.io/getLatestIstio | sh -&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This will download and extract the latest release, in this case 1.0.5 at this moment.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s install Istio&amp;hellip; only pay attention to the first 3 commands, then you can skip until the end of the code block, I post all the output because I like full examples :)
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istio-1.0.5 $ helm template install/kubernetes/helm/istio --name istio --namespace istio-system --set grafana.enabled&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true &amp;gt; $HOME/istio.yaml
istio-1.0.5 $ kubectl create namespace istio-system
namespace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-system&amp;#34;&lt;/span&gt; created

istio-1.0.5 $ kubectl apply -f $HOME/istio.yaml
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley-configuration&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-statsd-prom-bridge&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-custom-resources&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-mixer-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-cleanup-secrets-service-account&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-cleanup-secrets-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-cleanup-secrets-istio-system&amp;#34;&lt;/span&gt; created
job.batch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-cleanup-secrets&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-post-install-account&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-post-install-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-post-install-role-binding-istio-system&amp;#34;&lt;/span&gt; created
job.batch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-post-install&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector-service-account&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtualservices.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destinationrules.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serviceentries.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gateways.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;envoyfilters.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;httpapispecbindings.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;httpapispecs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quotaspecbindings.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quotaspecs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rules.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attributemanifests.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bypasses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;circonuses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deniers.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fluentds.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubernetesenvs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listcheckers.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memquotas.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noops.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;opas.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheuses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rbacs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redisquotas.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;servicecontrols.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;signalfxs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;solarwindses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stackdrivers.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;statsds.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdios.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apikeys.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorizations.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;checknothings.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuberneteses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listentries.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logentries.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;edges.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metrics.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quotas.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reportnothings.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;servicecontrolreports.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tracespans.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rbacconfigs.rbac.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serviceroles.rbac.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;servicerolebindings.rbac.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adapters.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;instances.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;templates.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;handlers.config.istio.io&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-mixer-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley-admin-role-binding-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-mixer-admin-role-binding-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector-admin-role-binding-istio-system&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-policy&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-telemetry&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-policy&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-telemetry&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector&amp;#34;&lt;/span&gt; created
gateway.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-autogenerated-k8s-ingress&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-policy&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-telemetry&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot&amp;#34;&lt;/span&gt; created
mutatingwebhookconfiguration.admissionregistration.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector&amp;#34;&lt;/span&gt; created
attributemanifest.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istioproxy&amp;#34;&lt;/span&gt; created
attributemanifest.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubernetes&amp;#34;&lt;/span&gt; created
stdio.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;handler&amp;#34;&lt;/span&gt; created
logentry.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accesslog&amp;#34;&lt;/span&gt; created
logentry.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcpaccesslog&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdiotcp&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requestcount&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requestduration&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requestsize&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;responsesize&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcpbytesent&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcpbytereceived&amp;#34;&lt;/span&gt; created
prometheus.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;handler&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;promhttp&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;promtcp&amp;#34;&lt;/span&gt; created
kubernetesenv.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;handler&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubeattrgenrulerule&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcpkubeattrgenrulerule&amp;#34;&lt;/span&gt; created
kubernetes.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt; created
destinationrule.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-policy&amp;#34;&lt;/span&gt; created
destinationrule.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-telemetry&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
WOAH, What did just happen?, a lot of new resources were created, basically we just generated the manifest from the helm chart and applied that to our cluster.&lt;/p&gt;

&lt;p&gt;So lets see what&amp;rsquo;s running and what that means:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods -n istio-system
NAME                                      READY     STATUS      RESTARTS   AGE
istio-citadel-856f994c58-l96p8            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-cleanup-secrets-xqqj4               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;/1       Completed   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-egressgateway-5649fcf57-7zwkh       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-galley-7665f65c9c-tzn7d             &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-ingressgateway-6755b9bbf6-bh84r     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-pilot-56855d999b-c4cp5              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-policy-6fcb6d655f-9544z             &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-sidecar-injector-768c79f7bf-th8zh   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-telemetry-664d896cf5-jdcwv          &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
prometheus-76b7745b64-f8jxn               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
A few minutes later, almost everything is up, but what&amp;rsquo;s all that? Istio has several components, see the following overview extracted from &lt;a href=&#34;https://github.com/istio/istio&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Envoy&lt;/strong&gt;: Sidecar proxies per microservice to handle ingress/egress traffic between services in the cluster and from a service to external services. The proxies form a secure microservice mesh providing a rich set of functions like discovery, rich layer-7 routing, circuit breakers, policy enforcement and telemetry recording/reporting functions.
Note: The service mesh is not an overlay network. It simplifies and enhances how microservices in an application talk to each other over the network provided by the underlying platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mixer&lt;/strong&gt;: Central component that is leveraged by the proxies and microservices to enforce policies such as authorization, rate limits, quotas, authentication, request tracing and telemetry collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pilot&lt;/strong&gt;: A component responsible for configuring the proxies at runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Citadel&lt;/strong&gt;: A centralized component responsible for certificate issuance and rotation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node Agent&lt;/strong&gt;: A per-node component responsible for certificate issuance and rotation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Galley&lt;/strong&gt;: Central component for validating, ingesting, aggregating, transforming and distributing config within Istio.&lt;/p&gt;

&lt;p&gt;Ok so, a lot of new things were installed but how do I know it&amp;rsquo;s working? let&amp;rsquo;s deploy a &lt;a href=&#34;https://istio.io/docs/examples/bookinfo/&#34;&gt;test application&lt;/a&gt; and check it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PATH&lt;span style=&#34;color:#e6db74&#34;&gt;:~/istio-1.0.5/bin&amp;#34;&lt;/span&gt;
istio-1.0.5/samples/bookinfo $ kubectl apply -f &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;istioctl kube-inject -f platform/kube/bookinfo.yaml&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;details&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;details-v1&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings-v1&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews-v1&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews-v2&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews-v3&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productpage&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productpage-v1&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
That command not only deployed the application but injected the Istio sidecar to each pod:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods
NAME                              READY     STATUS    RESTARTS   AGE
details-v1-8bd954dbb-zhrqq        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
productpage-v1-849c786f96-kpfx9   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
ratings-v1-68d648d6fd-w68qb       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
reviews-v1-b4c984bdc-9s6j5        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
reviews-v2-575446d5db-r6kwc       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
reviews-v3-74458c4889-kr4wb       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we can see each pod has 2 containers in it, the app container and istio-proxy. You can also configure &lt;a href=&#34;https://istio.io/docs/setup/kubernetes/sidecar-injection/#automatic-sidecar-injection&#34;&gt;automatic sidecar injection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also all services are running:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get services
NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    AGE
details       ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.134.179   &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;9080&lt;/span&gt;/TCP   3m
kubernetes    ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.0.1       &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;/TCP    3d
productpage   ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.32.221    &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;9080&lt;/span&gt;/TCP   3m
ratings       ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.159.112   &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;9080&lt;/span&gt;/TCP   3m
reviews       ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.77.125    &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;9080&lt;/span&gt;/TCP   3m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;But how do I access the app?
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istio-1.0.5/samples/bookinfo $ kubectl apply -f networking/bookinfo-gateway.yaml
gateway.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookinfo-gateway&amp;#34;&lt;/span&gt; created
virtualservice.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookinfo&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
In Istio a Gateway configures a load balancer for HTTP/TCP traffic, most commonly operating at the edge of the mesh to enable ingress traffic for an application (L4-L6).&lt;/p&gt;

&lt;p&gt;After that we need to set some environment variables to fetch the LB ip, port, etc.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export INGRESS_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{.status.loadBalancer.ingress[0].ip}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
$ export INGRESS_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{.spec.ports[?(@.name==&amp;#34;http2&amp;#34;)].port}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
$ export SECURE_INGRESS_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{.spec.ports[?(@.name==&amp;#34;https&amp;#34;)].port}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
$ export GATEWAY_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$INGRESS_HOST:$INGRESS_PORT

curl -o /dev/null -s -w &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%{http_code}\n&amp;#34;&lt;/span&gt; http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GATEWAY_URL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/productpage&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
If the latest curl returns 200 then we&amp;rsquo;re good, you can also browse the app &lt;code&gt;open http://${GATEWAY_URL}/productpage&lt;/code&gt; and you will see something like the following image:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/productpage-example.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Also you can use &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; to check some metrics about the service usage, etc. (You don&amp;rsquo;t have to worry about prometheus since it&amp;rsquo;s enabled by default). Spin up the port-forward so we don&amp;rsquo;t have to expose grafana: to the world with: &lt;code&gt;kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath=&#39;{.items[0].metadata.name}&#39;) 3000:3000&lt;/code&gt;, and then &lt;code&gt;open http://localhost:3000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a general advice check all the settings that Istio offers try the ones that you think that could be useful for your project and always measure and compare.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do mind that &lt;strong&gt;pilot&lt;/strong&gt; pod requires at least 4 Gbs of memory, so you will need at least one node with that amount of memory.&lt;/li&gt;
&lt;li&gt;You can check the load balancer status under: Manage -&amp;gt; Networking -&amp;gt; Load balancers. And if everything is okay your LB will say Healthy.&lt;/li&gt;
&lt;li&gt;Grafana is not enabled by default but we do enable it via helm with &lt;code&gt;--set grafana.enabled=true&lt;/code&gt;, if you want to check all the possible options &lt;a href=&#34;https://istio.io/docs/reference/config/installation-options/&#34;&gt;go here&lt;/a&gt;, if you are using more than two &lt;code&gt;--set&lt;/code&gt; options I would recommend creating a &lt;code&gt;values.yaml&lt;/code&gt; file and use that instead.&lt;/li&gt;
&lt;li&gt;Istio is a big beast and should be treated carefully, there is a lot more to learn and test out. We only scratched the surface here.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;upcoming-posts&#34;&gt;Upcoming posts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More examples using Istio.&lt;/li&gt;
&lt;li&gt;Linkerd.&lt;/li&gt;
&lt;li&gt;Maybe some Golang fun.&lt;/li&gt;
&lt;li&gt;Serverless or kubeless, that&amp;rsquo;s the question.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with skaffold</title>
      <link>https://techsquad.rocks/blog/getting_started_with_skaffold/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/getting_started_with_skaffold/</guid>
      <tags>
      
        <tag>skaffold</tag>
      
        <tag>kubernetes</tag>
      
        <tag>deployment-tools</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;skaffold&#34;&gt;&lt;strong&gt;Skaffold&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This time we will see how to get started with &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold&#34;&gt;Skaffold&lt;/a&gt;, it seems a relatively mature project, and it does a lot more than some of the previous explored alternatives: &lt;em&gt;Skaffold is a command line tool that facilitates continuous development for Kubernetes applications. You can iterate on your application source code locally then deploy to local or remote Kubernetes clusters. Skaffold handles the workflow for building, pushing and deploying your application. It also provides building blocks and describe customizations for a CI/CD pipeline.&lt;/em&gt; (Extracted from &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold&#34;&gt;github&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In this example I will be using &lt;a href=&#34;https://m.do.co/c/01d040b789de&#34;&gt;Digital Ocean&lt;/a&gt; (that&amp;rsquo;s my referral link), note that I do not have any association with Digital Ocean but they give you $100 to test their products for 60 days, if you spend $25 I get another $25, I got the idea from &lt;a href=&#34;https://www.youtube.com/watch?v=fhYSKEy0s8w&#34;&gt;Pelado Nerd Spanish Youtube Channel&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h3&gt;

&lt;p&gt;Once you have created your account and added your credit card you will get the $100 of free credit, then you will have to go to Manage on the left side panel and click on Kubernetes, then create your cluster with the amount of nodes that you consider necessary but remember to power them off or delete these resources so you don&amp;rsquo;t waste the free credit or your credit card itself. Once you have created your cluster and downloaded the kubectl config you&amp;rsquo;re ready to go.&lt;/p&gt;

&lt;p&gt;We will be working with the chat bot again you can see the original &lt;a href=&#34;https://techsquad.rocks/blog/go_echobot/&#34;&gt;article here&lt;/a&gt;, and the repo &lt;a href=&#34;https://github.com/kainlite/echobot/tree/skaffold&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s tell our kubectl to use our recently downloaded config:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export KUBECONFIG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/kainlite/Downloads/k8s-1-13-1-do-2-nyc1-1546545313076-kubeconfig.yaml
$ kubectl get nodes -o wide

NAME                 STATUS    ROLES     AGE       VERSION   EXTERNAL-IP       OS-IMAGE                       KERNEL-VERSION   CONTAINER-RUNTIME
crazy-wozniak-8306   Ready     &amp;lt;none&amp;gt;    6h        v1.13.1   &lt;span style=&#34;color:#ae81ff&#34;&gt;178&lt;/span&gt;.128.154.205   Debian GNU/Linux &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stretch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;.9.0-8-amd64    docker://18.9.0
crazy-wozniak-830t   Ready     &amp;lt;none&amp;gt;    6h        v1.13.1   &lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;.99.224.115    Debian GNU/Linux &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stretch&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;.9.0-8-amd64    docker://18.9.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Your config might have a slightly different name, but it should be similar. We can see in the output a lot of information about our nodes (workers).&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s cut to the chase, we are here for &lt;em&gt;Skaffold&lt;/em&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v0.20.0/skaffold-linux-amd64 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x skaffold &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo mv skaffold /usr/local/bin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can install the binary using the provided line (linux) or downloading it from the &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once installed we can see the &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold/tree/master/examples&#34;&gt;examples&lt;/a&gt;, I will be using the getting-started example:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apiVersion: skaffold/v1beta2
kind: Config
build:
  artifacts:
  - image: kainlite/echobot
deploy:
  kubectl:
    manifests:
      - k8s-*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
With very litle YAML we can accomplish a lot.&lt;/p&gt;

&lt;p&gt;We need a manifest file that matches that pattern so skaffold can deploy/re-deploy our application, so let&amp;rsquo;s generate one with &lt;code&gt;kubectl run echobot --image=kainlite/echobot --dry-run -o yaml&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    run: echobot
  name: echobot
spec:
  replicas: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  selector:
    matchLabels:
      run: echobot
  strategy: {}
  template:
    metadata:
      labels:
        run: echobot
    spec:
      containers:
      - image: kainlite/echobot
        name: echobot
        env:
        - name: SLACK_API_TOKEN
          value: really_long_token
        livenessProbe:
          exec:
            command:
            - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;
            - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;
            - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/app/health_check.sh&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The above command can be used to generate any kind of k8s resource :), I stripped it a bit, because there were fields that I didn&amp;rsquo;t want in and added some that we need for it to work.&lt;/p&gt;

&lt;p&gt;Then the only thing left to do is testing that everything works properly:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ skaffold build

Starting build...
Building &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kainlite/echobot&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;...
Sending build context to Docker daemon  &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;.56kB
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/12 : FROM golang:1.11.2-alpine as builder
 ---&amp;gt; 57915f96905a
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/12 : WORKDIR /app
 ---&amp;gt; Using cache
 ---&amp;gt; e04488a7f16b
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;/12 : RUN adduser -D -g &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt; app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     chown -R app:app /app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apk add git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add gcc musl-dev
 ---&amp;gt; Running in 1339601fff6f
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing nghttp2-libs &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.32.0-r0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing libssh2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.8.0-r3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;/6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing libcurl &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;.61.1-r1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;/6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing expat &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;.2.5-r0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;/6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing pcre2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.31-r0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;/6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing git &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;.18.1-r0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Executing busybox-1.28.4-r1.trigger
OK: &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; MiB in &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; packages
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing binutils &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;.30-r5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing gmp &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;.1.2-r1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing isl &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.18-r0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing libgomp &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;.4.0-r9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing libatomic &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;.4.0-r9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing pkgconf &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.5.3-r0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing libgcc &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;.4.0-r9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing mpfr3 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;.1.5-r1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing mpc1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.0.3-r1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing libstdc++ &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;.4.0-r9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing gcc &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;.4.0-r9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;/12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing musl-dev &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.1.19-r10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Executing busybox-1.28.4-r1.trigger
OK: &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; MiB in &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; packages
 ---&amp;gt; 0e7a97e577dc
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;/12 : ADD . /app/
 ---&amp;gt; 72cfd4dea99b
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;/12 : RUN go get -d -v ./... &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go build -o main . &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chown -R app:app /app /home/app
 ---&amp;gt; Running in 4482bfd3e8f7
go: finding github.com/gorilla/websocket v1.4.0
go: finding github.com/nlopes/slack v0.4.0
go: finding github.com/pkg/errors v0.8.0
go: downloading github.com/nlopes/slack v0.4.0
go: downloading github.com/pkg/errors v0.8.0
go: downloading github.com/gorilla/websocket v1.4.0
 ---&amp;gt; 8ea604c7fb37
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;/12 : FROM golang:1.11.2-alpine
 ---&amp;gt; 57915f96905a
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;/12 : WORKDIR /app
 ---&amp;gt; Using cache
 ---&amp;gt; e04488a7f16b
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;/12 : RUN adduser -D -g &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt; app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     chown -R app:app /app
 ---&amp;gt; Using cache
 ---&amp;gt; 33b206dba7e4
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;/12 : COPY --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder --chown&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app /app/health_check.sh /app/health_check.sh
 ---&amp;gt; Using cache
 ---&amp;gt; 34d3cd1a5bb0
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;/12 : COPY --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder --chown&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app /app/main /app/main
 ---&amp;gt; Using cache
 ---&amp;gt; 0c3d838b25dc
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;/12 : USER app
 ---&amp;gt; Using cache
 ---&amp;gt; 95c2bf90800c
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;/12 : CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app/main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
 ---&amp;gt; Using cache
 ---&amp;gt; 3541257ff16c
Successfully built 3541257ff16c
Successfully tagged 1fca8a8c999a8cd9b943456b70d90807:latest
The push refers to repository &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;docker.io/kainlite/echobot&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
ee06a8f42495: Preparing
12468476a0ef: Preparing
ec122f36b39d: Preparing
e94f3271cc73: Preparing
93391cb9fd4b: Preparing
cb9d0f9550f6: Preparing
93448d8c2605: Preparing
c54f8a17910a: Preparing
df64d3292fd6: Preparing
cb9d0f9550f6: Waiting
c54f8a17910a: Waiting
93448d8c2605: Waiting
e94f3271cc73: Layer already exists
93391cb9fd4b: Layer already exists
12468476a0ef: Layer already exists
ec122f36b39d: Layer already exists
ee06a8f42495: Layer already exists
93448d8c2605: Layer already exists
cb9d0f9550f6: Layer already exists
df64d3292fd6: Layer already exists
c54f8a17910a: Layer already exists
fc03e3d-dirty-3541257: digest: sha256:99c6d3d5b226a1947e8f96c0a5f963c8e499848d271f121ad50551046a0dc7ca size: &lt;span style=&#34;color:#ae81ff&#34;&gt;2197&lt;/span&gt;
Build complete in &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;.642618413s
Starting test...
Test complete in &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;.15µs
kainlite/echobot -&amp;gt; kainlite/echobot:fc03e3d-dirty-3541257&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we can see skaffold build not only did the docker build but also tagged and pushed the image to &lt;a href=&#34;https://cloud.docker.com/repository/docker/kainlite/echobot/tags&#34;&gt;docker hub&lt;/a&gt;, which is really nice and really useful to build a CI/CD system with it.&lt;/p&gt;

&lt;p&gt;But wait, we need to deploy that to our cluster, right on:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ skaffold deploy
Starting build...
Building &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kainlite/echobot&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;...
Sending build context to Docker daemon  &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;.56kB
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/12 : FROM golang:1.11.2-alpine as builder
 ---&amp;gt; 57915f96905a
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/12 : WORKDIR /app
 ---&amp;gt; Using cache
 ---&amp;gt; e04488a7f16b
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;/12 : RUN adduser -D -g &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt; app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     chown -R app:app /app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apk add git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add gcc musl-dev
 ---&amp;gt; Using cache
 ---&amp;gt; 0e7a97e577dc
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;/12 : ADD . /app/
 ---&amp;gt; Using cache
 ---&amp;gt; 72cfd4dea99b
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;/12 : RUN go get -d -v ./... &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go build -o main . &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chown -R app:app /app /home/app
 ---&amp;gt; Using cache
 ---&amp;gt; 8ea604c7fb37
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;/12 : FROM golang:1.11.2-alpine
 ---&amp;gt; 57915f96905a
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;/12 : WORKDIR /app
 ---&amp;gt; Using cache
 ---&amp;gt; e04488a7f16b
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;/12 : RUN adduser -D -g &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt; app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     chown -R app:app /app
 ---&amp;gt; Using cache
 ---&amp;gt; 33b206dba7e4
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;/12 : COPY --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder --chown&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app /app/health_check.sh /app/health_check.sh
 ---&amp;gt; Using cache
 ---&amp;gt; 34d3cd1a5bb0
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;/12 : COPY --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder --chown&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app /app/main /app/main
 ---&amp;gt; Using cache
 ---&amp;gt; 0c3d838b25dc
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;/12 : USER app
 ---&amp;gt; Using cache
 ---&amp;gt; 95c2bf90800c
Step &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;/12 : CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app/main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
 ---&amp;gt; Using cache
 ---&amp;gt; 3541257ff16c
Successfully built 3541257ff16c
Successfully tagged 510226574761304cc9d64a343d5bdbff:latest
The push refers to repository &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;docker.io/kainlite/echobot&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
ee06a8f42495: Preparing
12468476a0ef: Preparing
ec122f36b39d: Preparing
e94f3271cc73: Preparing
93391cb9fd4b: Preparing
cb9d0f9550f6: Preparing
93448d8c2605: Preparing
c54f8a17910a: Preparing
df64d3292fd6: Preparing
cb9d0f9550f6: Waiting
93448d8c2605: Waiting
c54f8a17910a: Waiting
df64d3292fd6: Waiting
12468476a0ef: Layer already exists
e94f3271cc73: Layer already exists
cb9d0f9550f6: Layer already exists
ec122f36b39d: Layer already exists
93391cb9fd4b: Layer already exists
ee06a8f42495: Layer already exists
c54f8a17910a: Layer already exists
df64d3292fd6: Layer already exists
93448d8c2605: Mounted from library/golang
fc03e3d-dirty-3541257: digest: sha256:99c6d3d5b226a1947e8f96c0a5f963c8e499848d271f121ad50551046a0dc7ca size: &lt;span style=&#34;color:#ae81ff&#34;&gt;2197&lt;/span&gt;
Build complete in &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;.136865292s
Starting test...
Test complete in &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;.912µs
Starting deploy...
kubectl client version: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.10
kubectl version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.12.0 or greater is recommended &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; use with skaffold
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echobot&amp;#34;&lt;/span&gt; configured
Deploy complete in &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;.676513226s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Deploy does a lot like with gitkube, it build the image, pushes it to the registry and then makes the deployment to the cluster, as you can see in there skaffold relies on kubectl and I have an old version of it.&lt;/p&gt;

&lt;p&gt;After a few seconds we can see that our deployment has been triggered and we have a new pod being created for it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods
NAME                       READY     STATUS              RESTARTS   AGE
echobot-57fdcccf76-4qwvq   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;/1       ContainerCreating   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          5s
echobot-6fcd78658c-njvpx   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;/1       Terminating         &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          9m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Skaffold also has another nice option that it&amp;rsquo;s called &lt;em&gt;dev&lt;/em&gt; it watches the folder for changes and re-deploys the app so you can focus on code.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s clean up and call it a day:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ skaffold delete
Cleaning up...
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echobot&amp;#34;&lt;/span&gt; deleted
Cleanup complete in &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;.833219278s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;I really liked the workflow that skaffold provides, I hope that I can use it some more in the near future. And remember to shutdown the kubernetes cluster if you are using Digital Ocean so you don&amp;rsquo;t get charged by surprise later on.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with gitkube</title>
      <link>https://techsquad.rocks/blog/getting_started_with_gitkube/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/getting_started_with_gitkube/</guid>
      <tags>
      
        <tag>git</tag>
      
        <tag>gitkube</tag>
      
        <tag>kubernetes</tag>
      
        <tag>deployment-tools</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;gitkube&#34;&gt;&lt;strong&gt;Gitkube&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This time we will see how to get started with &lt;a href=&#34;https://gitkube.sh/&#34;&gt;Gitkube&lt;/a&gt;, it&amp;rsquo;s a young project but it seems to work fine and it has an interesting approach compared to other alternatives, since it only relies on git and kubectl, other than that it&amp;rsquo;s just a &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34;&gt;CRD&lt;/a&gt; and a controller, so you end up with 2 pods in kube-system one for the controller and the other for gitkubed, gitkubed is in charge of cloning your repos and also build the docker images, it seems that the idea behind gitkube is for the daily use in a dev/test environment where you need to try your changes quickly and without hassle. You can find more &lt;a href=&#34;https://github.com/hasura/gitkube-example&#34;&gt;examples here&lt;/a&gt;, also be sure to check their page and documentation if you like it or want to learn more.&lt;/p&gt;

&lt;p&gt;In the examples I will be using &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube&#34;&gt;minikube&lt;/a&gt; or you can &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;check out this repo&lt;/a&gt; that has a good overview of minikube, once installed and started (&lt;code&gt;minikube start&lt;/code&gt;) that command will download and configure the local environment, if you have been following the previous posts you already have minikube installed and working, &lt;em&gt;but in this post be sure to use &lt;em&gt;minikube tunnel&lt;/em&gt;&lt;/em&gt; if you configure gitkube with a load balancer (or if you configure any service type as load balancer):&lt;/p&gt;

&lt;h3 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re going to deploy or re-deploy our echo bot one more time but this time using gitkube.
You can find the chat bot: &lt;a href=&#34;https://techsquad.rocks/blog/go_echobot/&#34;&gt;article here&lt;/a&gt;, and the repo: &lt;a href=&#34;https://github.com/kainlite/echobot/tree/gitkube&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all we need to install the gitkube binary in our machine and then the CRD in our kubernetes cluster:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl create -f https://storage.googleapis.com/gitkube/gitkube-setup-stable.yaml
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;remotes.gitkube.sh&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gitkube&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gitkube&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gitkube-ci-conf&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gitkubed&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gitkube-controller&amp;#34;&lt;/span&gt; created

$ kubectl --namespace kube-system expose deployment gitkubed --type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;LoadBalancer --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gitkubed
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gitkubed&amp;#34;&lt;/span&gt; exposed&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that there are 2 ways to install gitkube into our cluster, using the manifests as displayed there or using the gitkube binary and doing &lt;code&gt;gitkube install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To install the gitkube binary, the easiest way is to do:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl https://raw.githubusercontent.com/hasura/gitkube/master/gimme.sh | sudo bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This will download and copy the binary into: &lt;code&gt;/usr/local/bin&lt;/code&gt;, as a general rule I recommend reading whatever you are going to pipe into bash in your terminal to avoid potential dangers of &lt;em&gt;the internet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then we need to generate (and then create it in the cluster) a file called &lt;code&gt;remote.yaml&lt;/code&gt; (or any name you like), it&amp;rsquo;s necessary in order to tell gitkube how to deploy our application once we &lt;code&gt;git push&lt;/code&gt; it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ gitkube remote generate -f remote.yaml
Remote name: minikube
namespace: default
SSH public key file: ~/.ssh/id_rsa.pub
Initialisation: K8S YAML Manifests
Manifests/Chart directory: Enter
Choose docker registry: docker.io/kainlite
Deployment name: echobot
Container name: echobot
Dockerfile path: Dockerfile
Build context path: ./
Add another container? &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;y/N&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Enter
Add another deployment? &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;y/N&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Enter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
And this will yield the following &lt;code&gt;remote.yaml&lt;/code&gt; file that we then need to create in our cluster as it is a custom resource it might look a bit different from the default kubernetes resources.&lt;/p&gt;

&lt;p&gt;The actual file &lt;code&gt;remote.yaml&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion: gitkube.sh/v1alpha1
kind: Remote
metadata:
  creationTimestamp: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
  name: minikube
  namespace: default
spec:
  authorizedKeys:
  - &lt;span style=&#34;color:#e6db74&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA8jvVVtDSVe25p2U2tDGQyVrnv3YcWjJc6AXTUMc0YNi+QDm6s+hMTwkf2wDRD7b6Y3kmgNSqLEE0EEgOkA69c8PgypM7AwbKZ51V9XcdPd7NyLabpomNiftpUwi01DGfBr25lJV9h2MHwsI/6w1izDvQyN7fAl+aTFgx+VGg1p4FygXWeBqm0n0DfHmBI7PDXxGbuFTJHUmRVS+HPd5Bi31S9Kq6eoodBWtV2MlVnZkpF67FWt2Xo2rFKVf4pZR4N1yjZKRsvIaI5i14LvtOoOqNQ+/tPMAFAif3AhldOW06fgnddYGi/iF+CatVttwNDWmClSOek9LO72UzR4s0xQ== gabriel@kainlite&lt;/span&gt;
  deployments:
  - containers:
    - dockerfile: Dockerfile
      name: echobot
      path: ./
    name: echobot
  manifests:
    helm: {}
    path: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  registry:
    credentials:
      secretKeyRef:
        key: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
      secretRef: minikube-regsecret
    url: docker.io/kainlite
status:
  remoteUrl: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  remoteUrlDesc: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
There are a few details to have in mind here, the &lt;em&gt;deployment&lt;/em&gt; name because gitkube expects a deployment to be already present with that name in order to update/upgrade it, the path to the Dockerfile, or helm chart, credentials for the registry if any, I&amp;rsquo;m using a public image, so we don&amp;rsquo;t need any of that. The &lt;em&gt;wizard&lt;/em&gt; will let you choose and customize a few options for your deployment.&lt;/p&gt;

&lt;p&gt;The last step would be to finally create the resource:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ gitkube remote create -f remote.yaml
INFO&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; remote minikube created
INFO&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; remote url
INFO&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; remote url: ssh://default-minikube@10.98.213.202/~/git/default-minikube

  &lt;span style=&#34;color:#75715e&#34;&gt;# add the remote to your git repo and push:&lt;/span&gt;
  git remote add minikube ssh://default-minikube@10.98.213.202/~/git/default-minikube
  git push minikube master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;After adding the new remote called &lt;em&gt;minikube&lt;/em&gt;  we have everything ready to go, so let&amp;rsquo;s test it and see what happens:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git push minikube master
Enumerating objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
Counting objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;/10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
Delta compression using up to &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; threads
Compressing objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;/10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
Writing objects: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;/10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.92 KiB | &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.92 MiB/s, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
Total &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
remote: Gitkube build system : Tue Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;:50:58 UTC &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;: Initialising
remote:
remote: Creating the build directory
remote: Checking out &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;master:a0265bc5d0229dce0cffc985ca22ebe28532ee95&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/default-minikube/build/default-minikube&amp;#39;&lt;/span&gt;
remote:
remote: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; deployment&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; found in this repo
remote: Trying to build them...
remote:
remote: Building Docker image &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; : echobot
remote:
remote: Building Docker image : docker.io/kainlite/default-minikube-default.echobot-echobot:a0265bc5d0229dce0cffc985ca22ebe28532ee95
remote: Sending build context to Docker daemon   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;.68kB
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/12 : FROM golang:1.11.2-alpine as builder
remote:  ---&amp;gt; 57915f96905a
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/12 : WORKDIR /app
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; 997342e65c61
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;/12 : RUN adduser -D -g &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt; app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     chown -R app:app /app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     apk add git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add gcc musl-dev
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; 7c6d8b9d1137
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;/12 : ADD . /app/
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; ca751c2678c4
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;/12 : RUN go get -d -v ./... &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go build -o main . &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chown -R app:app /app /home/app
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; 16e44978b140
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;/12 : FROM golang:1.11.2-alpine
remote:  ---&amp;gt; 57915f96905a
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;/12 : WORKDIR /app
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; 997342e65c61
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;/12 : RUN adduser -D -g &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt; app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;     chown -R app:app /app
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; 55f48da0f9ac
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;/12 : COPY --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder --chown&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app /app/health_check.sh /app/health_check.sh
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; 139250fd6c77
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;/12 : COPY --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder --chown&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app /app/main /app/main
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; 2f1eb9f16e9f
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;/12 : USER app
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; a72f27dccff2
remote: Step &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;/12 : CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app/main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
remote:  ---&amp;gt; Using cache
remote:  ---&amp;gt; 034275449e08
remote: Successfully built 034275449e08
remote: Successfully tagged kainlite/default-minikube-default.echobot-echobot:a0265bc5d0229dce0cffc985ca22ebe28532ee95
remote: pushing docker.io/kainlite/default-minikube-default.echobot-echobot:a0265bc5d0229dce0cffc985ca22ebe28532ee95 to registry
remote: The push refers to repository &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;docker.io/kainlite/default-minikube-default.echobot-echobot&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
remote: bba61bf193fe: Preparing
remote: 3f0355bbea40: Preparing
remote: 2ebcdc9e5e8f: Preparing
remote: 6f1324339fd4: Preparing
remote: 93391cb9fd4b: Preparing
remote: cb9d0f9550f6: Preparing
remote: 93448d8c2605: Preparing
remote: c54f8a17910a: Preparing
remote: df64d3292fd6: Preparing
remote: cb9d0f9550f6: Waiting
remote: 93448d8c2605: Waiting
remote: c54f8a17910a: Waiting
remote: df64d3292fd6: Waiting
remote: 2ebcdc9e5e8f: Layer already exists
remote: 6f1324339fd4: Layer already exists
remote: 3f0355bbea40: Layer already exists
remote: bba61bf193fe: Layer already exists
remote: 93391cb9fd4b: Layer already exists
remote: 93448d8c2605: Layer already exists
remote: cb9d0f9550f6: Layer already exists
remote: df64d3292fd6: Layer already exists
remote: c54f8a17910a: Layer already exists
remote: a0265bc5d0229dce0cffc985ca22ebe28532ee95: digest: sha256:3046c989fe1b1c4f700aaad875658c73ef571028f731546df38fb404ac22a9c9 size: &lt;span style=&#34;color:#ae81ff&#34;&gt;2198&lt;/span&gt;
remote:
remote: Updating Kubernetes deployment: echobot
remote: deployment &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echobot&amp;#34;&lt;/span&gt; image updated
remote: deployment &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echobot&amp;#34;&lt;/span&gt; successfully rolled out
remote: NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
remote: echobot   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           31s
remote:
remote: Removing build directory
remote:
remote: Gitkube build system : Tue Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;:51:16 UTC &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;: Finished build
remote:
remote:
To ssh://10.98.213.202/~/git/default-minikube
 * &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;      master -&amp;gt; master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Quite a lot happened there, first of all gitkubed checked out the commit from the branch or HEAD that we pushed to &lt;code&gt;/home/default-minikube/build/default-minikube&lt;/code&gt; and then started building and tagged the docker image with the corresponding SHA, after that it pushed the image to &lt;a href=&#34;https://cloud.docker.com/u/kainlite/repository/docker/kainlite/default-minikube-default.echobot-echobot&#34;&gt;docker hub&lt;/a&gt; and then updated the deployment that we already had in there for the echo bot.&lt;/p&gt;

&lt;p&gt;The last step would be to verify that the pod was actually updated, so we can inspect the pod configuration with &lt;code&gt;kubectl describe pod echobot-654cdbfb99-g4bwv&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; $ kubectl describe pod echobot-654cdbfb99-g4bwv
Name:               echobot-654cdbfb99-g4bwv
Namespace:          default
Priority:           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
PriorityClassName:  &amp;lt;none&amp;gt;
Node:               minikube/10.0.2.15
Start Time:         Tue, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:51:10 -0300
Labels:             app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;echobot
                    pod-template-hash&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;654cdbfb99
Annotations:        &amp;lt;none&amp;gt;
Status:             Running
IP:                 &lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.17.0.9
Controlled By:      ReplicaSet/echobot-654cdbfb99
Containers:
  echobot:
    Container ID:   docker://fe26ba9be6e2840c0d43a4fcbb4d79af38a00aa3a16411dee5e4af3823d44664
    Image:          docker.io/kainlite/default-minikube-default.echobot-echobot:a0265bc5d0229dce0cffc985ca22ebe28532ee95
    Image ID:       docker-pullable://kainlite/default-minikube-default.echobot-echobot@sha256:3046c989fe1b1c4f700aaad875658c73ef571028f731546df38fb404ac22a9c9
    Port:           &amp;lt;none&amp;gt;
    Host Port:      &amp;lt;none&amp;gt;
    State:          Running
      Started:      Tue, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:51:11 -0300
    Ready:          True
    Restart Count:  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    Liveness:       exec &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;/bin/sh -c /app/health_check.sh&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; delay&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0s timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1s period&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10s &lt;span style=&#34;color:#75715e&#34;&gt;#success=1 #failure=3&lt;/span&gt;
    Environment:
      SLACK_API_TOKEN:  really_long_token
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-ks4jx &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ro&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  default-token-ks4jx:
    Type:        Secret &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a volume populated by a Secret&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    SecretName:  default-token-ks4jx
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  &amp;lt;none&amp;gt;
Tolerations:     node.kubernetes.io/not-ready:NoExecute &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 300s
                 node.kubernetes.io/unreachable:NoExecute &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  39m   default-scheduler  Successfully assigned default/echobot-654cdbfb99-g4bwv to minikube
  Normal  Pulled     39m   kubelet, minikube  Container image &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker.io/kainlite/default-minikube-default.echobot-echobot:a0265bc5d0229dce0cffc985ca22ebe28532ee95&amp;#34;&lt;/span&gt; already present on machine
  Normal  Created    39m   kubelet, minikube  Created container
  Normal  Started    39m   kubelet, minikube  Started container&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we can see the image is the one that got built from our &lt;code&gt;git push&lt;/code&gt; and everything is working as expected.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it for now, I think this tool has a lot of potential, it&amp;rsquo;s simple, nice and fast.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go echo bot</title>
      <link>https://techsquad.rocks/blog/go_echobot/</link>
      <pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/go_echobot/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>golang</tag>
      
        <tag>slack</tag>
      
        <tag>ksonnet</tag>
      
        <tag>jsonnet</tag>
      
        <tag>kubernetes</tag>
      
        <tag>deployment-tools</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;echo-bot&#34;&gt;&lt;strong&gt;Echo bot&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This post was going to be about advanced ksonnet usage, but it went more about the echo bot itself, so I decided to rename it.&lt;/p&gt;

&lt;p&gt;To be honest, there is no other way to get the benefits of having &lt;a href=&#34;https://ksonnet.io/&#34;&gt;ksonnet&lt;/a&gt; if you&amp;rsquo;re not going to take advantage of the &lt;em&gt;deployments as code&lt;/em&gt; facilities that it brings thanks to Jsonnet.&lt;/p&gt;

&lt;p&gt;This time we will see how to use &lt;a href=&#34;https://github.com/cybermaggedon/ksonnet-cheat-sheet&#34;&gt;proper templates&lt;/a&gt;, it seems that the templates generated with &lt;code&gt;ks&lt;/code&gt; are outdated at the time of this writing ksonnet version is: 0.13.1, no surprise here because it&amp;rsquo;s not a really mature tool. It does require a lot of effort in learning, hacking and reading to get things to work, but hopefully soon it will be easier, of course this is my personal opinion and I have not used it for a real project yet, but I expect it to grow and become more usable before I attempt to do something for the real world with it.&lt;/p&gt;

&lt;p&gt;In the examples I will be using &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube&#34;&gt;minikube&lt;/a&gt; or you can &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;check out this repo&lt;/a&gt; that has a good overview of minikube, once installed and started (&lt;code&gt;minikube start&lt;/code&gt;) that command will download and configure the local environment, if you have been following the previous posts you already have minikube installed and working:&lt;/p&gt;

&lt;h3 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h3&gt;

&lt;p&gt;This time I&amp;rsquo;m not going to deploy another wordpress instance but a simple Slack echo bot made with go:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/nlopes/slack&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(
                &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SLACK_API_TOKEN&amp;#34;&lt;/span&gt;),
        )

        &lt;span style=&#34;color:#a6e22e&#34;&gt;rtm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRTM&lt;/span&gt;()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rtm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ManageConnection&lt;/span&gt;()

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rtm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IncomingEvents&lt;/span&gt; {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Event Received: &amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HelloEvent&lt;/span&gt;:
                        &lt;span style=&#34;color:#75715e&#34;&gt;// Ignore hello
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ConnectedEvent&lt;/span&gt;:
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Infos:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Info&lt;/span&gt;)
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection counter:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ConnectionCount&lt;/span&gt;)

                &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MessageEvent&lt;/span&gt;:
                        &lt;span style=&#34;color:#75715e&#34;&gt;// Only echo what it said to me
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Message: %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;)
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rtm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetInfo&lt;/span&gt;()
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;@%s&amp;gt; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ID&lt;/span&gt;)

                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HasPrefix&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prefix&lt;/span&gt;) {
                                &lt;span style=&#34;color:#a6e22e&#34;&gt;rtm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SendMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rtm&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewOutgoingMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;))
                        }

                &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PresenceChangeEvent&lt;/span&gt;:
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Presence Change: %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;)

                &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LatencyReport&lt;/span&gt;:
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current latency: %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;)

                &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RTMError&lt;/span&gt;:
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error: %s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ev&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())

                &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;InvalidAuthEvent&lt;/span&gt;:
                        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid credentials&amp;#34;&lt;/span&gt;)
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

                &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:

                        &lt;span style=&#34;color:#75715e&#34;&gt;// Ignore other events..
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// fmt.Printf(&amp;#34;Unexpected: %v\n&amp;#34;, msg.Data)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                }
        }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As you can see it&amp;rsquo;s the simplest example from the readme of the &lt;a href=&#34;https://github.com/nlopes/slack&#34;&gt;Go Slack API&lt;/a&gt; project, it only connects to Slack and when it reads a message if it&amp;rsquo;s addressed to the bot then it echoes the message back, creating a bot and everything else is out of the scope of this article but it&amp;rsquo;s really simple, you only need to create an app in the Slack workspace, set it as a bot and grab the token (there is a lot more that you can customize but that is the most basic procedure to get started with a bot), then you just invite it to any channel that you want and start interacting with it.&lt;/p&gt;

&lt;p&gt;Here you can see the &lt;code&gt;Dockerfile&lt;/code&gt;, for security we create an app user for the build and for running it, and to save space and bandwidth we only ship what we need using a multi-stage build:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Build&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:1.11.2-alpine as builder&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /app&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; adduser -D -g &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt; app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    chown -R app:app /app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    apk add git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add gcc musl-dev&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ADD&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; . /app/&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; go get -d -v ./... &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go build -o main . &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chown -R app:app /app /home/app&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:1.11.2-alpine&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /app&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; adduser -D -g &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt; app &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    chown -R app:app /app&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;COPY --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder --chown&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app /app/health_check.sh /app/health_check.sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;COPY --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder --chown&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;app /app/main /app/main&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;USER app&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; [&amp;#34;/app/main&amp;#34;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
There are a few more files in there, you can see the full sources &lt;a href=&#34;https://github.com/kainlite/echobot&#34;&gt;here&lt;/a&gt;, for example &lt;code&gt;health_check.sh&lt;/code&gt;, as our app doesn&amp;rsquo;t listen on any port we need a way to tell kubernetes how to check if our app is alive.&lt;/p&gt;

&lt;p&gt;Okay, enough boilerplate let&amp;rsquo;s get to business, so let&amp;rsquo;s create a new ksonnet application:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ks init echobot
INFO Using context &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;minikube&amp;#34;&lt;/span&gt; from kubeconfig file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/.kube/config&amp;#34;&lt;/span&gt;
INFO Creating environment &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; with namespace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;, pointing to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version:v1.8.0&amp;#34;&lt;/span&gt; cluster at address &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://192.168.99.100:8443&amp;#34;&lt;/span&gt;
INFO Generating ksonnet-lib data at path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/Webs/echobot/echobot/lib/ksonnet-lib/v1.8.0&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And now let&amp;rsquo;s grab a template and modify it accordingly to be able to create the deployment for the bot &lt;code&gt;components/echobot.jsonnet&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;// Import KSonnet library
local params = std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__ksonnet/params&amp;#39;&lt;/span&gt;).components.demo;
local k = import &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k.libsonnet&amp;#39;&lt;/span&gt;;

// Specify the import objects that we need
local container = k.extensions.v1beta1.deployment.mixin.spec.template.spec.containersType;
local depl = k.extensions.v1beta1.deployment;

// Environment variables, instead of hardcoding it here we could use a param or a secret
// But I will leave that as an exercise for you :)
local envs = [
  {
    name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SLACK_API_TOKEN&amp;#39;&lt;/span&gt;,
    value: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;really-long-token&amp;#39;&lt;/span&gt;,
  },
];

local livenessProbe = {
  exec: {
    command: [
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/app/health_check.sh&amp;#39;&lt;/span&gt;,
    ],
  },
};

// Define containers
local containers = [
  container.new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;echobot&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kainlite/echobot:0.0.2&amp;#39;&lt;/span&gt;) {
    env: (envs),
    livenessProbe: livenessProbe,
  },
];

// Define deployment with &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; replicas
local deployment =
  depl.new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;echobot&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, containers, { app: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;echobot&amp;#39;&lt;/span&gt; });

local resources = [deployment];

// Return list of resources.
k.core.v1.list.new(resources)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that I have uploaded that image to docker hub so you can use it to follow the example if you want, after that just replace &lt;code&gt;really-long-token&lt;/code&gt; with your token, and then do:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ks apply default
INFO Applying deployments echobot
INFO Creating non-existent deployments echobot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And now if we check our deployment and pod, we should see something like this:&lt;/p&gt;

&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/echobot.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;And in the logs:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; $ kubectl get pods
NAME                               READY     STATUS    RESTARTS   AGE
echobot-7456f7d7dd-twg4r           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          53s

$ kubectl logs -f echobot-7456f7d7dd-twg4r
Event Received: Event Received: Infos: &amp;amp;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;wss://cerberus-xxxx.lb.slack-msgs.com/websocket/1gvXP_yQCFE-Y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0xc000468000 0xc0004482a0 &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]}&lt;/span&gt;
Connection counter: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Event Received: Event Received: Current latency: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.256397423s
Event Received: Current latency: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.25679313s
Event Received: Current latency: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.256788737s
Event Received: Message: &amp;amp;&lt;span style=&#34;color:#f92672&#34;&gt;{{&lt;/span&gt;message CEDGU6EA0 UEDJT5DDH &amp;lt;@UED48HD33&amp;gt; echo! &lt;span style=&#34;color:#ae81ff&#34;&gt;1546124966&lt;/span&gt;.002300  false &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &amp;lt;nil&amp;gt;  false &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  false  &lt;span style=&#34;color:#ae81ff&#34;&gt;1546124966&lt;/span&gt;.002300   &amp;lt;nil&amp;gt;      &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; false &amp;lt;nil&amp;gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; TEDJT5CTD &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;  false false&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &amp;lt;nil&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And that folks is all I have for now, I hope you enjoyed this small tour of ksonnet. The source code for the bot can be found &lt;a href=&#34;https://github.com/kainlite/echobot&#34;&gt;here&lt;/a&gt;. In a future post I might explore &lt;a href=&#34;https://ksonnet.io/docs/examples/helm/&#34;&gt;ksonnet and helm charts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;upcoming-topics&#34;&gt;Upcoming topics&lt;/h3&gt;

&lt;p&gt;As promised I will be doing one post about &lt;a href=&#34;https://github.com/hasura/gitkube&#34;&gt;Gitkube&lt;/a&gt; and &lt;a href=&#34;https://github.com/GoogleContainerTools/skaffold&#34;&gt;Skaffold&lt;/a&gt;, there are a lot of deployment tools for kubernetes but those are the most promising ones to me, also after that I will start covering more topics about &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, &lt;a href=&#34;https://containerd.io/&#34;&gt;ContainerD&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/&#34;&gt;KubeADM&lt;/a&gt;, and Kubernetes in general.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with ksonnet</title>
      <link>https://techsquad.rocks/blog/getting_started_with_ksonnet/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/getting_started_with_ksonnet/</guid>
      <tags>
      
        <tag>ksonnet</tag>
      
        <tag>jsonnet</tag>
      
        <tag>deployment-tools</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This tutorial will show you how to create a simple application and also how to deploy it to kubernetes using &lt;a href=&#34;https://ksonnet.io/&#34;&gt;ksonnet&lt;/a&gt;, in the examples I will be using &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube&#34;&gt;minikube&lt;/a&gt; or you can &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;check out this repo&lt;/a&gt; that has a good overview of minikube, once installed and started (&lt;code&gt;minikube start&lt;/code&gt;) that command will download and configure the local environment, if you have been following the previous posts you already have minikube installed and working, before we dive into an example let&amp;rsquo;s review some terminology from ksonnet (extracted from the &lt;a href=&#34;https://ksonnet.io/docs/concepts/&#34;&gt;official documentation&lt;/a&gt;):&lt;/p&gt;

&lt;h4 id=&#34;application&#34;&gt;Application&lt;/h4&gt;

&lt;p&gt;A ksonnet application represents a well-structured directory of Kubernetes manifests (this is generated using the &lt;code&gt;ks init&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&#34;environment&#34;&gt;Environment&lt;/h4&gt;

&lt;p&gt;An environment consists of four elements, some of which can be pulled from your current kubeconfig context: Name, Server, Namespace, API version. The environment determines to which cluster you&amp;rsquo;re going to deploy the application.&lt;/p&gt;

&lt;h4 id=&#34;component&#34;&gt;Component&lt;/h4&gt;

&lt;p&gt;A component can be as simple as a Kubernetes resource (a Pod, Deployment, etc), or a fully working stack for example EFK/ELK, you can generate components using &lt;code&gt;ks generate&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;prototype&#34;&gt;Prototype&lt;/h4&gt;

&lt;p&gt;Prototype + Parameters = Component. Think of a prototype as a base template before you apply the parameters, to set a name, replicas, etc for the resource, you can explore some system prototypes with &lt;code&gt;ks prototype&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;parameter&#34;&gt;Parameter&lt;/h4&gt;

&lt;p&gt;It gives live to a component with dynamic values, you can use &lt;code&gt;ks param&lt;/code&gt; to view or modify params, there are App params (global), Component params, and Environment params (overrides app params).&lt;/p&gt;

&lt;h4 id=&#34;module&#34;&gt;Module&lt;/h4&gt;

&lt;p&gt;Modules provide a way for you to share components across environments. More concisely, a module refers to a subdirectory in components/ containing its own params.libsonnet. To create a module &lt;code&gt;ks module create &amp;lt;module name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;part&#34;&gt;Part&lt;/h4&gt;

&lt;p&gt;It provides a way to organize and re-use code.&lt;/p&gt;

&lt;h4 id=&#34;package&#34;&gt;Package&lt;/h4&gt;

&lt;p&gt;A package is a set of related prototypes and associates helper libraries, it allows you to create and share packages between applications.&lt;/p&gt;

&lt;h4 id=&#34;registry&#34;&gt;Registry&lt;/h4&gt;

&lt;p&gt;It&amp;rsquo;s essentially a repository for packages, it supports the incubator registry, github, filesystem, and Helm.&lt;/p&gt;

&lt;h4 id=&#34;manifest&#34;&gt;Manifest&lt;/h4&gt;

&lt;p&gt;The same old YAML or JSON manifest but this time written in &lt;a href=&#34;https://jsonnet.org/learning/tutorial.html&#34;&gt;Jsonnet&lt;/a&gt;, basically Jsonnet is a simple extension of JSON.&lt;/p&gt;

&lt;p&gt;Phew, that&amp;rsquo;s a lot of names and terminology at once, let&amp;rsquo;s get started with the terminal already.&lt;/p&gt;

&lt;h3 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h3&gt;

&lt;p&gt;This command will generate the following folder structure &lt;code&gt;ks init wordpress&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;INFO Using context &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;minikube&amp;#34;&lt;/span&gt; from kubeconfig file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/.kube/config&amp;#34;&lt;/span&gt;
INFO Creating environment &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; with namespace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;, pointing to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version:v1.12.4&amp;#34;&lt;/span&gt; cluster at address &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://192.168.99.100:8443&amp;#34;&lt;/span&gt;
INFO Generating ksonnet-lib data at path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/k8s-examples/wordpress/lib/ksonnet-lib/v1.12.4&amp;#39;&lt;/span&gt;

$ ls -l |  awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ print $9 }&amp;#39;&lt;/span&gt;
app.yaml        &amp;lt;--- Defines versions, namespace, cluster address, app name, registry.
components      &amp;lt;--- Components by default it&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s empty and has a params file.
environments    &amp;lt;--- By default there is only one environment called default.
lib             &amp;lt;--- Here we can find the ksonnet helpers that match the Kubernetes API with the common resources &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Pods, Deployments, etc&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
vendor          &amp;lt;--- Here is where the installed packages/apps go, it can be seen as a dependencies folder.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s generate a &lt;em&gt;deployed-service&lt;/em&gt; and inspect it&amp;rsquo;s context:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ks generate deployed-service wordpress &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --image bitnami/wordpress:5.0.2 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --type ClusterIP

INFO Writing component at &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/k8s-examples/wordpress/components/wordpress.jsonnet&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
At the moment of this writing the latest version of Wordpress is 5.0.2, it&amp;rsquo;s always recommended to use static version numbers instead of tags like latest (because latest can not be latest).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how our component looks like:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;local env = std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__ksonnet/environments&amp;#34;&lt;/span&gt;);
local params = std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__ksonnet/params&amp;#34;&lt;/span&gt;).components.wordpress;
[
  {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Service&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: params.name
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ports&amp;#34;&lt;/span&gt;: [
        {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;: params.servicePort,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;targetPort&amp;#34;&lt;/span&gt;: params.containerPort
        }
      ],
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: params.name
      },
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: params.type
    }
  },
  {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apps/v1beta2&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deployment&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: params.name
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;replicas&amp;#34;&lt;/span&gt;: params.replicas,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;matchLabels&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: params.name
        },
      },
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;template&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: params.name
          }
        },
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;containers&amp;#34;&lt;/span&gt;: [
            {
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;: params.image,
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: params.name,
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ports&amp;#34;&lt;/span&gt;: [
                {
                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;containerPort&amp;#34;&lt;/span&gt;: params.containerPort
                }
              ]
            }
          ]
        }
      }
    }
  }
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
It&amp;rsquo;s just another template for some known resources, a &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34;&gt;service&lt;/a&gt; and a &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;deployment&lt;/a&gt; that&amp;rsquo;s where the name came from: &lt;em&gt;deployed-service&lt;/em&gt;, but where are those params coming from?&lt;/p&gt;

&lt;p&gt;If we run &lt;code&gt;ks show default&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
apiVersion: v1
kind: Service
metadata:
  labels:
    ksonnet.io/component: wordpress
  name: wordpress
spec:
  ports:
  - port: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
    targetPort: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
  selector:
    app: wordpress
  type: ClusterIP
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    ksonnet.io/component: wordpress
  name: wordpress
spec:
  replicas: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: bitnami/wordpress:&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0.2&lt;/span&gt;
        name: wordpress
        ports:
        - containerPort: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We will see what our package will generate in &lt;em&gt;YAML&lt;/em&gt; with some good defaults. And by default if you remember from the definitions a component needs a params file to fill the blanks in this case it is &lt;code&gt;components/params.libsonnet&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;{
  global: {
    // User-defined global parameters; accessible to all component and environments, Ex:
    // replicas: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
  },
  components: {
    // Component-level parameters, defined initially from &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ks prototype use ...&amp;#39;&lt;/span&gt;
    // Each object below should correspond to a component in the components/ directory
    wordpress: {
      containerPort: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;,
      image: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bitnami/wordpress:5.0.2&amp;#34;&lt;/span&gt;,
      name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wordpress&amp;#34;&lt;/span&gt;,
      replicas: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      servicePort: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;,
      type: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ClusterIP&amp;#34;&lt;/span&gt;,
    },
  },
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
But that&amp;rsquo;s not enough to run wordpress is it?, No is not, we need a database with persistent storage for it to work properly, so we will need to generate and extend another &lt;em&gt;deployed-service&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The next step would be to create another component:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ks generate deployed-service mariadb &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --image bitnami/mariadb:10.1.37 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --type ClusterIP

INFO Writing component at &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/kainlite/Webs/k8s-examples/wordpress/components/mariadb.jsonnet&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The latest stable version of MariaDB 10.1 GA at the moment of this writting is 10.1.37.&lt;/p&gt;

&lt;p&gt;Then we will need to add a persistent volume and also tell Wordpress to use this MariaDB instance. How do we do that, we will need to modify a few files, like this (in order to re-use things I placed the mysql variables in the global section, for this example that will simplify things, but it might not be the best approach for a production environment):
The resulting &lt;code&gt;components/params.json&lt;/code&gt; will be:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;{
  global: {
    // User-defined global parameters; accessible to all component and environments, Ex:
    // replicas: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
    mariadbEmptyPassword: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;,
    mariadbUser: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mywordpressuser&amp;#34;&lt;/span&gt;,
    mariadbPassword: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mywordpresspassword&amp;#34;&lt;/span&gt;,
    mariadbDatabase: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bitnami_wordpress&amp;#34;&lt;/span&gt;,
  },
  components: {
    // Component-level parameters, defined initially from &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ks prototype use ...&amp;#39;&lt;/span&gt;
    // Each object below should correspond to a component in the components/ directory
    wordpress: {
      containerPort: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;,
      image: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bitnami/wordpress:5.0.2&amp;#34;&lt;/span&gt;,
      name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wordpress&amp;#34;&lt;/span&gt;,
      replicas: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      servicePort: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;,
      type: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ClusterIP&amp;#34;&lt;/span&gt;,
    },
    mariadb: {
      containerPort: &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;,
      image: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bitnami/mariadb:10.1.37&amp;#34;&lt;/span&gt;,
      name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mariadb&amp;#34;&lt;/span&gt;,
      replicas: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      servicePort: &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;,
      type: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ClusterIP&amp;#34;&lt;/span&gt;,
    },
  },
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The resulting &lt;code&gt;components/wordpress.jsonnet&lt;/code&gt; will be:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;local env = std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__ksonnet/environments&amp;#34;&lt;/span&gt;);
local params = std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__ksonnet/params&amp;#34;&lt;/span&gt;).components.wordpress;
[
  {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Service&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: params.name
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ports&amp;#34;&lt;/span&gt;: [
        {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;: params.servicePort,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;targetPort&amp;#34;&lt;/span&gt;: params.containerPort
        }
      ],
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: params.name
      },
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: params.type
    }
  },
  {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apps/v1beta2&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deployment&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: params.name
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;replicas&amp;#34;&lt;/span&gt;: params.replicas,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;matchLabels&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: params.name
        },
      },
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;template&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: params.name
          }
        },
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;containers&amp;#34;&lt;/span&gt;: [
            {
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;: params.image,
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: params.name,
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ports&amp;#34;&lt;/span&gt;: [
                {
                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;containerPort&amp;#34;&lt;/span&gt;: params.containerPort
                }
              ],
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;: [
                {
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WORDPRESS_DATABASE_USER&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: params.mariadbUser,
                },
                {
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WORDPRESS_DATABASE_PASSWORD&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: params.mariadbPassword,
                },
                {
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WORDPRESS_DATABASE_NAME&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: params.mariadbDatabase,
                },
                {
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WORDPRESS_HOST&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mariadb&amp;#34;&lt;/span&gt;,
                }
              ]
            }
          ]
        }
      }
    }
  }
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The only thing that changed here is &lt;code&gt;spec.containers.env&lt;/code&gt; which wasn&amp;rsquo;t present before.&lt;/p&gt;

&lt;p&gt;The resulting &lt;code&gt;components/mariadb.jsonnet&lt;/code&gt; will be:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;local env = std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__ksonnet/environments&amp;#34;&lt;/span&gt;);
local params = std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__ksonnet/params&amp;#34;&lt;/span&gt;).components.mariadb;
[
{
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Service&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: params.name
        },
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ports&amp;#34;&lt;/span&gt;: [
            {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;: params.servicePort,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;targetPort&amp;#34;&lt;/span&gt;: params.containerPort
            }
            ],
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: params.name
            },
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: params.type
        }
},
{
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apps/v1beta2&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deployment&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: params.name
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;replicas&amp;#34;&lt;/span&gt;: params.replicas,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selector&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;matchLabels&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: params.name
            },
        },
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;template&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: params.name
                }
            },
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;containers&amp;#34;&lt;/span&gt;: [
                {
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;: params.image,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: params.name,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ports&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;containerPort&amp;#34;&lt;/span&gt;: params.containerPort
                    },
                    ],
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ALLOW_EMPTY_PASSWORD&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: params.mariadbEmptyPassword,
                    },
                    {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MARIADB_USER&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: params.mariadbUser,
                    },
                    {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MARIADB_PASSWORD&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: params.mariadbPassword,
                    },
                    {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MARIADB_ROOT_PASSWORD&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: params.mariadbPassword,
                    },
                    {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MARIADB_DATABASE&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: params.mariadbDatabase,
                    },
                    ],
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;volumeMounts&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mountPath&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/lib/mysql&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mariadb&amp;#34;&lt;/span&gt;
                    }
                    ]
                }
                ],
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;volumes&amp;#34;&lt;/span&gt;: [
                {
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mariadb&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hostPath&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/docker/mariadb-data&amp;#34;&lt;/span&gt;
                    }
                }
                ]
            }
        }
    }
}
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
I know, I know, that is a lot of JSON, I trust you have a decent scroll :).&lt;/p&gt;

&lt;p&gt;The only things that changed here are &lt;code&gt;spec.containers.env&lt;/code&gt;, &lt;code&gt;spec.containers.volumeMount&lt;/code&gt; and &lt;code&gt;spec.volumes&lt;/code&gt; which weren&amp;rsquo;t present before, that&amp;rsquo;s all you need to make wordpress work with mariadb.&lt;/p&gt;

&lt;p&gt;This post only scratched the surface of what Ksonnet and Jsonnet can do, in another post I will describe more advances features with less &lt;em&gt;JSON&lt;/em&gt; / &lt;em&gt;YAML&lt;/em&gt;. There are a lot of things that can be improved and we will cover those things in the next post, if you want to see all the source code for this post go &lt;a href=&#34;https://github.com/kainlite/ksonnet-wordpress-example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s clean up &lt;code&gt;ks delete default&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;INFO Deleting services mariadb
INFO Deleting deployments mariadb
INFO Deleting services wordpress
INFO Deleting deployments wordpress&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;If you want to check the wordpress installation via browser you can do &lt;code&gt;minikube proxy&lt;/code&gt; and then look up the following URL: &lt;a href=&#34;http://localhost:8001/api/v1/namespaces/default/services/wordpress/proxy/&#34;&gt;Wordpress&lt;/a&gt; (I&amp;rsquo;m using the default namespace here and the service name is wordpress, if you use ingress you don&amp;rsquo;t need to do this step)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not aware if Ksonnet supports releases and rollbacks like Helm, but it seems it could be emulated using git tags and just some git hooks.&lt;/p&gt;

&lt;p&gt;If everything goes well, you should see something like this in the logs:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl logs -f wordpress-5b4d6bd47c-bdtmw

Welcome to the Bitnami wordpress container
Subscribe to project updates by watching https://github.com/bitnami/bitnami-docker-wordpress
Submit issues and feature requests at https://github.com/bitnami/bitnami-docker-wordpress/issues

nami    INFO  Initializing apache
apache  INFO  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; Patching httpoxy...
apache  INFO  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; Configuring dummy certificates...
nami    INFO  apache successfully initialized
nami    INFO  Initializing php
nami    INFO  php successfully initialized
nami    INFO  Initializing mysql-client
nami    INFO  mysql-client successfully initialized
nami    INFO  Initializing libphp
nami    INFO  libphp successfully initialized
nami    INFO  Initializing wordpress
mysql-c INFO  Trying to connect to MySQL server
mysql-c INFO  Found MySQL server listening at mariadb:3306
mysql-c INFO  MySQL server listening and working at mariadb:3306
wordpre INFO
wordpre INFO  &lt;span style=&#34;color:#75715e&#34;&gt;########################################################################&lt;/span&gt;
wordpre INFO   Installation parameters &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; wordpress:
wordpre INFO     First Name: FirstName
wordpre INFO     Last Name: LastName
wordpre INFO     Username: user
wordpre INFO     Password: **********
wordpre INFO     Email: user@example.com
wordpre INFO     Blog Name: User&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s Blog!
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wordpre INFO     Table Prefix: wp_
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wordpre INFO   (Passwords are not shown for security reasons)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wordpre INFO  ########################################################################
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wordpre INFO
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nami    INFO  wordpress successfully initialized
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;INFO  ==&amp;gt; Starting wordpress...
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[Thu Dec 27 04:30:59.684053 2018] [ssl:warn] [pid 116] AH01909: localhost:443:0 server certificate does NOT include an ID which matches the server name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[Thu Dec 27 04:30:59.684690 2018] [ssl:warn] [pid 116] AH01909: localhost:443:0 server certificate does NOT include an ID which matches the server name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[Thu Dec 27 04:30:59.738783 2018] [ssl:warn] [pid 116] AH01909: localhost:443:0 server certificate does NOT include an ID which matches the server name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[Thu Dec 27 04:30:59.739701 2018] [ssl:warn] [pid 116] AH01909: localhost:443:0 server certificate does NOT include an ID which matches the server name
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[Thu Dec 27 04:30:59.765798 2018] [mpm_prefork:notice] [pid 116] AH00163: Apache/2.4.37 (Unix) OpenSSL/1.1.0j PHP/7.2.13 configured -- resuming normal operations
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[Thu Dec 27 04:30:59.765874 2018] [core:notice] [pid 116] AH00094: Command line: &amp;#39;&lt;/span&gt;httpd -f /bitnami/apache/conf/httpd.conf -D FOREGROUND&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.17.0.1 - - &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;/Dec/2018:04:31:00 +0000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET / HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3718&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.17.0.1 - - &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;/Dec/2018:04:31:01 +0000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET /wp-includes/js/wp-embed.min.js?ver=5.0.2 HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;753&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.17.0.1 - - &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;/Dec/2018:04:31:01 +0000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET /wp-includes/css/dist/block-library/theme.min.css?ver=5.0.2 HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;452&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.17.0.1 - - &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;/Dec/2018:04:31:01 +0000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET /wp-includes/css/dist/block-library/style.min.css?ver=5.0.2 HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4281&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.17.0.1 - - &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;/Dec/2018:04:31:01 +0000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET /wp-content/themes/twentynineteen/style.css?ver=1.1 HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19371&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.17.0.1 - - &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;/Dec/2018:04:31:01 +0000&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET /wp-content/themes/twentynineteen/print.css?ver=1.1 HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1230&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And that folks is all I have for now, be sure to check out the &lt;a href=&#34;https://ksonnet.io/docs/&#34;&gt;Ksonnet official documentation&lt;/a&gt; and &lt;code&gt;ks help&lt;/code&gt; to know more about what ksonnet can do to help you deploy your applications to any kubernetes cluster.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying my apps with Helm</title>
      <link>https://techsquad.rocks/blog/deploying_my_apps_with_helm/</link>
      <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/deploying_my_apps_with_helm/</guid>
      <tags>
      
        <tag>helm</tag>
      
        <tag>deployment-tools</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;deploying-my-apps-with-helm&#34;&gt;&lt;strong&gt;Deploying my apps with Helm&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you are already familiar with &lt;a href=&#34;https://helm.sh/&#34;&gt;Helm&lt;/a&gt;, and the different types of kubernetes workloads / resource types you might be wondering how to install apps directly to kubernetes, yes, you don&amp;rsquo;t have to re-invent the wheel for your mysql installation, or your postgres, or nginx, jenkins, You name it. Helm solves that problem with &lt;a href=&#34;https://github.com/helm/charts&#34;&gt;Charts&lt;/a&gt;, this list has the official charts maintained by the community, where the folder incubator may refer to charts that are still not compliant with the &lt;a href=&#34;https://github.com/helm/charts/blob/master/CONTRIBUTING.md#technical-requirements&#34;&gt;technical requirements&lt;/a&gt; but probably usable and the folder stable is for &lt;em&gt;graduated&lt;/em&gt; charts. This is not the only source of charts as you can imagine, You can use any source for your charts, even just the &lt;a href=&#34;https://docs.helm.sh/using_helm/#helm-install-installing-a-package&#34;&gt;tgz&lt;/a&gt; files, as we will see in this post.&lt;/p&gt;

&lt;p&gt;How do I search for charts?:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm search wordpress
NAME                    CHART VERSION   APP VERSION     DESCRIPTION
stable/wordpress        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;.3.0           &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;.9.8           Web publishing platform &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; building blogs and websites.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that I&amp;rsquo;m not a fan of Wordpress or PHP itself, but it seems like the most common example everywhere. As we can see here it says stable/wordpress so we know that we&amp;rsquo;re using the official repo in the folder stable, but what if we don&amp;rsquo;t want that chart, but someone else provides one with more features or something that You like better. Let&amp;rsquo;s use the one from &lt;a href=&#34;https://bitnami.com/stack/wordpress/helm&#34;&gt;Bitnami&lt;/a&gt;, so if we check their page you can select different kind of deployments but for it to work we need to add another external repo:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm repo add bitnami https://charts.bitnami.com/bitnami&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
So if we search again we will now see two options (at the moment of this writing, the latest version is actually 5.0.2):
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm search wordpress
NAME                    CHART VERSION   APP VERSION     DESCRIPTION
bitnami/wordpress       &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;.0.2           &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;.0.2           Web publishing platform &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; building blogs and websites.
stable/wordpress        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;.3.0           &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;.9.8           Web publishing platform &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; building blogs and websites.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Let&amp;rsquo;s check the &lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/wordpress&#34;&gt;documentation&lt;/a&gt; of the chart to create our &lt;code&gt;values.yaml&lt;/code&gt; file, note that in this example the stable wordpress chart it&amp;rsquo;s also maintained by Bitnami, so they have the same configuration :), this won&amp;rsquo;t always be the case but it simplifies things for us.&lt;/p&gt;

&lt;p&gt;Our example &lt;code&gt;values.yaml&lt;/code&gt; will look like:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;wordpressBlogName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Testing Helm Charts&amp;#34;&lt;/span&gt;
persistence:
  size: 1Gi
ingress:
  enabled: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We will only change the blog name by default, the persistent volume size and also enable &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;ingress&lt;/a&gt; (Our app should be available through &lt;code&gt;wordpress.local&lt;/code&gt; inside the cluster), if you are using minikube be sure to enable the &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;ingress&lt;/a&gt; addon.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ minikube addons enable ingress
ingress was successfully enabled&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;We can then install &lt;code&gt;stable/wordpress&lt;/code&gt; or &lt;code&gt;bitnami/wordpress&lt;/code&gt;, we will follow up with the one from Bitnami repo.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm install bitnami/wordpress &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--set image.repository&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bitnami/wordpress &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--set image.tag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;.0.2 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-f values.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As it&amp;rsquo;s a common good practice to use specific versions we will do it here, it&amp;rsquo;s better to do it this way because you can easily move between known versions and also avoid unknown states, this can happen by misunderstanding what latest means, &lt;a href=&#34;https://medium.com/@mccode/the-misunderstood-docker-tag-latest-af3babfd6375&#34;&gt;follow the example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should see something like:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME:   plucking-condor
LAST DEPLOYED: Mon Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:06:38 &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1/Pod&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;related&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
NAME                                        READY  STATUS             RESTARTS  AGE
plucking-condor-wordpress-84845db8b5-hkqhc  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;/1    ContainerCreating  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;         0s
plucking-condor-mariadb-0                   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;/1    Pending            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;         0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1/Secret

NAME                       AGE
plucking-condor-mariadb    0s
plucking-condor-wordpress  0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1/ConfigMap
plucking-condor-mariadb        0s
plucking-condor-mariadb-tests  0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1/PersistentVolumeClaim
plucking-condor-wordpress  0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1/Service
plucking-condor-mariadb    0s
plucking-condor-wordpress  0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1beta1/Deployment
plucking-condor-wordpress  0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1beta1/StatefulSet
plucking-condor-mariadb  0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1beta1/Ingress
wordpress.local-plucking-condor  0s


NOTES:
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;. Get the WordPress URL:

  You should be able to access your new WordPress installation through
  http://wordpress.local/admin

&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;. Login with the following credentials to see your blog

  echo Username: user
  echo Password: &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl get secret --namespace default plucking-condor-wordpress -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{.data.wordpress-password}&amp;#34;&lt;/span&gt; | base64 --decode&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Depending on the cluster provider or installation itself, you might need to replace the &lt;code&gt;persistence.storageClass&lt;/code&gt; to match what your cluster has, note that in the values file is represented like JSON with dot notation but in your &lt;code&gt;values.yaml&lt;/code&gt; you need to stick to YAML format and indent &lt;code&gt;storageClass&lt;/code&gt; under persistence as usual, the kubernetes API parses and uses JSON but YAML seems more human friendly.&lt;/p&gt;

&lt;p&gt;At this point we should a working wordpress installation, also move between versions, but be aware that the application is in charge of the database schema and updating it to match what the new version needs, this can also be troublesome rolling back or when downgrading, so if you use persistent data &lt;em&gt;ALWAYS&lt;/em&gt; have a working backup, because when things go south, you will want to quickly go back to a known state, also note that I said &amp;ldquo;working backup&amp;rdquo;, yes, test that the backup works and that You can restore it somewhere else before doing anything destructive or that can has repercussions, this will bring you peace of mind and better ways to organize yourself while upgrading, etc.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s check that all resources are indeed working and that we can use our recently installed app.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get all
NAME                                             READY     STATUS        RESTARTS   AGE
pod/plucking-condor-mariadb-0                    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          12m
pod/plucking-condor-wordpress-84845db8b5-hkqhc   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          12m

NAME                                TYPE           CLUSTER-IP       EXTERNAL-IP      PORT&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                      AGE
service/kubernetes                  ClusterIP      &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.96.0.1        &amp;lt;none&amp;gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;/TCP                      37h
service/plucking-condor-mariadb     ClusterIP      &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.106.219.59    &amp;lt;none&amp;gt;           &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;/TCP                     12m
service/plucking-condor-wordpress   LoadBalancer   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.100.239.163   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.100.239.163   &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;:31764/TCP,443:32308/TCP   12m

NAME                                        DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/plucking-condor-wordpress   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           12m

NAME                                                   DESIRED   CURRENT   READY     AGE
replicaset.apps/plucking-condor-wordpress-84845db8b5   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         12m

NAME                                       DESIRED   CURRENT   AGE
statefulset.apps/plucking-condor-mariadb   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         12m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can deploy it to a custom namespace (In this case I deployed it to the default namespace), the only change for that would be to set the parameter &lt;code&gt;--namespace&lt;/code&gt; in the &lt;code&gt;helm install&lt;/code&gt; line.&lt;/p&gt;

&lt;p&gt;If you use minikube then ingress will expose a nodeport that we can find using &lt;code&gt;minikube service list&lt;/code&gt; then using the browser or curl to navigate our freshly installed wordpress.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; $ minikube service list
|-------------|---------------------------|--------------------------------|
|  NAMESPACE  |           NAME            |              URL               |
|-------------|---------------------------|--------------------------------|
| default     | kubernetes                | No node port                   |
| default     | plucking-condor-mariadb   | No node port                   |
| default     | plucking-condor-wordpress | http://192.168.99.100:31764    |
|             |                           | http://192.168.99.100:32308    |
| kube-system | default-http-backend      | http://192.168.99.100:30001    |
| kube-system | kube-dns                  | No node port                   |
| kube-system | kubernetes-dashboard      | No node port                   |
| kube-system | tiller-deploy             | No node port                   |
|-------------|---------------------------|--------------------------------|&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
In the cloud or on premises this will indeed be different and you should have a publicly available installation using your own domain name (In this case http is at: &lt;a href=&#34;http://192.168.99.100:31764&#34;&gt;http://192.168.99.100:31764&lt;/a&gt; and https at: &lt;a href=&#34;http://192.168.99.100:32308&#34;&gt;http://192.168.99.100:32308&lt;/a&gt;, and &lt;a href=&#34;http://192.168.99.100:30001&#34;&gt;http://192.168.99.100:30001&lt;/a&gt; is the default backend for the ingress controller), your ips can be different but the basics are the same.&lt;/p&gt;

&lt;p&gt;Sample screenshot:&lt;/p&gt;

&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/wordpress-example.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;


&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;As long as we have the &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/&#34;&gt;persistent volume&lt;/a&gt; our data should be preserved in this case the PV is used for tha database, but we could add another volume to preserve images, etc.&lt;/p&gt;

&lt;p&gt;Clean everything up:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm del --purge plucking-condor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all I have for now, I will be adding more content next week.&lt;/p&gt;

&lt;h3 id=&#34;don-t-repeat-yourself&#34;&gt;Don&amp;rsquo;t Repeat Yourself&lt;/h3&gt;

&lt;p&gt;DRY is a good design goal and part of the art of a good template is knowing when to add a new template and when to update or use an existing one. While helm and go helps with that, there is no perfect tool so we will explore other options in the following posts, explore what the community provides and what seems like a suitable tool for you. Happy Helming!.&lt;/p&gt;

&lt;h3 id=&#34;upcoming-topics&#34;&gt;Upcoming topics&lt;/h3&gt;

&lt;p&gt;The following posts will be about package managers, development deployment tools, etc. It&amp;rsquo;s hard to put all the tools in a category, but they are trying to solve similar problems in different ways, and we will be exploring the ones that seem more promising to me, if you would like me to cover any other tool/project/whatever, just send me a message :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting started with Ksonnet and friends.&lt;/li&gt;
&lt;li&gt;Getting started with Skaffold.&lt;/li&gt;
&lt;li&gt;Getting started with Gitkube.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Helm</title>
      <link>https://techsquad.rocks/blog/getting_started_with_helm/</link>
      <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/getting_started_with_helm/</guid>
      <tags>
      
        <tag>helm</tag>
      
        <tag>deployment-tools</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This tutorial will show you how to create a simple chart and also how to deploy it to kubernetes using &lt;a href=&#34;https://helm.sh/&#34;&gt;Helm&lt;/a&gt;, in the examples I will be using &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube&#34;&gt;minikube&lt;/a&gt; or you can &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;check out this repo&lt;/a&gt; that has a good overview of minikube, once installed and started (&lt;code&gt;minikube start&lt;/code&gt;) that command will download and configure the local environment, you can follow with the following example:&lt;/p&gt;

&lt;p&gt;Create the chart:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm create hello-world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Always use valid DNS names if you are going to have services, otherwise you will have issues later on.&lt;/p&gt;

&lt;p&gt;Inspect the contents, as you will notice every resource is just a kubernetes resource with some placeholders and basic logic to get something more reusable:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cd hello-world

charts       &amp;lt;--- Dependencies, charts that your chart depends on.
Chart.yaml   &amp;lt;--- Metadata mostly, defines the version of your chart, etc.
templates    &amp;lt;--- Here is where the magic happens.
values.yaml  &amp;lt;--- Default values file &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;this is used to replace in the templates at runtime&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note: the following link explains the basics of &lt;a href=&#34;https://docs.helm.sh/developing_charts/#managing-dependencies-manually-via-the-charts-directory&#34;&gt;dependencies&lt;/a&gt;, your chart can have as many dependencies as you need, the only thing that you need to do is add or install the other charts as dependencies.&lt;/p&gt;

&lt;p&gt;The file &lt;code&gt;values.yaml&lt;/code&gt; by default will look like the following snippet:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;replicaCount: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

image:
  repository: nginx
  tag: stable
  pullPolicy: IfNotPresent

nameOverride: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
fullnameOverride: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

service:
  type: ClusterIP
  port: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;

ingress:
  enabled: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
  annotations: {}
    &lt;span style=&#34;color:#75715e&#34;&gt;# kubernetes.io/ingress.class: nginx&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# kubernetes.io/tls-acme: &amp;#34;true&amp;#34;&lt;/span&gt;
  path: /
  hosts:
    - chart-example.local
  tls: []
  &lt;span style=&#34;color:#75715e&#34;&gt;#  - secretName: chart-example-tls&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#    hosts:&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#      - chart-example.local&lt;/span&gt;

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The next step would be to check the &lt;code&gt;templates&lt;/code&gt; folder:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;deployment.yaml  &amp;lt;--- Standard kubernetes deployment with go templates variables.
_helpers.tpl     &amp;lt;--- This file defines some common variables.
ingress.yaml     &amp;lt;--- Ingress route, etc.
NOTES.txt        &amp;lt;--- Once deployed this file will display the details of our deployment, usually login data, how to connect, etc.
service.yaml     &amp;lt;--- The service that we will use internally and/or via ingress to reach our deployed service.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Go &lt;a href=&#34;https://blog.gopheracademy.com/advent-2017/using-go-templates/&#34;&gt;templates&lt;/a&gt; basics, if you need a refresher or a crash course in go templates, also always be sure to check Helm&amp;rsquo;s own &lt;a href=&#34;https://github.com/helm/helm/blob/master/docs/chart_template_guide/functions_and_pipelines.md&#34;&gt;documentation&lt;/a&gt; and also some &lt;a href=&#34;https://github.com/helm/helm/blob/master/docs/charts_tips_and_tricks.md&#34;&gt;tips and tricks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check the &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;deployment&lt;/a&gt; file:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.fullname&amp;#34;&lt;/span&gt; . }}
  labels:
    app.kubernetes.io/name: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.name&amp;#34;&lt;/span&gt; . }}
    helm.sh/chart: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.chart&amp;#34;&lt;/span&gt; . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.name&amp;#34;&lt;/span&gt; . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.name&amp;#34;&lt;/span&gt; . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Values.image.repository }}:{{ .Values.image.tag }}&amp;#34;&lt;/span&gt;
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
{{ toYaml .Values.resources | indent &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; }}
    {{- end }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As you can see everything will get replaced by what you define in the &lt;code&gt;values.yaml&lt;/code&gt; file and everything is under &lt;code&gt;.Values&lt;/code&gt; unless you define a local variable or some other variable using helpers for example.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check the &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34;&gt;service&lt;/a&gt; file:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion: v1
kind: Service
metadata:
  name: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.fullname&amp;#34;&lt;/span&gt; . }}
  labels:
    app.kubernetes.io/name: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.name&amp;#34;&lt;/span&gt; . }}
    helm.sh/chart: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.chart&amp;#34;&lt;/span&gt; . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.name&amp;#34;&lt;/span&gt; . }}
    app.kubernetes.io/instance: {{ .Release.Name }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check the &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;ingress&lt;/a&gt; file:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;{{- if .Values.ingress.enabled -}}
{{- $fullName := include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.fullname&amp;#34;&lt;/span&gt; . -}}
{{- $ingressPath := .Values.ingress.path -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    app.kubernetes.io/name: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.name&amp;#34;&lt;/span&gt; . }}
    helm.sh/chart: {{ include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world.chart&amp;#34;&lt;/span&gt; . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . | quote }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . | quote }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $fullName }}
              servicePort: http
  {{- end }}
{{- end }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The ingress file is one of the most interesting ones in my humble opinion because it has a if else example and also local variables (&lt;code&gt;$fullName&lt;/code&gt; for example), also iterates over a possible slice of dns record names (hosts), and the same if you have certs for them (a good way to get let&amp;rsquo;s encrypt certificates automatically is using cert-manager, in the next post I will expand on this example adding a basic web app with mysql and ssl/tls).&lt;/p&gt;

&lt;p&gt;After checking that everything is up to our needs the only thing missing is to finally deploy it to kubernetes (But first let&amp;rsquo;s install tiller):
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm init
$HELM_HOME has been configured at /home/gabriel/.helm.

Tiller &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;the Helm server-side component&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; has been installed into your Kubernetes Cluster.

Please note: by default, Tiller is deployed with an insecure &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;allow unauthenticated users&amp;#39;&lt;/span&gt; policy.
To prevent this, run &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;helm init&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; with the --tiller-tls-verify flag.
For more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation
Happy Helming!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that many of the complains that Helm receives are because of the admin-y capabilities that Tiller has. A good note on the security issues that Tiller can suffer and some possible mitigation alternatives can be found on the &lt;a href=&#34;https://engineering.bitnami.com/articles/helm-security.html&#34;&gt;Bitnami page&lt;/a&gt;, this mostly applies to multi-tenant clusters. And also be sure to check &lt;a href=&#34;https://docs.helm.sh/using_helm/#securing-your-helm-installation&#34;&gt;Securing Helm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deploy our chart:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm install --name my-nginx -f values.yaml .
NAME:   my-nginx
LAST DEPLOYED: Sun Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;:30:11 &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1/Service
NAME                  AGE
my-nginx-hello-world  0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1beta2/Deployment
my-nginx-hello-world  0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1/Pod&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;related&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

NAME                                   READY  STATUS   RESTARTS  AGE
my-nginx-hello-world-6f948db8d5-s76zl  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;/1    Pending  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;         0s

NOTES:
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;. Get the application URL by running these commands:
  export POD_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl get pods --namespace default -l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app.kubernetes.io/name=hello-world,app.kubernetes.io/instance=my-nginx&amp;#34;&lt;/span&gt; -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{.items[0].metadata.name}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visit http://127.0.0.1:8080 to use your application&amp;#34;&lt;/span&gt;
  kubectl port-forward $POD_NAME &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;:80&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Our deployment was successful and we can see that our pod is waiting to be scheduled.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check that our service is there:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get services
NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;   AGE
kubernetes             ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.96.0.1       &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;/TCP   1h
my-nginx-hello-world   ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.111.222.70   &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;/TCP    5m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And now we can test that everything is okay by running another pod in interactive mode, for example:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl run -i --tty alpine --image&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;alpine -- sh
If you don&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t see a command prompt, try pressing enter.

/ &lt;span style=&#34;color:#75715e&#34;&gt;# apk add curl&lt;/span&gt;
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing ca-certificates &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20171114&lt;/span&gt;-r3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing nghttp2-libs &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.32.0-r0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;/5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing libssh2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.8.0-r3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;/5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing libcurl &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;.61.1-r1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;/5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Installing curl &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;.61.1-r1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Executing busybox-1.28.4-r2.trigger
Executing ca-certificates-20171114-r3.trigger
OK: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; MiB in &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; packages

/ &lt;span style=&#34;color:#75715e&#34;&gt;# curl -v my-nginx-hello-world&lt;/span&gt;
* Rebuilt URL to: my-nginx-hello-world/
*   Trying &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.111.222.70...
* TCP_NODELAY set
* Connected to my-nginx-hello-world &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.111.222.70&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; port &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#0)&lt;/span&gt;
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: my-nginx-hello-world
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; OK
&amp;lt; Server: nginx/1.14.2
&amp;lt; Date: Sun, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;:45:31 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: &lt;span style=&#34;color:#ae81ff&#34;&gt;612&lt;/span&gt;
&amp;lt; Last-Modified: Tue, &lt;span style=&#34;color:#ae81ff&#34;&gt;04&lt;/span&gt; Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:44:49 GMT
&amp;lt; Connection: keep-alive
&amp;lt; ETag: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5c0692e1-264&amp;#34;&lt;/span&gt;
&amp;lt; Accept-Ranges: bytes
&amp;lt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
    body &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        width: 35em;
        margin: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://nginx.org/&amp;#34;&lt;/span&gt;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://nginx.com/&amp;#34;&lt;/span&gt;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
* Connection &lt;span style=&#34;color:#75715e&#34;&gt;#0 to host my-nginx-hello-world left intact&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
And voila we see our nginx deployed there and accessible via service name to our other pods (this is fantastic for microservices).&lt;/p&gt;

&lt;p&gt;Our current deployment can be checked like this:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm ls
NAME            REVISION        UPDATED                         STATUS          CHART                   APP VERSION     NAMESPACE
my-nginx        &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;               Sun Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;:30:11 &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;        DEPLOYED        hello-world-0.1.0       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.0             default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The last example would be to upgrade our deployment, lets change the &lt;code&gt;tag&lt;/code&gt; in the &lt;code&gt;values.yaml&lt;/code&gt; file from &lt;code&gt;stable&lt;/code&gt; to &lt;code&gt;mainline&lt;/code&gt; and update also the metadata file (&lt;code&gt;Chart.yaml&lt;/code&gt;) to let Helm know that this is a new version of our chart.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; $ helm upgrade my-nginx . -f values.yaml
Release &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my-nginx&amp;#34;&lt;/span&gt; has been upgraded. Happy Helming!
LAST DEPLOYED: Sun Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;:55:22 &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1/Pod&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;related&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
NAME                                   READY  STATUS             RESTARTS  AGE
my-nginx-hello-world-6f948db8d5-s76zl  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1    Running            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;         25m
my-nginx-hello-world-c5cdcc95c-shgc6   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;/1    ContainerCreating  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;         0s

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1/Service

NAME                  AGE
my-nginx-hello-world  25m

&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; v1beta2/Deployment
my-nginx-hello-world  25m


NOTES:
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;. Get the application URL by running these commands:
  export POD_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl get pods --namespace default -l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app.kubernetes.io/name=hello-world,app.kubernetes.io/instance=my-nginx&amp;#34;&lt;/span&gt; -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{.items[0].metadata.name}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visit http://127.0.0.1:8080 to use your application&amp;#34;&lt;/span&gt;
  kubectl port-forward $POD_NAME &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;:80&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that I always specify the -f values.yaml just for explicitness.&lt;/p&gt;

&lt;p&gt;It seems that our upgrade went well, let&amp;rsquo;s see what Helm sees
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm ls
NAME            REVISION        UPDATED                         STATUS          CHART                   APP VERSION     NAMESPACE
my-nginx        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;               Sun Dec &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;:55:22 &lt;span style=&#34;color:#ae81ff&#34;&gt;2018&lt;/span&gt;        DEPLOYED        hello-world-0.1.1       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;.0             default&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;But before we go let&amp;rsquo;s validate that it did deployed the nginx version that we wanted to have:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl exec my-nginx-hello-world-c5cdcc95c-shgc6 -- /usr/sbin/nginx -v
nginx version: nginx/1.15.7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
At the moment of this writing mainline is 1.15.7, we could rollback to the previous version by doing:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm rollback my-nginx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
Rollback was a success! Happy Helming!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Basically this command needs a deployment name &lt;code&gt;my-nginx&lt;/code&gt; and the revision number to rollback to in this case &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check the versions again:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl exec my-nginx-hello-world-6f948db8d5-bsml2 -- /usr/sbin/nginx -v
nginx version: nginx/1.14.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s clean up:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm del --purge my-nginx
release &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my-nginx&amp;#34;&lt;/span&gt; deleted&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If you need to see what will be sent to the kubernetes API then you can use the following command (sometimes it&amp;rsquo;s really useful for debugging or to inject a sidecar using pipes):
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm template . -name my-nginx -f values.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# Source: hello-world/templates/service.yaml&lt;/span&gt;
apiVersion: v1
kind: Service
metadata:
  name: ame-hello-world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And that folks is all I have for now, be sure to check own &lt;a href=&#34;https://docs.helm.sh/&#34;&gt;Helm Documentation&lt;/a&gt; and &lt;code&gt;helm help&lt;/code&gt; to know more about what helm can do to help you deploy your applications to any kubernetes cluster.&lt;/p&gt;

&lt;h3 id=&#34;don-t-repeat-yourself&#34;&gt;Don&amp;rsquo;t Repeat Yourself&lt;/h3&gt;

&lt;p&gt;DRY is a good design goal and part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&amp;rsquo;re figuring that out, accept that you&amp;rsquo;ll be doing some refactoring. Helm and go makes that easy and fast.&lt;/p&gt;

&lt;h3 id=&#34;upcoming-topics&#34;&gt;Upcoming topics&lt;/h3&gt;

&lt;p&gt;The following posts will be about package managers, development deployment tools, etc. It&amp;rsquo;s hard to put all the tools in a category, but they are trying to solve similar problems in different ways, and we will be exploring the ones that seem more promising to me, if you would like me to cover any other tool/project/whatever, just send me a message :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techsquad.rocks/blog/deploying_my_apps_with_helm/&#34;&gt;Expand on helm, search and install community charts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techsquad.rocks/blog/getting_started_with_ksonnet/&#34;&gt;Getting started with Ksonnet and friends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techsquad.rocks/blog/getting_started_with_skaffold/&#34;&gt;Getting started with Skaffold&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techsquad.rocks/blog/getting_started_with_gitkube/&#34;&gt;Getting started with Gitkube&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
