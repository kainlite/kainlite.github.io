<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</title>
    <link>https://techsquad.rocks/categories/kubernetes/</link>
    <description>Recent content in Kubernetes on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 29 Apr 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://techsquad.rocks/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Actually using Vault on Kubernetes</title>
      <link>https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/</guid>
      <tags>
      
        <tag>kubernetes</tag>
      
        <tag>vault</tag>
      
        <tag>linux</tag>
      
        <tag>security</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In the previous article we configured Vault with Consul on our cluster, now it&amp;rsquo;s time to go ahead and use it to provision secrets to our pods/applications. If you don&amp;rsquo;t remember about it or don&amp;rsquo;t have your Vault already configured you can go to &lt;a href=&#34;https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/&#34;&gt;Getting started with HashiCorp Vault on Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article we will actually create an example using mutual TLS and provision some secrets to our app, You can find the files used here in &lt;a href=&#34;https://github.com/kainlite/vault-kubernetes&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;creating-a-cert-for-our-new-client&#34;&gt;&lt;strong&gt;Creating a cert for our new client&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As we see here we need to enable kv version 1 on &lt;code&gt;/secret&lt;/code&gt; for this to work, then we just create a secret and store it as a kubernetes secret for myapp, note that the CA was created in the previous article and we rely on these certificates so we can keep building on that.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/2989cf05404896f7b65ac400068ac903.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;service-account-for-kubernetes&#34;&gt;&lt;strong&gt;Service account for kubernetes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In Kubernetes, a service account provides an identity for processes that run in a Pod so that the processes can contact the API server.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/8440fe3654d36fb2055c7ceb894f167e.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;vault-policy&#34;&gt;&lt;strong&gt;Vault policy&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Then we need to set a read-only policy for our secrets, we don&amp;rsquo;t want or app to be able to write or rewrite secrets.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/aef3234eb43aa37f7cce5f20ecf7c757.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;kubernetes-configuration&#34;&gt;&lt;strong&gt;Kubernetes configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Set the environment variables to point to the running Minikube environment and enable the &lt;a href=&#34;https://www.vaultproject.io/docs/auth/kubernetes.html#configuration&#34;&gt;kubernetes authentication method&lt;/a&gt; and then validate it from a temporal Pod.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/a47d22781b177c483bfe706cc436f049.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;the-deployment-and-the-consul-template-configuration&#34;&gt;&lt;strong&gt;The deployment and the consul-template configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;If you check the volume mounts and the secrets we load the certificates we created initially and use them to fetch the secret from vault
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/0cc0e90b668c2fef4d2442e1b9eed03f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is where the magic happens so we&amp;rsquo;re able to fetch secrets (thanks to that role and the token that then will be stored there)
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/f977a689000a20c5163ce72cea0039f5.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And last but not least we create a file based in the template provided which our nginx container will render on the screen later, this is done using Consul Template.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/3dd851d97eba8222dd978a2e7ed067a9.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;test-it&#34;&gt;&lt;strong&gt;Test it!&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The last step would be to test all that, so after having deployed the files to kubernetes we should see something like this
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/269dd3f96ef2b5505a50513eef9ff94c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This post was heavily inspired by &lt;a href=&#34;https://learn.hashicorp.com/vault/identity-access-management/vault-agent-k8s&#34;&gt;this doc page&lt;/a&gt;, the main difference is that we have mutual TLS on, the only thing left would be to auto unseal our Vault, but we will left that for a future article or as an excercise for the reader.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with HashiCorp Vault on Kubernetes</title>
      <link>https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/</guid>
      <tags>
      
        <tag>kubernetes</tag>
      
        <tag>vault</tag>
      
        <tag>linux</tag>
      
        <tag>security</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Vault secures, stores, and tightly controls access to tokens, passwords, certificates, API keys, and other secrets in modern computing. What this means is that you can safely store all your App secrets in Vault without having to worry anymore how to store, provide, and use those secrets, we will see how to install it on a running kubernetes cluster and save and read a secret by our application, in this page we will be using Vault version 1.1.1, we will be using dynamic secrets, that means that each pod will have a different secret and that secret will expire once the pod is killed.&lt;/p&gt;

&lt;p&gt;Before you start you will need &lt;a href=&#34;https://www.consul.io/docs/install/index.html&#34;&gt;Consul&lt;/a&gt;, &lt;a href=&#34;https://www.vaultproject.io/docs/install/&#34;&gt;Vault&lt;/a&gt; client binaries and &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube/&#34;&gt;Minikube&lt;/a&gt; or any running cluster, you can find the files used here in &lt;a href=&#34;https://github.com/kainlite/vault-consul-tls&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;preparing-the-cluster&#34;&gt;&lt;strong&gt;Preparing the cluster&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s start minikube and validate that we can reach our cluster with &lt;code&gt;minikube start&lt;/code&gt; and then with &lt;code&gt;kubectl get nodes&lt;/code&gt;, also the dashboard can become handy you can invoke it like this &lt;code&gt;minikube dashboard&lt;/code&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/750ee3b20d03fe3e999844c1c80fcf3f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;creating-certificates-for-consul-and-vault&#34;&gt;&lt;strong&gt;Creating certificates for Consul and Vault&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Vault needs a backend to store data, this backend can be consul, etcd, postgres, and &lt;a href=&#34;https://www.vaultproject.io/docs/configuration/storage/index.html&#34;&gt;many more&lt;/a&gt;, so the first thing that we are going to do is create a certificate so consul and vault can speak to each other securely.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/f46c829de562750d0fb21ec25f8fa91b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;consul&#34;&gt;&lt;strong&gt;Consul&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The next steps would be to create an encryption key for the consul cluster and to create all the kubernetes resources associated with it
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/4f787ef0e5152eb14928a73b3e2b9d91.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;vault&#34;&gt;&lt;strong&gt;Vault&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Once we have Consul running starting vault should be straight forward, we need to create all kubernetes resources associated with it and then initialize and unseal the vault.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/dbe6cb3055b5c202bb3f65b7178e2f7c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see it takes a while to configure a Vault server but I really like the pattern that renders for the apps using it, in the next post we will see how to unlock it automatically with kubernetes and also how to mount the secrets automatically to our pods so our applications can use it :), this post was heavily inspired by &lt;a href=&#34;https://testdriven.io/blog/running-vault-and-consul-on-kubernetes/&#34;&gt;this one&lt;/a&gt; and &lt;a href=&#34;https://learn.hashicorp.com/consul/advanced/day-1-operations/certificates#configuring-agents&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From zero to hero with kops and AWS</title>
      <link>https://techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</guid>
      <tags>
      
        <tag>AWS</tag>
      
        <tag>kops</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In this article we will create a cluster from scratch with &lt;a href=&#34;https://github.com/kubernetes/kops&#34;&gt;kops&lt;/a&gt; (K8s installation, upgrades and management) in &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;, We will configure &lt;a href=&#34;https://github.com/kubernetes-sigs/aws-alb-ingress-controller&#34;&gt;aws-alb-ingress-controller&lt;/a&gt; (External traffic into our services/pods) and &lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns&#34;&gt;external dns&lt;/a&gt; (Update the records based in the ingress rules) and also learn a bit about awscli in the process.&lt;/p&gt;

&lt;p&gt;Basically we will have a fully functional cluster that will be able to handle public traffic in minutes, first we will install the cluster with kops, then we will enable the ingress controller and lastly external-dns, then we will deploy a basic app to test that everything works fine, SSL/TLS is out of the scope but it&amp;rsquo;s fairly easy to implement if you are using ACM.&lt;/p&gt;

&lt;p&gt;Just in case you don&amp;rsquo;t know this setup is not going to be free, cheap for sure because we will use small instances, etc, but not completely free, so before you dive in, be sure that you can spend a few bucks testing it out.&lt;/p&gt;

&lt;h3 id=&#34;kops&#34;&gt;&lt;strong&gt;Kops&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This is an awesome tool to setup and maintain your clusters, currently only compatible with AWS and GCE, other platforms are planned and some are also supported in alpha, we will be using AWS in this example, it requires kubectl so make sure you have it installed:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -LO https://github.com/kubernetes/kops/releases/download/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Export the credentials that we will be using to create the kops user and policies&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export AWS_ACCESS_KEY_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;XXXX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; export AWS_SECRET_ACCESS_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;XXXXX&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can do it this way or just use &lt;code&gt;aws configure&lt;/code&gt; and set a profile.&lt;/p&gt;

&lt;p&gt;The next thing that we need are IAM credentials for kops to work, you will need awscli configured and working with your AWS admin-like account most likely before proceeding:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create iam group&lt;/span&gt;
aws iam create-group --group-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Group&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupId&amp;#34;: &amp;#34;AGPAIABI3O4WYM46AIX44&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:group/kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:04:23Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops

&lt;span style=&#34;color:#75715e&#34;&gt;# Attach policies&lt;/span&gt;
aws iam create-user --user-name kops
aws iam add-user-to-group --user-name kops --group-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Group&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupId&amp;#34;: &amp;#34;AGPAIABI3O4WYM46AIX44&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:group/kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:04:23Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Create access key - save the output of this command.&lt;/span&gt;
aws iam create-access-key --user-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;AccessKey&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UserName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AccessKeyId&amp;#34;: &amp;#34;AKIAJE*********&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Status&amp;#34;: &amp;#34;Active&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;SecretAccessKey&amp;#34;: &amp;#34;zWJhfemER**************************&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:05:44Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The last command will output the access key and the secret key for the &lt;em&gt;kops&lt;/em&gt; user, save that information because we will use it from now on, note that we gave kops a lot of power with that user, so be careful with the keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional permissions to be able to create ALBs&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; kops-alb-policy.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Statement&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;ec2:Describe*&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;iam:CreateServiceLinkedRole&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;tag:GetResources&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;elasticloadbalancing:*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

aws iam create-policy --policy-name kops-alb-policy --policy-document file://kops-alb-policy.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Policy&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyName&amp;#34;: &amp;#34;kops-alb-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyId&amp;#34;: &amp;#34;ANPAIRIYZZZTCPJGNZZXS&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:policy/kops-alb-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultVersionId&amp;#34;: &amp;#34;v1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AttachmentCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PermissionsBoundaryUsageCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;IsAttachable&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T03:50:00Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UpdateDate&amp;#34;: &amp;#34;2019-01-18T03:50:00Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; kops-route53-policy.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Statement&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ChangeResourceRecordSets&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;arn:aws:route53:::hostedzone/*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ListHostedZones&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ListResourceRecordSets&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

aws iam create-policy --policy-name kops-route53-policy --policy-document file://kops-route53-policy.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Policy&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyName&amp;#34;: &amp;#34;kops-route53-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyId&amp;#34;: &amp;#34;ANPAIEWAGN62HBYC7QOS2&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:policy/kops-route53-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultVersionId&amp;#34;: &amp;#34;v1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AttachmentCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PermissionsBoundaryUsageCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;IsAttachable&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T03:15:37Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UpdateDate&amp;#34;: &amp;#34;2019-01-18T03:15:37Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that even we just created these kops policies for alb and route53 we cannot add them right now, we need to first create the cluster, you can skip them if you don&amp;rsquo;t plan on using these resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we will also export or set the cluster name and kops state store as environment variables&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k8s.techsquad.rocks
export KOPS_STATE_STORE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;techsquad-cluster-state-store&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We will be using these in a few places, so to not repeat ourselves let&amp;rsquo;s better have it as variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create the zone for the subdomain in Route53&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;uuidgen&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; aws route53 create-hosted-zone --name &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --caller-reference $ID | jq .DelegationSet.NameServers
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-848.awsdns-42.net&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-12.awsdns-01.com&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-1047.awsdns-02.org&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-1862.awsdns-40.co.uk&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As I&amp;rsquo;m already using this domain for the blog with github we can create a subdomain for it and add some NS records in our root zone for that subdomain, in this case k8s.techsquad.rocks. To make this easier I will show you how it should look like:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/kops-dns-subdomain.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

So with this change and our new zone in Route53 for the subdomain, we can freely manage it like if it was another domain, this means that everything that goes to *.k8s.techsquad.rocks will be handled by our Route53 zone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a bucket to store the cluster state&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api create-bucket &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --region us-east-1
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Location&amp;#34;: &amp;#34;/techsquad-cluster-state-store&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that bucket names are unique, so it&amp;rsquo;s always a good idea to prefix them with your domain name or something like that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set the versioning on, in case we need to rollback at some point&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-versioning --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;  --versioning-configuration Status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Enabled&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set encryption on for the bucket&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-encryption --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --server-side-encryption-configuration &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;Rules&amp;#34;:[{&amp;#34;ApplyServerSideEncryptionByDefault&amp;#34;:{&amp;#34;SSEAlgorithm&amp;#34;:&amp;#34;AES256&amp;#34;}}]}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And finally let&amp;rsquo;s create our cluster&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export KOPS_STATE_STORE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

kops create cluster &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --zones us-east-1a &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --networking calico &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --yes
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:06.449479   10314 create_cluster.go:1318] Using SSH public key: /home/kainlite/.ssh/id_rsa.pub&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:08.367862   10314 create_cluster.go:472] Inferred --cloud=aws from zone &amp;#34;us-east-1a&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:09.736030   10314 subnets.go:184] Assigned CIDR 172.20.32.0/19 to subnet us-east-1a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# W0117 23:14:18.049687   10314 firewall.go:249] Opening etcd port on masters for access from the nodes, for calico.  This is unsafe in untrusted environments.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:19.385541   10314 executor.go:91] Tasks: 0 done / 77 total; 34 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:21.779681   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-aggregator-ca&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:21.940026   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;ca&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:24.404810   10314 executor.go:91] Tasks: 34 done / 77 total; 24 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.548234   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;master&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.689470   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-aggregator&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.766563   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-scheduler&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.863562   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-controller-manager&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.955776   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubecfg&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.972837   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-proxy-client&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.973239   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kops&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.055466   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubelet&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.127778   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubelet-api&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.570516   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-proxy&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:29.503168   10314 executor.go:91] Tasks: 58 done / 77 total; 17 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:31.594404   10314 executor.go:91] Tasks: 75 done / 77 total; 2 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:33.297131   10314 executor.go:91] Tasks: 77 done / 77 total; 0 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:33.297168   10314 dns.go:153] Pre-creating DNS records&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:34.947302   10314 update_cluster.go:291] Exporting kubecfg for cluster&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kops has set your kubectl context to k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Cluster is starting.  It should be ready in a few minutes.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Suggestions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * validate cluster: kops validate cluster&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * list nodes: kubectl get nodes --show-labels&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * ssh to the master: ssh -i ~/.ssh/id_rsa admin@api.k8s.techsquad.rocks&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * the admin user is specific to Debian. If not using Debian please use the appropriate user based on your OS.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * read about installing addons at: https://github.com/kubernetes/kops/blob/master/docs/addons.md.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We set the KOPS_STATE_STORE to a valid S3 url for kops, and then created the cluster, this will set kubectl context to our new cluster, we might need to wait a few minutes before being able to use it, but before doing anything let&amp;rsquo;s validate that&amp;rsquo;s up and ready.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kops validate cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Using cluster from kubectl context: k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Validating cluster k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# INSTANCE GROUPS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# master-us-east-1a       Master  m3.medium       1       1       us-east-1a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# nodes                   Node    t2.medium       2       2       us-east-1a&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# NODE STATUS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                            ROLE    READY&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-39-123.ec2.internal   node    True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-52-65.ec2.internal    node    True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-61-51.ec2.internal    master  True&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Your cluster k8s.techsquad.rocks is ready&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The validation passed and we can see that our cluster is ready, it can take several minutes until the cluster is up and functional, in this case it took about 3-5 minutes.&lt;/p&gt;

&lt;p&gt;We will create an additional subnet to satisfy our ALB:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 create-subnet --vpc-id vpc-06e2e104ad785474c --cidr-block &lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.20.64.0/19 --availability-zone us-east-1b
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Subnet&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AvailabilityZone&amp;#34;: &amp;#34;us-east-1b&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AvailableIpAddressCount&amp;#34;: 8187,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CidrBlock&amp;#34;: &amp;#34;172.20.64.0/19&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultForAz&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;MapPublicIpOnLaunch&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;State&amp;#34;: &amp;#34;pending&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;SubnetId&amp;#34;: &amp;#34;subnet-017a5609ce6104e1b&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;VpcId&amp;#34;: &amp;#34;vpc-06e2e104ad785474c&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AssignIpv6AddressOnCreation&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Ipv6CidrBlockAssociationSet&amp;#34;: []&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;KubernetesCluster,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k8s.techsquad.rocks
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Name,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;us-east-1b.k8s.techsquad.rocks
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SubnetType,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Public
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes.io/cluster/k8s.techsquad.rocks,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;owned
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes.io/role/elb,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that we applied some required tags for the controller, and created an extra subnet, in a HA setup this would not be necessary since kops would create it for us but this is a small testing/dev cluster, so we will need to do it manually.&lt;/p&gt;

&lt;p&gt;And lastly a security group for our ALB:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 create-security-group --group-name WebApps --description &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default web security group&amp;#34;&lt;/span&gt;  --vpc-id vpc-06e2e104ad785474c
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;GroupId&amp;#34;: &amp;#34;sg-09f0b1233696e65ef&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws ec2 authorize-security-group-ingress --group-id sg-09f0b1233696e65ef --protocol tcp --port &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; --cidr &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id sg-057d2b0f6e288aa70 --protocol all --port &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; --source-group sg-09f0b1233696e65ef&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that this rule will open the port 80 to the world, you can add your ip or your VPN ips there if you want to restrict it, the second rule will allow the traffic from the load balancer to reach the nodes where our app is running.&lt;/p&gt;

&lt;h3 id=&#34;aws-alb-ingress-controller&#34;&gt;&lt;strong&gt;Aws-alb-ingress-controller&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We will use &lt;a href=&#34;https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/&#34;&gt;Aws ALB Ingress Controller&lt;/a&gt;, to serve our web traffic, this will create an manage an ALB based in our ingress rules.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/rbac-role.yaml

clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress-controller&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress-controller&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Download the manifest and then modify the cluster-name to &lt;code&gt;k8s.techsquad.rocks&lt;/code&gt; and a few other parameters, you can list the vpcs with &lt;code&gt;aws ec2 describe-vpcs&lt;/code&gt; it will have some kops tags, so it&amp;rsquo;s easy to identify.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -sS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/alb-ingress-controller.yaml&amp;#34;&lt;/span&gt; &amp;gt; alb-ingress-controller.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Or copy and paste the following lines:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; alb-ingress-controller.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Application Load Balancer (ALB) Ingress Controller Deployment Manifest.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# This manifest details sensible defaults for deploying an ALB Ingress Controller.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# GitHub: https://github.com/kubernetes-sigs/aws-alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: apps/v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # Namespace the ALB Ingress Controller should run in. Does not impact which
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # namespaces it&amp;#39;s able to resolve ingress resource for. For limiting ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # namespace scope, see --watch-namespace.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: kube-system
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  replicas: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  strategy:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    rollingUpdate:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      maxSurge: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      maxUnavailable: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    type: RollingUpdate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      creationTimestamp: null
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - -v=1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Limit the namespace where this ALB Ingress Controller deployment will
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # resolve ingress resources. If left commented, all namespaces are used.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - --watch-namespace=your-k8s-namespace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --feature-gates=waf=false
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Setting the ingress-class flag below ensures that only ingress resources with the
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # annotation kubernetes.io/ingress.class: &amp;#34;alb&amp;#34; are respected by the controller. You may
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # choose any class you&amp;#39;d like for this controller to respect.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --ingress-class=alb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Name of your cluster. Used when naming resources created
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # by the ALB Ingress Controller, providing distinction between
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # clusters.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --cluster-name=k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS VPC ID this ingress controller will use to create AWS resources.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If unspecified, it will be discovered from ec2metadata.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --aws-vpc-id=vpc-06e2e104ad785474c
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS region this ingress controller will operate in.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If unspecified, it will be discovered from ec2metadata.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # List of regions: http://docs.aws.amazon.com/general/latest/gr/rande.html#vpc_region
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --aws-region=us-east-1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Enables logging on all outbound requests sent to the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If logging is desired, set to true.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - ---aws-api-debug
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Maximum number of times to retry the aws calls.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # defaults to 10.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - --aws-max-retries=10
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          env:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS key id for authenticating with the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # This is only here for examples. It&amp;#39;s recommended you instead use
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # a project like kube2iam for granting access.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #- name: AWS_ACCESS_KEY_ID
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #  value: KEYVALUE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS key secret for authenticating with the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # This is only here for examples. It&amp;#39;s recommended you instead use
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # a project like kube2iam for granting access.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #- name: AWS_SECRET_ACCESS_KEY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #  value: SECRETVALUE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          # Repository location of the ALB Ingress Controller.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          image: 894847497797.dkr.ecr.us-west-2.amazonaws.com/aws-alb-ingress-controller:v1.0.0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          imagePullPolicy: Always
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name: server
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          resources: {}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          terminationMessagePath: /dev/termination-log
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      dnsPolicy: ClusterFirst
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      restartPolicy: Always
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      securityContext: {}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      terminationGracePeriodSeconds: 30
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccountName: alb-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccount: alb-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that I only modified the args section if you want to compare it with the original.&lt;/p&gt;

&lt;p&gt;Then finally apply it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f alb-ingress-controller.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.apps &amp;#34;alb-ingress-controller&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;external-dns&#34;&gt;&lt;strong&gt;External-dns&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns/blob/master/docs/tutorials/aws.md&#34;&gt;External DNS&lt;/a&gt; will update our zone in Route53 based in the ingress rules as well, so everything will be done automatically for us once we add an ingress resource.&lt;/p&gt;

&lt;p&gt;But first let&amp;rsquo;s attach those policies that we created before:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name nodes.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name masters.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name nodes.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name masters.k8s.techsquad.rocks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that we just used the policies that we created before but we needed the cluster running because kops creates the roles nodes.k8s.techsquad.rocks and masters.k8s.techsquad.rocks, and this is needed for the aws-alb-ingress-controller and external-dns so these are able to do their job.&lt;/p&gt;

&lt;p&gt;We need to download the manifests and modify a few parameters to match our deployment, the parameters are domain-filter and txt-owner-id, the rest is as is:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Ss https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.0/docs/examples/external-dns.yaml &amp;gt; external-dns.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This configuration will only update records, that&amp;rsquo;s the default policy (upsert), and it will only look for public hosted zones.&lt;/p&gt;

&lt;p&gt;Or copy and paste the following lines:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; external-dns.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ServiceAccount
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ClusterRole
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;services&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;pods&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;extensions&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;ingresses&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;nodes&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ClusterRoleBinding
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns-viewer
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;roleRef:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  apiGroup: rbac.authorization.k8s.io
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  kind: ClusterRole
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;subjects:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- kind: ServiceAccount
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: default
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: extensions/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  strategy:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    type: Recreate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        app: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccountName: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        image: registry.opensource.zalan.do/teapot/external-dns:v0.5.9
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --source=service
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --source=ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --domain-filter=k8s.techsquad.rocks # will make ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --provider=aws
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --policy=upsert-only # would prevent ExternalDNS from deleting any records, omit to enable full synchronization
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --aws-zone-type=public # only look at public hosted zones (valid values are public, private or no value for both)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --registry=txt
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --txt-owner-id=k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And apply it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f external-dns.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# serviceaccount &amp;#34;external-dns&amp;#34; unchanged&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# clusterrole.rbac.authorization.k8s.io &amp;#34;external-dns&amp;#34; configured&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# clusterrolebinding.rbac.authorization.k8s.io &amp;#34;external-dns-viewer&amp;#34; configured&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.extensions &amp;#34;external-dns&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Validate that we have everything that we installed up and running:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get pods
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                            READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# external-dns-7d7998f7bb-lb5kq   1/1       Running   0          2m&lt;/span&gt;

kubectl get pods -n kube-system
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                                                   READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# alb-ingress-controller-5885ddd5f9-9rsc8                1/1       Running   0          12m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-kube-controllers-f6bc47f75-n99tl                1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-4ps9c                                      2/2       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-kjztv                                      2/2       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-zs4fg                                      2/2       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# dns-controller-67f5c6b7bd-r67pl                        1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# etcd-server-events-ip-172-20-42-37.ec2.internal        1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# etcd-server-ip-172-20-42-37.ec2.internal               1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-apiserver-ip-172-20-42-37.ec2.internal            1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-controller-manager-ip-172-20-42-37.ec2.internal   1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-756bfc7fdf-2kzjs                              3/3       Running   0          24m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-756bfc7fdf-rq5nd                              3/3       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-autoscaler-787d59df8f-c2d52                   1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-42-109.ec2.internal               1/1       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-42-37.ec2.internal                1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-54-175.ec2.internal               1/1       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-scheduler-ip-172-20-42-37.ec2.internal            1/1       Running   0          26m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We can see that alb-ingress-controller is running, also external-dns, and everything looks good and healthy, time to test it with a deployment.&lt;/p&gt;

&lt;h3 id=&#34;testing-everything&#34;&gt;&lt;strong&gt;Testing everything&lt;/strong&gt;&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-deployment.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-service.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# namespace &amp;#34;2048-game&amp;#34; created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.extensions &amp;#34;2048-deployment&amp;#34; created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# service &amp;#34;service-2048&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to download and edit the ingress resource to make it use our domain so we can then see the record pointing to the ALB.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Ss https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-ingress.yaml &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Or just copy and paste the next snippet.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; 2048-ingress.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: extensions/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: &amp;#34;2048-ingress&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: &amp;#34;2048-game&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  annotations:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    kubernetes.io/ingress.class:                alb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/scheme:           internet-facing
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/target-type:      instance
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/subnets:          subnet-017a5609ce6104e1b, subnet-060e6d3c3d3c2b34a
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/security-groups:  sg-09f0b1233696e65ef
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # You can check all the alternatives here:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # https://github.com/riccardofreixo/alb-ingress-controller/blob/master/docs/ingress-resources.md
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: 2048-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  - host: 2048.k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    http:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      paths:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - backend:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          serviceName: &amp;#34;service-2048&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          servicePort: 80
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        path: /*
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can use &lt;code&gt;aws ec2 describe-subnets&lt;/code&gt;, to find the first subnet id, this subnet already has some tags that we need in order to make it work, for example: &lt;code&gt;kubernetes.io/role/elb: 1&lt;/code&gt;, and the second subnet is the one that we created manually and applied the same tags.&lt;/p&gt;

&lt;p&gt;And finally apply it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ingress.extensions &amp;#34;2048-ingress&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Wait a few moments and verify.&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The ALB&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-listeners.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The DNS records&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-route53-records.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And the app&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-result.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;&lt;strong&gt;Clean up&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Remember this is not free, and if you don&amp;rsquo;t want to get charged after you&amp;rsquo;re done testing just shutdown and delete everything.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name nodes.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name masters.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name nodes.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name masters.k8s.techsquad.rocks

kops delete cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --yes
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Deleted kubectl config for k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Deleted cluster: &amp;#34;k8s.techsquad.rocks&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This command is really verbose, so I skipped it to the end, be aware that in order to delete the cluster with kops you first need to detach the additionally attached privileges. Also be careful to delete first the ingress resources so the ALB gets removed before you delete the cluster, or you will have an ALB laying around afterwards. You can re-run it if it gets stuck and cannot delete any resource.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I was going to use helm and deploy a more complex application here, but the article was already too long, so I decided to go with the aws alb ingress controller example.&lt;/li&gt;
&lt;li&gt;If something doesn&amp;rsquo;t go well or things aren&amp;rsquo;t happening you can always check the logs for external-dns and aws-alb-ingress-controller, the messages are usually very descriptive and easy to understand.&lt;/li&gt;
&lt;li&gt;For an ALB you need two subnets in two different AZs beforehand.&lt;/li&gt;
&lt;li&gt;If you are going to use ALBs, have in mind that it will create an ALB for each deployment, there is a small project that merges everything into one ALB but you need to have a unified or consolidated way to do health checks or or some of the apps will fail and the ALB will return a 502, the project can be found &lt;a href=&#34;https://github.com/jakubkulhan/ingress-merge&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Documenting what you do and how you do it (Also keeping the documentation updated is really important), not only will help the future you (Yes, you can thank your past self when reading and old doc), but also it will make it easier to share the knowledge and purpose of whatever you are implementing with your team.&lt;/li&gt;
&lt;li&gt;I spent 3 bucks with all the instances and dns zones, etc during this tutorial in case you are interested :).&lt;/li&gt;
&lt;li&gt;Notes I also removed all $ from the code blocks and added the output of the commands with # OUTPUT:, let me know if this is clear and easy to read, or if you have any suggestion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring some Istio features</title>
      <link>https://techsquad.rocks/blog/exploring_some_istio_features/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/exploring_some_istio_features/</guid>
      <tags>
      
        <tag>istio</tag>
      
        <tag>routing</tag>
      
        <tag>service-mesh</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This article builds up on what we did in the &lt;a href=&#34;https://techsquad.rocks/blog/why_do_i_need_a_service_mesh/&#34;&gt;last article&lt;/a&gt;, so refer to that one before starting this one, if you are planing to follow the documentation examples you will find many similarities since I based this article on that.&lt;/p&gt;

&lt;p&gt;In this example I will be using &lt;a href=&#34;https://m.do.co/c/01d040b789de&#34;&gt;Digital Ocean&lt;/a&gt; (that&amp;rsquo;s my referral link), note that I do not have any association with Digital Ocean but they give you $100 to test their products for 60 days, if you spend $25 I get another $25.&lt;/p&gt;

&lt;h3 id=&#34;before-starting-a-few-concepts&#34;&gt;Before starting a few concepts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A VirtualService defines the rules that control how requests for a service are routed within an Istio service mesh.&lt;/li&gt;
&lt;li&gt;A DestinationRule configures the set of policies to be applied to a request after VirtualService routing has occurred.&lt;/li&gt;
&lt;li&gt;A ServiceEntry is commonly used to enable requests to services outside of an Istio service mesh.&lt;/li&gt;
&lt;li&gt;A Gateway configures a load balancer for HTTP/TCP traffic, most commonly operating at the edge of the mesh to enable ingress traffic for an application.
These basic concepts will help you understand the manifest that we are going to see.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h3&gt;

&lt;p&gt;We already have the bookinfo project deployed and using all three versions of the service (ratings) but we will need to make some changes to test route based on user identity, you can check the configuration with:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get destinationrules -o yaml
apiVersion: v1
items:
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DestinationRule&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;details&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;details&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subsets&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}]}}&lt;/span&gt;
    creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T00:58:54Z
    generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    name: details
    namespace: default
    resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;921688&amp;#34;&lt;/span&gt;
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules/details
    uid: &lt;span style=&#34;color:#ae81ff&#34;&gt;11490656&lt;/span&gt;-153c-11e9-9eda-6a85233ec1d5
  spec:
    host: details
    subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DestinationRule&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productpage&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productpage&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subsets&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}]}}&lt;/span&gt;
    creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T00:58:53Z
    generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    name: productpage
    namespace: default
    resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;921684&amp;#34;&lt;/span&gt;
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules/productpage
    uid: 10a42a24-153c-11e9-9eda-6a85233ec1d5
  spec:
    host: productpage
    subsets:
    - labels:
        version: v1
      name: v1
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DestinationRule&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subsets&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2-mysql&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2-mysql&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2-mysql-vm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2-mysql-vm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}]}}&lt;/span&gt;
    creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T00:58:54Z
    generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    name: ratings
    namespace: default
    resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;921686&amp;#34;&lt;/span&gt;
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules/ratings
    uid: 111299e1-153c-11e9-9eda-6a85233ec1d5
  spec:
    host: ratings
    subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2
    - labels:
        version: v2-mysql
      name: v2-mysql
    - labels:
        version: v2-mysql-vm
      name: v2-mysql-vm
- apiVersion: networking.istio.io/v1alpha3
  kind: DestinationRule
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DestinationRule&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subsets&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}]}}&lt;/span&gt;
    creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T00:58:53Z
    generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    name: reviews
    namespace: default
    resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;921685&amp;#34;&lt;/span&gt;
    selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules/reviews
    uid: 10db9ee2-153c-11e9-9eda-6a85233ec1d5
  spec:
    host: reviews
    subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2
    - labels:
        version: v3
      name: v3
kind: List
metadata:
  resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  selfLink: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
There we have all the destination rules, and now we need to apply the new manifest that will send everything to the version 1 and the user &lt;em&gt;jason&lt;/em&gt; to the version 2 of the reviews microservice.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istio-1.0.5/samples/bookinfo $ kubectl apply -f networking/virtual-service-reviews-test-v2.yaml
virtualservice.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt; created

$ kubectl get virtualservice reviews -o yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VirtualService&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end-user&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exact&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jason&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}}]&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subset&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}]}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subset&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}]}]}}&lt;/span&gt;
  creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T02:30:35Z
  generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  name: reviews
  namespace: default
  resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;930577&amp;#34;&lt;/span&gt;
  selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/virtualservices/reviews
  uid: e0701f0d-1548-11e9-9eda-6a85233ec1d5
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
What&amp;rsquo;s going on here, how Istio knows what user is logged in?, well, the app adds a header called end-user and value &lt;em&gt;jason&lt;/em&gt; then the route will be used, it&amp;rsquo;s a nifty trick.&lt;/p&gt;

&lt;p&gt;Not jason:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/istio-servicev1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;jason:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/istio-servicev2.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

As you can see the difference in the v1 and v2 of the app are the stars below the reviews, but that is more than enough to indicate that it works, this is really nice for beta testers you don&amp;rsquo;t need or have to complicate your code but just add a header.&lt;/p&gt;

&lt;h3 id=&#34;injecting-an-http-abort-fault&#34;&gt;Injecting an HTTP abort fault:&lt;/h3&gt;

&lt;p&gt;This time we will inject a failure for our friend &lt;em&gt;jason&lt;/em&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istio-1.0.5/samples/bookinfo $ kubectl apply -f networking/virtual-service-ratings-test-abort.yaml
virtualservice.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt; created

$ kubectl get virtualservice ratings -o yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;networking.istio.io/v1alpha3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;VirtualService&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hosts&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fault&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abort&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;httpStatus&amp;#34;&lt;/span&gt;:500,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;percent&amp;#34;&lt;/span&gt;:100&lt;span style=&#34;color:#f92672&#34;&gt;}}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end-user&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exact&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jason&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}}]&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subset&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}]}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subset&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}}]}]}}&lt;/span&gt;
  creationTimestamp: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;-01-11T02:50:59Z
  generation: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  name: ratings
  namespace: default
  resourceVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;932552&amp;#34;&lt;/span&gt;
  selfLink: /apis/networking.istio.io/v1alpha3/namespaces/default/virtualservices/ratings
  uid: b98799b0-154b-11e9-9eda-6a85233ec1d5
spec:
  hosts:
  - ratings
  http:
  - fault:
      abort:
        httpStatus: &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;
        percent: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
    match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: ratings
        subset: v1
  - route:
    - destination:
        host: ratings
        subset: v1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;So he decided to check the book reviews again and boom, the ratings service was not available but everything else works just fine, this only applies for &lt;em&gt;jason&lt;/em&gt; everyone else will see the version without stars or the error message.
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/istio-servicev3.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;Istio seems an it is indeed really powerful, there many more features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Traffic shifting.&lt;/li&gt;
&lt;li&gt;Requests timeouts.&lt;/li&gt;
&lt;li&gt;Circuit breaking.&lt;/li&gt;
&lt;li&gt;Mirroring.&lt;/li&gt;
&lt;li&gt;And a lot more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I left aside Policies, Telemetry and Security, if you want to learn more about Istio I highly recommend you to try the examples yourself and read on the &lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/#collapse24&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also spent some time improving the navigation of the blog and some other minor details, but I wanted to keep the articles going so that&amp;rsquo;s why this one is so simple and similar to the documentation.&lt;/p&gt;

&lt;h3 id=&#34;upcoming-topics-and-ideas&#34;&gt;Upcoming topics and ideas&lt;/h3&gt;

&lt;p&gt;I Want to start creating series of content on different topics, brief articles that can get you started with some new technology or maybe give you an idea of how it works, let me know if you are interested in that kind of content in the comments or via twitter 🐦 (it&amp;rsquo;s a bird, in case you cannot see unicode characters).&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why do I need a service mesh?</title>
      <link>https://techsquad.rocks/blog/why_do_i_need_a_service_mesh/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/why_do_i_need_a_service_mesh/</guid>
      <tags>
      
        <tag>istio</tag>
      
        <tag>service-mesh</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This time we will see how to get started with &lt;a href=&#34;https://istio.io/&#34;&gt;Istio&lt;/a&gt; and why do we need to use a service mesh.&lt;/p&gt;

&lt;p&gt;In this example I will be using &lt;a href=&#34;https://m.do.co/c/01d040b789de&#34;&gt;Digital Ocean&lt;/a&gt; (that&amp;rsquo;s my referral link), note that I do not have any association with Digital Ocean but they give you $100 to test their products for 60 days, if you spend $25 I get another $25.&lt;/p&gt;

&lt;h3 id=&#34;istio&#34;&gt;Istio&lt;/h3&gt;

&lt;p&gt;So&amp;hellip; You might be wondering some of those questions: why Istio? Why do I need a service mesh?, when do I need that? And I want to help you with some answers:&lt;/p&gt;

&lt;p&gt;Why do I need a service mesh? Basically because in cloud environments you cannot trust that the network will be reliable 100% of the time, that the latency will be low, that the network is secure and the bandwidth is infinite, the service mesh is just an extra layer to help microservices communicate with each other safely and reliably.&lt;/p&gt;

&lt;p&gt;When do I need to have one? This one can be tricky and will depend on your environment, but the moment that you start experiencing network issues between your microservices would be a good moment to do it, it could be done before of course, but it will highly depend on the project, if you can start early with it the better and easier to implement will be, always have in mind the benefits of added security, observability and likely performance improvement.&lt;/p&gt;

&lt;p&gt;Why Istio? This will be a small series of service meshes for kubernetes and I decided to start with Istio.&lt;/p&gt;

&lt;p&gt;In case you don&amp;rsquo;t agree with my explanations that&amp;rsquo;s ok, this is a TL;DR version and also I simplified things a lot, for a more complete overview you can check &lt;a href=&#34;https://blog.buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&#34;&gt;this&lt;/a&gt; article or &lt;a href=&#34;https://www.oreilly.com/ideas/do-you-need-a-service-mesh&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h3&gt;

&lt;p&gt;First of all we need to download and install Istio in our cluster, the recommended way of doing it is using helm (In this case I will be using the no Tiller alternative, but it could be done with helm install as well, check here for &lt;a href=&#34;https://istio.io/docs/setup/kubernetes/helm-install/&#34;&gt;more info&lt;/a&gt;):
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -L https://git.io/getLatestIstio | sh -&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This will download and extract the latest release, in this case 1.0.5 at this moment.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s install Istio&amp;hellip; only pay attention to the first 3 commands, then you can skip until the end of the code block, I post all the output because I like full examples :)
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istio-1.0.5 $ helm template install/kubernetes/helm/istio --name istio --namespace istio-system --set grafana.enabled&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true &amp;gt; $HOME/istio.yaml
istio-1.0.5 $ kubectl create namespace istio-system
namespace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-system&amp;#34;&lt;/span&gt; created

istio-1.0.5 $ kubectl apply -f $HOME/istio.yaml
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley-configuration&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-statsd-prom-bridge&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-custom-resources&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio&amp;#34;&lt;/span&gt; created
configmap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-mixer-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-cleanup-secrets-service-account&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-cleanup-secrets-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-cleanup-secrets-istio-system&amp;#34;&lt;/span&gt; created
job.batch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-cleanup-secrets&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-post-install-account&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-post-install-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-post-install-role-binding-istio-system&amp;#34;&lt;/span&gt; created
job.batch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-security-post-install&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel-service-account&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector-service-account&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtualservices.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destinationrules.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serviceentries.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gateways.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;envoyfilters.networking.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;httpapispecbindings.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;httpapispecs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quotaspecbindings.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quotaspecs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rules.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attributemanifests.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bypasses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;circonuses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deniers.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fluentds.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubernetesenvs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listcheckers.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memquotas.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noops.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;opas.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheuses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rbacs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redisquotas.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;servicecontrols.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;signalfxs.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;solarwindses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stackdrivers.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;statsds.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdios.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apikeys.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authorizations.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;checknothings.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuberneteses.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listentries.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logentries.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;edges.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metrics.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quotas.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reportnothings.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;servicecontrolreports.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tracespans.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rbacconfigs.rbac.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serviceroles.rbac.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;servicerolebindings.rbac.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adapters.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;instances.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;templates.config.istio.io&amp;#34;&lt;/span&gt; created
customresourcedefinition.apiextensions.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;handlers.config.istio.io&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-mixer-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel-istio-system&amp;#34;&lt;/span&gt; created
clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley-admin-role-binding-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-mixer-admin-role-binding-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel-istio-system&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector-admin-role-binding-istio-system&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-policy&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-telemetry&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-galley&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-policy&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-telemetry&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-citadel&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector&amp;#34;&lt;/span&gt; created
gateway.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-autogenerated-k8s-ingress&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-egressgateway&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-ingressgateway&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-policy&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-telemetry&amp;#34;&lt;/span&gt; created
horizontalpodautoscaler.autoscaling &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-pilot&amp;#34;&lt;/span&gt; created
mutatingwebhookconfiguration.admissionregistration.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-sidecar-injector&amp;#34;&lt;/span&gt; created
attributemanifest.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istioproxy&amp;#34;&lt;/span&gt; created
attributemanifest.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubernetes&amp;#34;&lt;/span&gt; created
stdio.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;handler&amp;#34;&lt;/span&gt; created
logentry.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accesslog&amp;#34;&lt;/span&gt; created
logentry.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcpaccesslog&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdio&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stdiotcp&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requestcount&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requestduration&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requestsize&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;responsesize&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcpbytesent&amp;#34;&lt;/span&gt; created
metric.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcpbytereceived&amp;#34;&lt;/span&gt; created
prometheus.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;handler&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;promhttp&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;promtcp&amp;#34;&lt;/span&gt; created
kubernetesenv.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;handler&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubeattrgenrulerule&amp;#34;&lt;/span&gt; created
rule.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcpkubeattrgenrulerule&amp;#34;&lt;/span&gt; created
kubernetes.config.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt; created
destinationrule.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-policy&amp;#34;&lt;/span&gt; created
destinationrule.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-telemetry&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
WOAH, What did just happen?, a lot of new resources were created, basically we just generated the manifest from the helm chart and applied that to our cluster.&lt;/p&gt;

&lt;p&gt;So lets see what&amp;rsquo;s running and what that means:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods -n istio-system
NAME                                      READY     STATUS      RESTARTS   AGE
istio-citadel-856f994c58-l96p8            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-cleanup-secrets-xqqj4               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;/1       Completed   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-egressgateway-5649fcf57-7zwkh       &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-galley-7665f65c9c-tzn7d             &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-ingressgateway-6755b9bbf6-bh84r     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-pilot-56855d999b-c4cp5              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-policy-6fcb6d655f-9544z             &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-sidecar-injector-768c79f7bf-th8zh   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
istio-telemetry-664d896cf5-jdcwv          &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m
prometheus-76b7745b64-f8jxn               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;/1       Running     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          3m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
A few minutes later, almost everything is up, but what&amp;rsquo;s all that? Istio has several components, see the following overview extracted from &lt;a href=&#34;https://github.com/istio/istio&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Envoy&lt;/strong&gt;: Sidecar proxies per microservice to handle ingress/egress traffic between services in the cluster and from a service to external services. The proxies form a secure microservice mesh providing a rich set of functions like discovery, rich layer-7 routing, circuit breakers, policy enforcement and telemetry recording/reporting functions.
Note: The service mesh is not an overlay network. It simplifies and enhances how microservices in an application talk to each other over the network provided by the underlying platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mixer&lt;/strong&gt;: Central component that is leveraged by the proxies and microservices to enforce policies such as authorization, rate limits, quotas, authentication, request tracing and telemetry collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pilot&lt;/strong&gt;: A component responsible for configuring the proxies at runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Citadel&lt;/strong&gt;: A centralized component responsible for certificate issuance and rotation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node Agent&lt;/strong&gt;: A per-node component responsible for certificate issuance and rotation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Galley&lt;/strong&gt;: Central component for validating, ingesting, aggregating, transforming and distributing config within Istio.&lt;/p&gt;

&lt;p&gt;Ok so, a lot of new things were installed but how do I know it&amp;rsquo;s working? let&amp;rsquo;s deploy a &lt;a href=&#34;https://istio.io/docs/examples/bookinfo/&#34;&gt;test application&lt;/a&gt; and check it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PATH&lt;span style=&#34;color:#e6db74&#34;&gt;:~/istio-1.0.5/bin&amp;#34;&lt;/span&gt;
istio-1.0.5/samples/bookinfo $ kubectl apply -f &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;istioctl kube-inject -f platform/kube/bookinfo.yaml&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;details&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;details-v1&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ratings-v1&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews-v1&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews-v2&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reviews-v3&amp;#34;&lt;/span&gt; created
service &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productpage&amp;#34;&lt;/span&gt; created
deployment.extensions &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productpage-v1&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
That command not only deployed the application but injected the Istio sidecar to each pod:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get pods
NAME                              READY     STATUS    RESTARTS   AGE
details-v1-8bd954dbb-zhrqq        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
productpage-v1-849c786f96-kpfx9   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
ratings-v1-68d648d6fd-w68qb       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
reviews-v1-b4c984bdc-9s6j5        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
reviews-v2-575446d5db-r6kwc       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m
reviews-v3-74458c4889-kr4wb       &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;/2       Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          2m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we can see each pod has 2 containers in it, the app container and istio-proxy. You can also configure &lt;a href=&#34;https://istio.io/docs/setup/kubernetes/sidecar-injection/#automatic-sidecar-injection&#34;&gt;automatic sidecar injection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also all services are running:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get services
NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    AGE
details       ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.134.179   &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;9080&lt;/span&gt;/TCP   3m
kubernetes    ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.0.1       &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;/TCP    3d
productpage   ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.32.221    &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;9080&lt;/span&gt;/TCP   3m
ratings       ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.159.112   &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;9080&lt;/span&gt;/TCP   3m
reviews       ClusterIP   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.245.77.125    &amp;lt;none&amp;gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;9080&lt;/span&gt;/TCP   3m&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;But how do I access the app?
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;istio-1.0.5/samples/bookinfo $ kubectl apply -f networking/bookinfo-gateway.yaml
gateway.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookinfo-gateway&amp;#34;&lt;/span&gt; created
virtualservice.networking.istio.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookinfo&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
In Istio a Gateway configures a load balancer for HTTP/TCP traffic, most commonly operating at the edge of the mesh to enable ingress traffic for an application (L4-L6).&lt;/p&gt;

&lt;p&gt;After that we need to set some environment variables to fetch the LB ip, port, etc.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export INGRESS_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{.status.loadBalancer.ingress[0].ip}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
$ export INGRESS_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{.spec.ports[?(@.name==&amp;#34;http2&amp;#34;)].port}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
$ export SECURE_INGRESS_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get service istio-ingressgateway -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{.spec.ports[?(@.name==&amp;#34;https&amp;#34;)].port}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
$ export GATEWAY_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$INGRESS_HOST:$INGRESS_PORT

curl -o /dev/null -s -w &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%{http_code}\n&amp;#34;&lt;/span&gt; http://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GATEWAY_URL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/productpage&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
If the latest curl returns 200 then we&amp;rsquo;re good, you can also browse the app &lt;code&gt;open http://${GATEWAY_URL}/productpage&lt;/code&gt; and you will see something like the following image:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/productpage-example.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Also you can use &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; to check some metrics about the service usage, etc. (You don&amp;rsquo;t have to worry about prometheus since it&amp;rsquo;s enabled by default). Spin up the port-forward so we don&amp;rsquo;t have to expose grafana: to the world with: &lt;code&gt;kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath=&#39;{.items[0].metadata.name}&#39;) 3000:3000&lt;/code&gt;, and then &lt;code&gt;open http://localhost:3000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a general advice check all the settings that Istio offers try the ones that you think that could be useful for your project and always measure and compare.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Do mind that &lt;strong&gt;pilot&lt;/strong&gt; pod requires at least 4 Gbs of memory, so you will need at least one node with that amount of memory.&lt;/li&gt;
&lt;li&gt;You can check the load balancer status under: Manage -&amp;gt; Networking -&amp;gt; Load balancers. And if everything is okay your LB will say Healthy.&lt;/li&gt;
&lt;li&gt;Grafana is not enabled by default but we do enable it via helm with &lt;code&gt;--set grafana.enabled=true&lt;/code&gt;, if you want to check all the possible options &lt;a href=&#34;https://istio.io/docs/reference/config/installation-options/&#34;&gt;go here&lt;/a&gt;, if you are using more than two &lt;code&gt;--set&lt;/code&gt; options I would recommend creating a &lt;code&gt;values.yaml&lt;/code&gt; file and use that instead.&lt;/li&gt;
&lt;li&gt;Istio is a big beast and should be treated carefully, there is a lot more to learn and test out. We only scratched the surface here.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;upcoming-posts&#34;&gt;Upcoming posts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More examples using Istio.&lt;/li&gt;
&lt;li&gt;Linkerd.&lt;/li&gt;
&lt;li&gt;Maybe some Golang fun.&lt;/li&gt;
&lt;li&gt;Serverless or kubeless, that&amp;rsquo;s the question.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
