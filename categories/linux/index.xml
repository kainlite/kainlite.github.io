<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</title>
    <link>https://techsquad.rocks/categories/linux/</link>
    <description>Recent content in linux on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 31 Dec 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://techsquad.rocks/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to report your gmail spam folder to spamcop</title>
      <link>https://techsquad.rocks/blog/how_to_report_your_gmail_spam_folder_to_spamcop/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/how_to_report_your_gmail_spam_folder_to_spamcop/</guid>
      <tags>
      
        <tag>development</tag>
      
        <tag>golang</tag>
      
        <tag>go</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This post is a bit different from the others in the sense that it&amp;rsquo;s a small &amp;ldquo;tool&amp;rdquo; I did to ease spam reporting to &lt;a href=&#34;https://www.spamcop.net/&#34;&gt;SpamCop.net&lt;/a&gt;, this helps to reduce the true Spam from unknown sources, since for some reason I started to get like 40 emails per day (all went to spam), but it is still somewhat annoying, so I started reporting it to spamcop, but the process was kind of slow and I got tired of that quickly, so I created this &amp;ldquo;script&amp;rdquo; to make things easier. Basically what it does is list all messages in the spam folders fetches them and then forwards each one as an attachment to spamcop, then you get an email with a link to confirm the submission and that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;There are a few pre-requisites, like enabling the GMail API for your account, you can do that &lt;a href=&#34;https://developers.google.com/gmail/api/quickstart/go#step_1_turn_on_the&#34;&gt;here&lt;/a&gt;, after that the first time you use the app you have to authorize it, you do this by pasting the URL that the app gives you in the browser, then clicking Allow, and then pasting the token that it gives you back in the terminal (this only needs to be done once), after that you just run the binary in a cronjob or maybe even as a lambda (but I haven&amp;rsquo;t gone there yet), I usually check the spam folder remove what I don&amp;rsquo;t think it&amp;rsquo;s spam or whatever and then run the script to report everything else that it is clearly spam, it takes a few seconds and then I get the link to confirm all reports (one by one, sadly), this script is not perfect as sometimes spamcop cannot read properly the forwarded email, but I have checked exporting those as a file and I do see them all right, so that will be an investigation for another day, this only took like 2-4 hours, having 0 knowledge of the GMail API, etc.&lt;/p&gt;

&lt;p&gt;Also you need to setup a spamcop account which you will be using to send your reports, you can do that &lt;a href=&#34;https://www.spamcop.net/anonsignup.shtml&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code can be found &lt;a href=&#34;https://github.com/kainlite/spamcop&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;code&#34;&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I have added some comments along the code to make things easy to understand
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/557731e9b398e593fc6a176cd9f705e5.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;running-it&#34;&gt;&lt;strong&gt;Running it&lt;/strong&gt;&lt;/h5&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/244d04580a8ca63e4bbecdcecd649840.js&#34;&gt;&lt;/script&gt;


&lt;h5 id=&#34;sources&#34;&gt;&lt;strong&gt;Sources&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Some articles, pages, and files that I used and helped me to do what I wanted to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/gmail/api/quickstart/go&#34;&gt;https://developers.google.com/gmail/api/quickstart/go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gsuitedevs/go-samples/blob/master/gmail/quickstart/quickstart.go&#34;&gt;https://github.com/gsuitedevs/go-samples/blob/master/gmail/quickstart/quickstart.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://socketloop.com/tutorials/golang-send-email-with-attachment-rfc2822-using-gmail-api-example&#34;&gt;https://socketloop.com/tutorials/golang-send-email-with-attachment-rfc2822-using-gmail-api-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/google-api-go-client/master/examples/gmail.go&#34;&gt;https://raw.githubusercontent.com/googleapis/google-api-go-client/master/examples/gmail.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xDinomode/Go-Gmail-Api-Example/blob/master/email.go&#34;&gt;https://github.com/xDinomode/Go-Gmail-Api-Example/blob/master/email.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.spamcop.net/reporter.pl&#34;&gt;https://www.spamcop.net/reporter.pl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/google.golang.org/api/gmail/v1#Message&#34;&gt;https://godoc.org/google.golang.org/api/gmail/v1#Message&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-notes&#34;&gt;Additional notes&lt;/h3&gt;

&lt;p&gt;While this still needs some work hopefully will keep my account clean and probably help someone wondering about how to do the same.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go gRPC Cheap Ping</title>
      <link>https://techsquad.rocks/blog/go_grpc_cheap_ping/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/go_grpc_cheap_ping/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>grpc</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will explore gRPC with a cheap ping application, basically we will do a ping and measure the time it takes for the message to go to the server and back before reporting it to the terminal. You can find the source code &lt;a href=&#34;https://github.com/kainlite/grpc-ping&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;protobuf&#34;&gt;&lt;strong&gt;Protobuf&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you might already know gRPC serializes data using &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protocol buffers&lt;/a&gt;, We are just going to create a &lt;a href=&#34;https://grpc.io/docs/guides/concepts/&#34;&gt;Unary RPC&lt;/a&gt; as follows.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/ad4f85164730c6c6fb2257329f7fc164.js&#34;&gt;&lt;/script&gt;

With this file in place we are defining a service that will be able to send a single &lt;code&gt;PingRequest&lt;/code&gt; and get a single &lt;code&gt;PingResponse&lt;/code&gt;, we have a &lt;code&gt;Data&lt;/code&gt; field that goes back and forth in order to send some bytes over the wire (even that we don&amp;rsquo;t really care about that, it could be important or crucial in a performance test).&lt;/p&gt;

&lt;h5 id=&#34;generating-the-code&#34;&gt;&lt;strong&gt;Generating the code&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In order to be able to use protobuf we need to generate the code for the app that we&amp;rsquo;re writing in this case for golang the command would be this one:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/dac49c31ffaedac1d0cc1584a8cce306.js&#34;&gt;&lt;/script&gt;

This will give us a definition of the service and the required structs to carry the data that we have defined as messages.&lt;/p&gt;

&lt;h5 id=&#34;client&#34;&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The client does most of the work here, as you can see you can supply 2 arguments one to point to another host:port and the second to send a string of your liking, then it measures the time it takes to send and receive the message back and prints it to the screen with a similar line to what the actual &lt;code&gt;ping&lt;/code&gt; command looks in linux.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/663a25de0321b85bde37e006c1621e60.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;server&#34;&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The server is a merely echo server since it will send back whatever you send to it and log it to the console, by default it will listen in port &lt;code&gt;50000&lt;/code&gt;.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/7c809672a86b6454f7080a88d87da977.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;testing-it&#34;&gt;&lt;strong&gt;Testing it&lt;/strong&gt;&lt;/h5&gt;

&lt;h6 id=&#34;regular-ping&#34;&gt;&lt;strong&gt;Regular ping&lt;/strong&gt;&lt;/h6&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/8f60f178d0e6796256647d0e5a5c4078.js&#34;&gt;&lt;/script&gt;


&lt;h6 id=&#34;client-1&#34;&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;This is what we would see in the terminal while testing it.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/3abc2ac34d1390680fc9fb5787c1da02.js&#34;&gt;&lt;/script&gt;

As you can see the initial connection takes a bit more time but after that the roundtrip time is very consistent (of course our cheap ping doesn&amp;rsquo;t cover errors, packet loss, etc).&lt;/p&gt;

&lt;h6 id=&#34;server-1&#34;&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/h6&gt;

&lt;p&gt;The server just echoes back and logs what received over the wire.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/edf6fc9b5f1c71e2eab054b5dbae3a24.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see gRPC is pretty fast and simplifies a lot everything that you need to do in order to have a highly efficient message system or communication between microservices for example, it&amp;rsquo;s also easy to generate the boilerplate for whatever language you prefer and have a common interface that everyone has to agree on.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Socks Proxy</title>
      <link>https://techsquad.rocks/blog/ssh_socks_proxy/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/ssh_socks_proxy/</guid>
      <tags>
      
        <tag>openssh</tag>
      
        <tag>tips-and-tricks</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Socks proxy and what it means, we also will explore &lt;a href=&#34;https://techsquad.rocks/blog/ssh_remote_port_forward/&#34;&gt;SSH Remote Port Forward&lt;/a&gt; and &lt;a href=&#34;https://techsquad.rocks/blog/ssh_local_port_forward/&#34;&gt;SSH Local Port Forward&lt;/a&gt; and how to use that functionality.&lt;/p&gt;

&lt;h5 id=&#34;explanation&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SOCKS is an Internet protocol that exchanges network packets between a client and server through a proxy server (Extracted from Wikipedia). So basically it allows our remote server to become a VPNey likey thingy using SSH, so let&amp;rsquo;s see the different options of how and when to use it. But we will need to tell the application to use that SOCKS proxy, for example our browser or curl.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The command&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -D &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt; -Nn ec2-user@54.210.37.203&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;For example I started a EC2 instance for this example and this is the output from curl:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl --socks4 localhost:9999 icanhazip.com
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 54.210.37.203&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;the-parameters-and-their-meaning&#34;&gt;&lt;strong&gt;The parameters and their meaning&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I extracted a portion of the meaning of parameter from the man page, but in a nutshell it means dynamic port forward without a shell.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-N Do not execute a remote command. This is useful for just forwarding ports.
-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.
-D Specifies a local “dynamic” application-level port forwarding.  This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see this option can be really handy to have a temporary VPN or proxy, also if you want to make this automatic and not so temporary you can check autossh or any real VPN solution like OpenVPN. You can use this kind of proxy in any App that supports SOCKS, most browsers do for example.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Remote Port Forward</title>
      <link>https://techsquad.rocks/blog/ssh_remote_port_forward/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/ssh_remote_port_forward/</guid>
      <tags>
      
        <tag>openssh</tag>
      
        <tag>tips-and-tricks</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Remote port forward and what it means, we also will explore &lt;a href=&#34;https://techsquad.rocks/blog/ssh_local_port_forward/&#34;&gt;SSH Local Port Forward&lt;/a&gt; and &lt;a href=&#34;https://techsquad.rocks/blog/ssh_socks_proxy/&#34;&gt;SSH Socks Proxy&lt;/a&gt; and how to use that functionality.&lt;/p&gt;

&lt;h5 id=&#34;explanation&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Remote port forward basically let&amp;rsquo;s you forward one port from your machine to a remote machine, for example you want to connect to a local service from a remote server but just temporarily, let&amp;rsquo;s say you want to connect to a mysql instance on the default port (3306).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The command&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -Nn -R &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;:localhost:3306 user@example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The parameters and their meaning&lt;/strong&gt;
I extracted a portion of the meaning of parameter from the man page, but in a nutshell it means remote port forward without a shell.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-N Do not execute a remote command. This is useful for just forwarding ports.
-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.
-R Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;server-configuration&#34;&gt;&lt;strong&gt;Server configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;There are two configuration parameters that can change the behaviour of remote and local forwarded ports, those parameters are &lt;code&gt;GatewayPorts&lt;/code&gt; and &lt;code&gt;AllowTcpForwarding&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;gatewayports&#34;&gt;&lt;strong&gt;GatewayPorts&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;By default this option is &lt;code&gt;no&lt;/code&gt; which means that only the remote computer will be able to connect to the forwarded port, you can set it to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;clientspecified&lt;/code&gt; to allow other machines use that remote port-forward (handy and dangerous).&lt;/p&gt;

&lt;h5 id=&#34;allowtcpforwarding&#34;&gt;&lt;strong&gt;AllowTcpForwarding&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;By default this option is set to &lt;code&gt;yes&lt;/code&gt;, you can restrict remote and local port forwarding by setting it to &lt;code&gt;no&lt;/code&gt; or allow only local by setting it to &lt;code&gt;local&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;As you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don&amp;rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Local Port Forward</title>
      <link>https://techsquad.rocks/blog/ssh_local_port_forward/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/ssh_local_port_forward/</guid>
      <tags>
      
        <tag>openssh</tag>
      
        <tag>tips-and-tricks</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Local port forward and what it means, we also will explore &lt;a href=&#34;https://techsquad.rocks/blog/ssh_remote_port_forward/&#34;&gt;SSH Remote Port Forward&lt;/a&gt; and &lt;a href=&#34;https://techsquad.rocks/blog/ssh_socks_proxy/&#34;&gt;SSH Socks Proxy&lt;/a&gt; and how to use that functionality.&lt;/p&gt;

&lt;h5 id=&#34;explanation&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Local port forward basically let&amp;rsquo;s you forward one port from a remote machine to your local machine, for example you want to connect to a remote service from machine but just temporarily or there is a firewall that won&amp;rsquo;t let you do it, let&amp;rsquo;s say you want to connect to a mysql instance on the default port (3306).&lt;/p&gt;

&lt;h5 id=&#34;the-command&#34;&gt;&lt;strong&gt;The command&lt;/strong&gt;&lt;/h5&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet1.sh&#34;&gt;&lt;/script&gt;


&lt;p&gt;Here we are forwarding localhost:3306 in the remote machine to localhost:3306, but you can specify another address in the network for example 172.16.16.200 and the command would look like this:&lt;/p&gt;

&lt;p&gt;&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet2.sh&#34;&gt;&lt;/script&gt;

This will give you access to the ip 172.16.16.200 and port 3306 in the remote network.&lt;/p&gt;

&lt;h5 id=&#34;the-parameters-and-their-meaning&#34;&gt;&lt;strong&gt;The parameters and their meaning&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I extracted a portion of the meaning of parameter from the man page, but in a nutshell it means local port forward without a shell.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet3.txt&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;server-configuration&#34;&gt;&lt;strong&gt;Server configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;There is a configuration parameter that can change the behaviour of remote and local forwarded ports, that parameter is &lt;code&gt;AllowTcpForwarding&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;allowtcpforwarding&#34;&gt;&lt;strong&gt;AllowTcpForwarding&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;By default this option is set to &lt;code&gt;yes&lt;/code&gt;, you can restrict remote and local port forwarding by setting it to &lt;code&gt;no&lt;/code&gt; or allow only local by setting it to &lt;code&gt;local&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don&amp;rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Give super powers to your terminal with tmux</title>
      <link>https://techsquad.rocks/blog/give_super_powers_to_your_terminal_with_tmux/</link>
      <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/give_super_powers_to_your_terminal_with_tmux/</guid>
      <tags>
      
        <tag>urxvt</tag>
      
        <tag>vim</tag>
      
        <tag>linux</tag>
      
        <tag>tmux</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In this article I want to introduce you to &lt;code&gt;tmux&lt;/code&gt;, you might have used &lt;code&gt;screen&lt;/code&gt; in the past or heard about it, what tmux and screen are is terminal multiplexers, what does that mean? That you can have many windows/tabs and splits/panes in just one terminal window, this can really make things easier when using it as a development environment for example, you can detach from the terminal and leave things running indefinitely, or share your terminal with a colleague over ssh, for the examples I will be explaining bits of my configuration and how do I use it. The full configuration can be found &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.tmux.conf&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;m using ZSH as shell and Vim as text editor.&lt;/p&gt;

&lt;h3 id=&#34;tmux&#34;&gt;&lt;strong&gt;Tmux&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I also use tmux to maintain sessions, for example I can only have one terminal window open because with the help from ZSH it will attach automatically to a session thanks to &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; and the plugin tmux, I use tabs aka windows a lot, sometimes I also use splits aka as panes.&lt;/p&gt;

&lt;p&gt;Now you have some basic understanding of what tmux does and how does it name its things, let&amp;rsquo;s examine some bits of the config and how to use it.&lt;/p&gt;

&lt;h5 id=&#34;attach-detach-from-a-session&#34;&gt;&lt;strong&gt;Attach/detach from a session&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In order to create a session and attach to it you need to execute &lt;code&gt;tmux new -s my-session&lt;/code&gt;, then to detach from it: &lt;code&gt;CTRL-a d&lt;/code&gt; and to re-attach &lt;code&gt;tmux a -t my-session&lt;/code&gt;, then kill it &lt;code&gt;tmux kill-session -t my-session&lt;/code&gt; or logout from all windows.&lt;/p&gt;

&lt;h5 id=&#34;prefix&#34;&gt;&lt;strong&gt;Prefix&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I don&amp;rsquo;t use the default prefix that is: &lt;code&gt;CTRL-b&lt;/code&gt;, I use &lt;code&gt;CTRL-a&lt;/code&gt; like in screen.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use ctrl-a instead of ctrl-b&lt;/span&gt;
set -g prefix C-a
unbind C-b
bind C-a send-prefix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;example&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;You can print the numbers of the panes with &lt;code&gt;CTRL-a q&lt;/code&gt;, and you can navigate windows and panes as a list with &lt;code&gt;CTRL-a w&lt;/code&gt;.
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/tmux-windows-panes.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I usually like to have 3 panes, something like this:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/tmux-sample-usage.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

I can edit the code or whatever in the pane 0, run commands if I need to in the pane 1, and have the webserver or code compiler, etc in the pane 2. This is very handy because I can write and test things at the same time without leaving the keyboard, or look at 2 different projects/files/etc side by side.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;tmux ls&lt;/code&gt; we can list active sessions, also tmux has a command mode (&lt;code&gt;CTRL-a :&lt;/code&gt;) like Vim, where you can issue some commands or change settings on the fly, for example instead of executing &lt;code&gt;tmux ls&lt;/code&gt;, you can get the same information doing &lt;code&gt;CTRL-a :&lt;/code&gt; and then &lt;code&gt;ls&amp;lt;CR&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;defaults&#34;&gt;&lt;strong&gt;Defaults&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Some helpful settings, for example start windows at 1 instead of 0, renumber on exit also makes it easier with windows.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Start window numbers at 1 to match keyboard order with tmux window order&lt;/span&gt;
set -g base-index &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Scrollback buffer n lines&lt;/span&gt;
set -g history-limit &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Renumber tabs on exit&lt;/span&gt;
set-option -g renumber-windows on

&lt;span style=&#34;color:#75715e&#34;&gt;# Use vi keybindings in copy and choice modes&lt;/span&gt;
set-window-option -g mode-keys vi

&lt;span style=&#34;color:#75715e&#34;&gt;# Enable mouse, enables you to scroll in the tmux history buffer.&lt;/span&gt;
set -g mouse on&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;movement&#34;&gt;&lt;strong&gt;Movement&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I move between windows with &lt;code&gt;CTRL+h&lt;/code&gt; and &lt;code&gt;CTRL+l&lt;/code&gt;, and between panes with &lt;code&gt;CTRL-a [hjkl]&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Move between windows&lt;/span&gt;
bind-key -n C-h prev
bind-key -n C-l next

&lt;span style=&#34;color:#75715e&#34;&gt;# Move between panes&lt;/span&gt;
unbind h
bind h &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -L
unbind j
bind j &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -D
unbind k
bind k &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -U
unbind l
bind l &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -R&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;configuration&#34;&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;A handy trick if you are testing the configuration is to reload it from the file with &lt;code&gt;CTRL-a r&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Force a reload of the config file&lt;/span&gt;
unbind r
bind r source-file ~/.tmux.conf &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt; display &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reloaded!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;panes&#34;&gt;&lt;strong&gt;Panes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Everything is nice and shiny, but how do I open a pane or a new window?
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Horizontal and vertical splits&lt;/span&gt;
unbind |
bind | split-window -h
unbind -
bind - split-window&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Easy, &lt;code&gt;CTRL-a |&lt;/code&gt; will give you a vertical pane, and &lt;code&gt;CTRL-a -&lt;/code&gt; will give you an horizontal pane.
You an also re-order the panes with &lt;code&gt;CTRL-a SPACE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also re-order windows with &lt;code&gt;SHIFT-Left Arrow&lt;/code&gt; and &lt;code&gt;SHIFT-Right Arrow&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Swap windows&lt;/span&gt;
bind-key -n S-Left swap-window -t -1
bind-key -n S-Right swap-window -t +1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;status-bar&#34;&gt;&lt;strong&gt;Status bar&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The status bar and the colors, it&amp;rsquo;s fairly simple but I like it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Status bar has a dim gray background&lt;/span&gt;
set-option -g status-bg colour234
set-option -g status-fg colour0
&lt;span style=&#34;color:#75715e&#34;&gt;# Left shows the session name, in blue&lt;/span&gt;
set-option -g status-left-bg default
set-option -g status-left-fg colour74
&lt;span style=&#34;color:#75715e&#34;&gt;# Right is some CPU stats, so terminal green&lt;/span&gt;
set-option -g status-right-bg default
set-option -g status-right-fg colour71
&lt;span style=&#34;color:#75715e&#34;&gt;# Windows are medium gray; current window is white&lt;/span&gt;
set-window-option -g window-status-fg colour244
set-window-option -g window-status-current-fg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#ffffff&amp;#39;&lt;/span&gt;
set-window-option -g window-status-current-bg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Beeped windows get a blinding orange background&lt;/span&gt;
set-window-option -g window-status-bell-fg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;
set-window-option -g window-status-bell-bg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#d78700&amp;#39;&lt;/span&gt;
set-window-option -g window-status-bell-attr none
&lt;span style=&#34;color:#75715e&#34;&gt;# Trim window titles to a reasonable length&lt;/span&gt;
set-window-option -g window-status-format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#[fg=yellow] #F#I#[default] #W &amp;#39;&lt;/span&gt;
set-window-option -g window-status-current-format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#[bg=yellow] #I#[bg=yellow] #W &amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;copy-paste&#34;&gt;&lt;strong&gt;Copy/paste&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/tmux-vi-mode.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

Tmux also supports the vi-copy mode, you can enter this mode with &lt;code&gt;CTRL-a ESC&lt;/code&gt;, then pressing &lt;code&gt;v&lt;/code&gt; for normal selection or &lt;code&gt;V&lt;/code&gt; for line selection you can mark and copy with &lt;code&gt;Y&lt;/code&gt; (by default is &lt;code&gt;ENTER&lt;/code&gt; aka &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;And as you can imagine you can paste with &lt;code&gt;CTRL-a p&lt;/code&gt;, this is really handy when copying from one pane to another or from one window to another, in Vim I recommend you &lt;code&gt;:set paste!&lt;/code&gt; before pasting into it, so it doesn&amp;rsquo;t try to format, etc.&lt;/p&gt;

&lt;p&gt;It also copies to the clipboard buffer, using xsel.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make copy mode more vim like&lt;/span&gt;
bind Escape copy-mode
unbind p
bind p paste-buffer
bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down
unbind-key -T copy-mode-vi Space     ;   bind-key -T copy-mode-vi v send-keys -X begin-selection

unbind-key -T copy-mode-vi Enter     ;   bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xsel -i --clipboard&amp;#34;&lt;/span&gt;
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xsel -i --clipboard&amp;#34;&lt;/span&gt;

unbind-key -T copy-mode-vi C-v       ;   bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
unbind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;         ;   bind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; send-keys -X begin-selection
unbind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;         ;   bind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; send-keys -X copy-selection&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about tmux a good place to start is the &lt;a href=&#34;https://wiki.archlinux.org/index.php/tmux&#34;&gt;Arch Linux wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;notes&#34;&gt;&lt;strong&gt;notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Sometimes you can have issues with the keys &lt;code&gt;HOME&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt;, this can help with that.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Home / End patch&lt;/span&gt;
bind -n End send-key C-e
bind -n Home send-key C-a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From zero to hero with kops and AWS</title>
      <link>https://techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</guid>
      <tags>
      
        <tag>AWS</tag>
      
        <tag>kops</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In this article we will create a cluster from scratch with &lt;a href=&#34;https://github.com/kubernetes/kops&#34;&gt;kops&lt;/a&gt; (K8s installation, upgrades and management) in &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;, We will configure &lt;a href=&#34;https://github.com/kubernetes-sigs/aws-alb-ingress-controller&#34;&gt;aws-alb-ingress-controller&lt;/a&gt; (External traffic into our services/pods) and &lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns&#34;&gt;external dns&lt;/a&gt; (Update the records based in the ingress rules) and also learn a bit about awscli in the process.&lt;/p&gt;

&lt;p&gt;Basically we will have a fully functional cluster that will be able to handle public traffic in minutes, first we will install the cluster with kops, then we will enable the ingress controller and lastly external-dns, then we will deploy a basic app to test that everything works fine, SSL/TLS is out of the scope but it&amp;rsquo;s fairly easy to implement if you are using ACM.&lt;/p&gt;

&lt;p&gt;Just in case you don&amp;rsquo;t know this setup is not going to be free, cheap for sure because we will use small instances, etc, but not completely free, so before you dive in, be sure that you can spend a few bucks testing it out.&lt;/p&gt;

&lt;h3 id=&#34;kops&#34;&gt;&lt;strong&gt;Kops&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This is an awesome tool to setup and maintain your clusters, currently only compatible with AWS and GCE, other platforms are planned and some are also supported in alpha, we will be using AWS in this example, it requires kubectl so make sure you have it installed:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -LO https://github.com/kubernetes/kops/releases/download/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Export the credentials that we will be using to create the kops user and policies&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export AWS_ACCESS_KEY_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;XXXX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; export AWS_SECRET_ACCESS_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;XXXXX&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can do it this way or just use &lt;code&gt;aws configure&lt;/code&gt; and set a profile.&lt;/p&gt;

&lt;p&gt;The next thing that we need are IAM credentials for kops to work, you will need awscli configured and working with your AWS admin-like account most likely before proceeding:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create iam group&lt;/span&gt;
aws iam create-group --group-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Group&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupId&amp;#34;: &amp;#34;AGPAIABI3O4WYM46AIX44&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:group/kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:04:23Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops

&lt;span style=&#34;color:#75715e&#34;&gt;# Attach policies&lt;/span&gt;
aws iam create-user --user-name kops
aws iam add-user-to-group --user-name kops --group-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Group&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupId&amp;#34;: &amp;#34;AGPAIABI3O4WYM46AIX44&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:group/kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:04:23Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Create access key - save the output of this command.&lt;/span&gt;
aws iam create-access-key --user-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;AccessKey&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UserName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AccessKeyId&amp;#34;: &amp;#34;AKIAJE*********&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Status&amp;#34;: &amp;#34;Active&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;SecretAccessKey&amp;#34;: &amp;#34;zWJhfemER**************************&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:05:44Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The last command will output the access key and the secret key for the &lt;em&gt;kops&lt;/em&gt; user, save that information because we will use it from now on, note that we gave kops a lot of power with that user, so be careful with the keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional permissions to be able to create ALBs&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; kops-alb-policy.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Statement&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;ec2:Describe*&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;iam:CreateServiceLinkedRole&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;tag:GetResources&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;elasticloadbalancing:*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

aws iam create-policy --policy-name kops-alb-policy --policy-document file://kops-alb-policy.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Policy&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyName&amp;#34;: &amp;#34;kops-alb-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyId&amp;#34;: &amp;#34;ANPAIRIYZZZTCPJGNZZXS&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:policy/kops-alb-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultVersionId&amp;#34;: &amp;#34;v1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AttachmentCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PermissionsBoundaryUsageCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;IsAttachable&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T03:50:00Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UpdateDate&amp;#34;: &amp;#34;2019-01-18T03:50:00Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; kops-route53-policy.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Statement&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ChangeResourceRecordSets&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;arn:aws:route53:::hostedzone/*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ListHostedZones&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ListResourceRecordSets&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

aws iam create-policy --policy-name kops-route53-policy --policy-document file://kops-route53-policy.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Policy&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyName&amp;#34;: &amp;#34;kops-route53-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyId&amp;#34;: &amp;#34;ANPAIEWAGN62HBYC7QOS2&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:policy/kops-route53-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultVersionId&amp;#34;: &amp;#34;v1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AttachmentCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PermissionsBoundaryUsageCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;IsAttachable&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T03:15:37Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UpdateDate&amp;#34;: &amp;#34;2019-01-18T03:15:37Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that even we just created these kops policies for alb and route53 we cannot add them right now, we need to first create the cluster, you can skip them if you don&amp;rsquo;t plan on using these resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we will also export or set the cluster name and kops state store as environment variables&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k8s.techsquad.rocks
export KOPS_STATE_STORE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;techsquad-cluster-state-store&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We will be using these in a few places, so to not repeat ourselves let&amp;rsquo;s better have it as variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create the zone for the subdomain in Route53&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;uuidgen&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; aws route53 create-hosted-zone --name &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --caller-reference $ID | jq .DelegationSet.NameServers
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-848.awsdns-42.net&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-12.awsdns-01.com&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-1047.awsdns-02.org&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-1862.awsdns-40.co.uk&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As I&amp;rsquo;m already using this domain for the blog with github we can create a subdomain for it and add some NS records in our root zone for that subdomain, in this case k8s.techsquad.rocks. To make this easier I will show you how it should look like:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/kops-dns-subdomain.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

So with this change and our new zone in Route53 for the subdomain, we can freely manage it like if it was another domain, this means that everything that goes to *.k8s.techsquad.rocks will be handled by our Route53 zone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a bucket to store the cluster state&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api create-bucket &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --region us-east-1
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Location&amp;#34;: &amp;#34;/techsquad-cluster-state-store&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that bucket names are unique, so it&amp;rsquo;s always a good idea to prefix them with your domain name or something like that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set the versioning on, in case we need to rollback at some point&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-versioning --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;  --versioning-configuration Status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Enabled&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set encryption on for the bucket&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-encryption --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --server-side-encryption-configuration &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;Rules&amp;#34;:[{&amp;#34;ApplyServerSideEncryptionByDefault&amp;#34;:{&amp;#34;SSEAlgorithm&amp;#34;:&amp;#34;AES256&amp;#34;}}]}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And finally let&amp;rsquo;s create our cluster&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export KOPS_STATE_STORE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

kops create cluster &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --zones us-east-1a &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --networking calico &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --yes
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:06.449479   10314 create_cluster.go:1318] Using SSH public key: /home/kainlite/.ssh/id_rsa.pub&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:08.367862   10314 create_cluster.go:472] Inferred --cloud=aws from zone &amp;#34;us-east-1a&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:09.736030   10314 subnets.go:184] Assigned CIDR 172.20.32.0/19 to subnet us-east-1a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# W0117 23:14:18.049687   10314 firewall.go:249] Opening etcd port on masters for access from the nodes, for calico.  This is unsafe in untrusted environments.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:19.385541   10314 executor.go:91] Tasks: 0 done / 77 total; 34 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:21.779681   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-aggregator-ca&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:21.940026   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;ca&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:24.404810   10314 executor.go:91] Tasks: 34 done / 77 total; 24 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.548234   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;master&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.689470   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-aggregator&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.766563   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-scheduler&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.863562   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-controller-manager&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.955776   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubecfg&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.972837   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-proxy-client&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.973239   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kops&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.055466   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubelet&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.127778   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubelet-api&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.570516   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-proxy&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:29.503168   10314 executor.go:91] Tasks: 58 done / 77 total; 17 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:31.594404   10314 executor.go:91] Tasks: 75 done / 77 total; 2 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:33.297131   10314 executor.go:91] Tasks: 77 done / 77 total; 0 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:33.297168   10314 dns.go:153] Pre-creating DNS records&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:34.947302   10314 update_cluster.go:291] Exporting kubecfg for cluster&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kops has set your kubectl context to k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Cluster is starting.  It should be ready in a few minutes.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Suggestions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * validate cluster: kops validate cluster&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * list nodes: kubectl get nodes --show-labels&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * ssh to the master: ssh -i ~/.ssh/id_rsa admin@api.k8s.techsquad.rocks&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * the admin user is specific to Debian. If not using Debian please use the appropriate user based on your OS.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * read about installing addons at: https://github.com/kubernetes/kops/blob/master/docs/addons.md.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We set the KOPS_STATE_STORE to a valid S3 url for kops, and then created the cluster, this will set kubectl context to our new cluster, we might need to wait a few minutes before being able to use it, but before doing anything let&amp;rsquo;s validate that&amp;rsquo;s up and ready.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kops validate cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Using cluster from kubectl context: k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Validating cluster k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# INSTANCE GROUPS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# master-us-east-1a       Master  m3.medium       1       1       us-east-1a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# nodes                   Node    t2.medium       2       2       us-east-1a&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# NODE STATUS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                            ROLE    READY&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-39-123.ec2.internal   node    True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-52-65.ec2.internal    node    True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-61-51.ec2.internal    master  True&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Your cluster k8s.techsquad.rocks is ready&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The validation passed and we can see that our cluster is ready, it can take several minutes until the cluster is up and functional, in this case it took about 3-5 minutes.&lt;/p&gt;

&lt;p&gt;We will create an additional subnet to satisfy our ALB:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 create-subnet --vpc-id vpc-06e2e104ad785474c --cidr-block &lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.20.64.0/19 --availability-zone us-east-1b
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Subnet&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AvailabilityZone&amp;#34;: &amp;#34;us-east-1b&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AvailableIpAddressCount&amp;#34;: 8187,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CidrBlock&amp;#34;: &amp;#34;172.20.64.0/19&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultForAz&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;MapPublicIpOnLaunch&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;State&amp;#34;: &amp;#34;pending&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;SubnetId&amp;#34;: &amp;#34;subnet-017a5609ce6104e1b&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;VpcId&amp;#34;: &amp;#34;vpc-06e2e104ad785474c&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AssignIpv6AddressOnCreation&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Ipv6CidrBlockAssociationSet&amp;#34;: []&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;KubernetesCluster,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k8s.techsquad.rocks
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Name,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;us-east-1b.k8s.techsquad.rocks
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SubnetType,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Public
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes.io/cluster/k8s.techsquad.rocks,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;owned
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes.io/role/elb,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that we applied some required tags for the controller, and created an extra subnet, in a HA setup this would not be necessary since kops would create it for us but this is a small testing/dev cluster, so we will need to do it manually.&lt;/p&gt;

&lt;p&gt;And lastly a security group for our ALB:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 create-security-group --group-name WebApps --description &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default web security group&amp;#34;&lt;/span&gt;  --vpc-id vpc-06e2e104ad785474c
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;GroupId&amp;#34;: &amp;#34;sg-09f0b1233696e65ef&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws ec2 authorize-security-group-ingress --group-id sg-09f0b1233696e65ef --protocol tcp --port &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; --cidr &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id sg-057d2b0f6e288aa70 --protocol all --port &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; --source-group sg-09f0b1233696e65ef&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that this rule will open the port 80 to the world, you can add your ip or your VPN ips there if you want to restrict it, the second rule will allow the traffic from the load balancer to reach the nodes where our app is running.&lt;/p&gt;

&lt;h3 id=&#34;aws-alb-ingress-controller&#34;&gt;&lt;strong&gt;Aws-alb-ingress-controller&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We will use &lt;a href=&#34;https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/&#34;&gt;Aws ALB Ingress Controller&lt;/a&gt;, to serve our web traffic, this will create an manage an ALB based in our ingress rules.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/rbac-role.yaml

clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress-controller&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress-controller&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Download the manifest and then modify the cluster-name to &lt;code&gt;k8s.techsquad.rocks&lt;/code&gt; and a few other parameters, you can list the vpcs with &lt;code&gt;aws ec2 describe-vpcs&lt;/code&gt; it will have some kops tags, so it&amp;rsquo;s easy to identify.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -sS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/alb-ingress-controller.yaml&amp;#34;&lt;/span&gt; &amp;gt; alb-ingress-controller.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Or copy and paste the following lines:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; alb-ingress-controller.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Application Load Balancer (ALB) Ingress Controller Deployment Manifest.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# This manifest details sensible defaults for deploying an ALB Ingress Controller.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# GitHub: https://github.com/kubernetes-sigs/aws-alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: apps/v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # Namespace the ALB Ingress Controller should run in. Does not impact which
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # namespaces it&amp;#39;s able to resolve ingress resource for. For limiting ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # namespace scope, see --watch-namespace.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: kube-system
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  replicas: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  strategy:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    rollingUpdate:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      maxSurge: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      maxUnavailable: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    type: RollingUpdate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      creationTimestamp: null
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - -v=1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Limit the namespace where this ALB Ingress Controller deployment will
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # resolve ingress resources. If left commented, all namespaces are used.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - --watch-namespace=your-k8s-namespace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --feature-gates=waf=false
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Setting the ingress-class flag below ensures that only ingress resources with the
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # annotation kubernetes.io/ingress.class: &amp;#34;alb&amp;#34; are respected by the controller. You may
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # choose any class you&amp;#39;d like for this controller to respect.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --ingress-class=alb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Name of your cluster. Used when naming resources created
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # by the ALB Ingress Controller, providing distinction between
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # clusters.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --cluster-name=k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS VPC ID this ingress controller will use to create AWS resources.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If unspecified, it will be discovered from ec2metadata.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --aws-vpc-id=vpc-06e2e104ad785474c
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS region this ingress controller will operate in.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If unspecified, it will be discovered from ec2metadata.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # List of regions: http://docs.aws.amazon.com/general/latest/gr/rande.html#vpc_region
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --aws-region=us-east-1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Enables logging on all outbound requests sent to the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If logging is desired, set to true.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - ---aws-api-debug
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Maximum number of times to retry the aws calls.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # defaults to 10.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - --aws-max-retries=10
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          env:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS key id for authenticating with the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # This is only here for examples. It&amp;#39;s recommended you instead use
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # a project like kube2iam for granting access.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #- name: AWS_ACCESS_KEY_ID
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #  value: KEYVALUE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS key secret for authenticating with the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # This is only here for examples. It&amp;#39;s recommended you instead use
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # a project like kube2iam for granting access.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #- name: AWS_SECRET_ACCESS_KEY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #  value: SECRETVALUE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          # Repository location of the ALB Ingress Controller.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          image: 894847497797.dkr.ecr.us-west-2.amazonaws.com/aws-alb-ingress-controller:v1.0.0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          imagePullPolicy: Always
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name: server
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          resources: {}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          terminationMessagePath: /dev/termination-log
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      dnsPolicy: ClusterFirst
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      restartPolicy: Always
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      securityContext: {}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      terminationGracePeriodSeconds: 30
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccountName: alb-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccount: alb-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that I only modified the args section if you want to compare it with the original.&lt;/p&gt;

&lt;p&gt;Then finally apply it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f alb-ingress-controller.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.apps &amp;#34;alb-ingress-controller&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;external-dns&#34;&gt;&lt;strong&gt;External-dns&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns/blob/master/docs/tutorials/aws.md&#34;&gt;External DNS&lt;/a&gt; will update our zone in Route53 based in the ingress rules as well, so everything will be done automatically for us once we add an ingress resource.&lt;/p&gt;

&lt;p&gt;But first let&amp;rsquo;s attach those policies that we created before:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name nodes.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name masters.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name nodes.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name masters.k8s.techsquad.rocks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that we just used the policies that we created before but we needed the cluster running because kops creates the roles nodes.k8s.techsquad.rocks and masters.k8s.techsquad.rocks, and this is needed for the aws-alb-ingress-controller and external-dns so these are able to do their job.&lt;/p&gt;

&lt;p&gt;We need to download the manifests and modify a few parameters to match our deployment, the parameters are domain-filter and txt-owner-id, the rest is as is:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Ss https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.0/docs/examples/external-dns.yaml &amp;gt; external-dns.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This configuration will only update records, that&amp;rsquo;s the default policy (upsert), and it will only look for public hosted zones.&lt;/p&gt;

&lt;p&gt;Or copy and paste the following lines:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; external-dns.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ServiceAccount
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ClusterRole
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;services&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;pods&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;extensions&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;ingresses&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;nodes&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ClusterRoleBinding
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns-viewer
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;roleRef:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  apiGroup: rbac.authorization.k8s.io
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  kind: ClusterRole
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;subjects:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- kind: ServiceAccount
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: default
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: extensions/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  strategy:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    type: Recreate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        app: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccountName: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        image: registry.opensource.zalan.do/teapot/external-dns:v0.5.9
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --source=service
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --source=ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --domain-filter=k8s.techsquad.rocks # will make ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --provider=aws
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --policy=upsert-only # would prevent ExternalDNS from deleting any records, omit to enable full synchronization
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --aws-zone-type=public # only look at public hosted zones (valid values are public, private or no value for both)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --registry=txt
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --txt-owner-id=k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And apply it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f external-dns.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# serviceaccount &amp;#34;external-dns&amp;#34; unchanged&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# clusterrole.rbac.authorization.k8s.io &amp;#34;external-dns&amp;#34; configured&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# clusterrolebinding.rbac.authorization.k8s.io &amp;#34;external-dns-viewer&amp;#34; configured&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.extensions &amp;#34;external-dns&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Validate that we have everything that we installed up and running:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get pods
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                            READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# external-dns-7d7998f7bb-lb5kq   1/1       Running   0          2m&lt;/span&gt;

kubectl get pods -n kube-system
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                                                   READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# alb-ingress-controller-5885ddd5f9-9rsc8                1/1       Running   0          12m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-kube-controllers-f6bc47f75-n99tl                1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-4ps9c                                      2/2       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-kjztv                                      2/2       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-zs4fg                                      2/2       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# dns-controller-67f5c6b7bd-r67pl                        1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# etcd-server-events-ip-172-20-42-37.ec2.internal        1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# etcd-server-ip-172-20-42-37.ec2.internal               1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-apiserver-ip-172-20-42-37.ec2.internal            1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-controller-manager-ip-172-20-42-37.ec2.internal   1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-756bfc7fdf-2kzjs                              3/3       Running   0          24m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-756bfc7fdf-rq5nd                              3/3       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-autoscaler-787d59df8f-c2d52                   1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-42-109.ec2.internal               1/1       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-42-37.ec2.internal                1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-54-175.ec2.internal               1/1       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-scheduler-ip-172-20-42-37.ec2.internal            1/1       Running   0          26m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We can see that alb-ingress-controller is running, also external-dns, and everything looks good and healthy, time to test it with a deployment.&lt;/p&gt;

&lt;h3 id=&#34;testing-everything&#34;&gt;&lt;strong&gt;Testing everything&lt;/strong&gt;&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-deployment.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-service.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# namespace &amp;#34;2048-game&amp;#34; created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.extensions &amp;#34;2048-deployment&amp;#34; created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# service &amp;#34;service-2048&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to download and edit the ingress resource to make it use our domain so we can then see the record pointing to the ALB.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Ss https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-ingress.yaml &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Or just copy and paste the next snippet.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; 2048-ingress.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: extensions/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: &amp;#34;2048-ingress&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: &amp;#34;2048-game&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  annotations:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    kubernetes.io/ingress.class:                alb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/scheme:           internet-facing
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/target-type:      instance
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/subnets:          subnet-017a5609ce6104e1b, subnet-060e6d3c3d3c2b34a
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/security-groups:  sg-09f0b1233696e65ef
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # You can check all the alternatives here:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # https://github.com/riccardofreixo/alb-ingress-controller/blob/master/docs/ingress-resources.md
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: 2048-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  - host: 2048.k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    http:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      paths:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - backend:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          serviceName: &amp;#34;service-2048&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          servicePort: 80
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        path: /*
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can use &lt;code&gt;aws ec2 describe-subnets&lt;/code&gt;, to find the first subnet id, this subnet already has some tags that we need in order to make it work, for example: &lt;code&gt;kubernetes.io/role/elb: 1&lt;/code&gt;, and the second subnet is the one that we created manually and applied the same tags.&lt;/p&gt;

&lt;p&gt;And finally apply it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ingress.extensions &amp;#34;2048-ingress&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Wait a few moments and verify.&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The ALB&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-listeners.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The DNS records&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-route53-records.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And the app&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-result.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;&lt;strong&gt;Clean up&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Remember this is not free, and if you don&amp;rsquo;t want to get charged after you&amp;rsquo;re done testing just shutdown and delete everything.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name nodes.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name masters.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name nodes.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name masters.k8s.techsquad.rocks

kops delete cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --yes
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Deleted kubectl config for k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Deleted cluster: &amp;#34;k8s.techsquad.rocks&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This command is really verbose, so I skipped it to the end, be aware that in order to delete the cluster with kops you first need to detach the additionally attached privileges. Also be careful to delete first the ingress resources so the ALB gets removed before you delete the cluster, or you will have an ALB laying around afterwards. You can re-run it if it gets stuck and cannot delete any resource.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I was going to use helm and deploy a more complex application here, but the article was already too long, so I decided to go with the aws alb ingress controller example.&lt;/li&gt;
&lt;li&gt;If something doesn&amp;rsquo;t go well or things aren&amp;rsquo;t happening you can always check the logs for external-dns and aws-alb-ingress-controller, the messages are usually very descriptive and easy to understand.&lt;/li&gt;
&lt;li&gt;For an ALB you need two subnets in two different AZs beforehand.&lt;/li&gt;
&lt;li&gt;If you are going to use ALBs, have in mind that it will create an ALB for each deployment, there is a small project that merges everything into one ALB but you need to have a unified or consolidated way to do health checks or or some of the apps will fail and the ALB will return a 502, the project can be found &lt;a href=&#34;https://github.com/jakubkulhan/ingress-merge&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Documenting what you do and how you do it (Also keeping the documentation updated is really important), not only will help the future you (Yes, you can thank your past self when reading and old doc), but also it will make it easier to share the knowledge and purpose of whatever you are implementing with your team.&lt;/li&gt;
&lt;li&gt;I spent 3 bucks with all the instances and dns zones, etc during this tutorial in case you are interested :).&lt;/li&gt;
&lt;li&gt;Notes I also removed all $ from the code blocks and added the output of the commands with # OUTPUT:, let me know if this is clear and easy to read, or if you have any suggestion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My local environment</title>
      <link>https://techsquad.rocks/blog/my_local_environment/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/my_local_environment/</guid>
      <tags>
      
        <tag>urxvt</tag>
      
        <tag>vim</tag>
      
        <tag>linux</tag>
      
        <tag>tmux</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This article is about my current configuration, but I&amp;rsquo;m going to talk only about the terminal and my text editor because those will work in any linux distribution, I&amp;rsquo;m currently using &lt;strong&gt;Arch Linux&lt;/strong&gt; and &lt;strong&gt;AwesomeWM&lt;/strong&gt; (I used Gnome Shell previously, and Gnome 2 before that), you can find my &lt;a href=&#34;https://github.com/kainlite/dotfiles&#34;&gt;dotfiles here&lt;/a&gt; with all my configurations.&lt;/p&gt;

&lt;p&gt;While my terminal doesn&amp;rsquo;t look exactly like the one from the picture you can get something like that with &lt;a href=&#34;https://github.com/jtyr/gbt&#34;&gt;GBT&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;terminal&#34;&gt;Terminal&lt;/h3&gt;

&lt;p&gt;My current terminal is &lt;strong&gt;rxvt-unicode&lt;/strong&gt; and I&amp;rsquo;m pretty happy with it, it&amp;rsquo;s relatively easy to configure and use, it looks like this:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/urxvt.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

And the configuration file can be &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.Xresources&#34;&gt;found here&lt;/a&gt;, note that even if you don&amp;rsquo;t like Ponys by any reason, it&amp;rsquo;s useful to test colors in the terminal.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s different than other terminals I have tried in the way it manages and uses the configuration, it uses an additional tool called &lt;code&gt;xrdb&lt;/code&gt; (X server resource database utility) to manage the configuration provided in the configuration file &lt;code&gt;.Xresources&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Loads the configuration from Xresources in xrdb&lt;/span&gt;
$ xrdb -merge .Xresources

&lt;span style=&#34;color:#75715e&#34;&gt;# List the current configuration&lt;/span&gt;
$ xrdb -query

&lt;span style=&#34;color:#75715e&#34;&gt;# Deletes the current database&lt;/span&gt;
$ xrdb -remove&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;theme&#34;&gt;Theme&lt;/h3&gt;

&lt;p&gt;My current theme is &lt;a href=&#34;https://github.com/morhetz/gruvbox&#34;&gt;gruvbox&lt;/a&gt; in Vim and also in my &lt;a href=&#34;https://github.com/morhetz/gruvbox-contrib/blob/master/xresources/gruvbox-dark.xresources&#34;&gt;terminal&lt;/a&gt;, and changing from &lt;a href=&#34;https://ethanschoonover.com/solarized/&#34;&gt;solazired&lt;/a&gt; to it is what inspired this small article.&lt;/p&gt;

&lt;h3 id=&#34;tmux&#34;&gt;Tmux&lt;/h3&gt;

&lt;p&gt;I also use tmux to maintan sessions, some of it&amp;rsquo;s nice features are tiling, tabs. The configuration can be &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.tmux.conf&#34;&gt;found here&lt;/a&gt;. I move between tabs with control-h and control-l, and between panes with control-a [hjkl].&lt;/p&gt;

&lt;h3 id=&#34;vim&#34;&gt;Vim&lt;/h3&gt;

&lt;p&gt;As my text editor I really like and enjoy using Vim, there is always something to learn but once you make some good habits it pays off in the way you write and move around, you can check some amazing screencasts on vim &lt;a href=&#34;http://vimcasts.org/&#34;&gt;here&lt;/a&gt; and also the book Practical Vim can be really helpful to get started and/or improve your current vim-fu.&lt;/p&gt;

&lt;p&gt;As a plugin manager I use &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.vimrc.bundles&#34;&gt;Plug&lt;/a&gt; even that it&amp;rsquo;s not really necessary with Vim 8, but that is a matter of taste I guess. You can see my full vim configuration &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.vimrc&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It looks something like this, as you can see I have a small tmux pane in the bottom with Hugo &lt;em&gt;compiling&lt;/em&gt; the site after every save and live reloading it in my browser:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/vim.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m also using zsh and &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;oh-my-zsh&lt;/a&gt; with the theme agnoster. I really like zsh it&amp;rsquo;s fast and has some nice features like autocomplete everywhere, but again this is a matter of taste.&lt;/li&gt;
&lt;li&gt;I like to take advantage of all the space in the screen, that&amp;rsquo;s why AwesomeWM fits great (even that I do not use the tiling feature a lot, tabs and full screen apps), with some minor configuration I&amp;rsquo;m able to do everything from the keyboard, I use the mouse when checking emails and things like that but otherwise the keyboard is more than enough.&lt;/li&gt;
&lt;li&gt;I used cowsay and ponysay in the first screenshot so you can have an idea of how the terminal looks like.&lt;/li&gt;
&lt;li&gt;If you are going to use unicode I recommend you to install the fonts from nerd-fonts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
