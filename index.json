{
  "version": "https://jsonfeed.org/version/1",
  "title": "Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more",
  "home_page_url": "https://techsquad.rocks/",
  "feed_url": "https://techsquad.rocks/index.json",
  "items": [
    
    {
      "id": "https://techsquad.rocks/blog/getting_started_with_terraform_modules/",
      "url": "https://techsquad.rocks/blog/getting_started_with_terraform_modules/",
      "title": "Getting started with terraform modules",
      "date_published": "2019-06-24T00:00:00Z",
      "tags": ["terraform","kubernetes","gcp"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will see a subtle introduction to terraform modules, how to pass data into the module, get something from the module and create a resource (GKE cluster), it\u0026rsquo;s intended to be as simple as possible just to be aware of what a module is composed of, or how can you do your own modules, sometimes it makes sense to have modules to abstract implementations that you use over several projects, or things that are often repeated along the project. So let\u0026rsquo;s see what it takes to create and use a module. The source code for this article can be found \u003ca href=\"https://github.com/kainlite/terraform-module-example\"\u003ehere\u003c/a\u003e. Note that in this example I\u0026rsquo;m using GCP since they give you $300 USD for a year to try their services and it looks pretty good so far, after sign-up you will need to go to IAM, then create a service account and after that export the the key (this is required for the terraform provider to talk to GCP).\u003c/p\u003e\n\n\u003ch5 id=\"composition-of-a-module\"\u003e\u003cstrong\u003eComposition of a module\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eA module can be any folder with a \u003ccode\u003emain.tf\u003c/code\u003e file in it, yes, that is the only \u003cem\u003erequired\u003c/em\u003e file for a module to be usable, but the recommendation is that you also put a \u003ccode\u003eREADME.md\u003c/code\u003e file with a description of the module if it\u0026rsquo;s intended to be used by people if it\u0026rsquo;s a sub-module it\u0026rsquo;s not necessary, also you will need a file called \u003ccode\u003evariables.tf\u003c/code\u003e and other \u003ccode\u003eoutputs.tf\u003c/code\u003e of course if it\u0026rsquo;s a big module that cannot be splitted into sub-modules you can split those files for convenience or readability, variables should have descriptions so the tooling can show you what are they for, you can read more about the basics for a module \u003ca href=\"https://www.terraform.io/docs/modules/index.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eBefore moving on let\u0026rsquo;s see the folder structure of our project:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/4229babfdf16f9caaf16889246a5b53c.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"okay-enough-talking-show-me-the-code\"\u003e\u003cstrong\u003eOkay enough talking, show me the code\u003c/strong\u003e\u003c/h5\u003e\n\n\u003ch6 id=\"the-project\"\u003e\u003cstrong\u003eThe project\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eLet\u0026rsquo;s start with the \u003ccode\u003emain.tf\u003c/code\u003e that will call our module, notice that I added a few additional comments but it\u0026rsquo;s pretty much straight forward, we set the provider, then we define some variables, call our module and print some output (output can also be used to pass data between modules).\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/63f7b16e104bd3d2c827e4d491cbd347.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eThen \u003ccode\u003eterraform.tfvars\u003c/code\u003e has some values to override the defaults that we defined:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/2ff76f85396f70f5a5d0fd406fc91381.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch6 id=\"the-module\"\u003e\u003cstrong\u003eThe module\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eNow into the module itself, this module will create a GKE cluster, and while it\u0026rsquo;s not a good practice to have a module as a wrapper but for this example we will forget about that rule for a while, this is the \u003ccode\u003emain.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/8a2db80dbcba38160e4c8f0112e55424.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003evariables.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/183d577eef0b1967792b0e2e95e79e1e.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd finally the \u003ccode\u003eoutputs.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/3b30dcc163e97103e9503be86672bd39.js\"\u003e\u003c/script\u003e\nNotice that we have a lot more outputs than the one we decided to print out, but you can play with that and experiment if you want :)\u003c/p\u003e\n\n\u003ch6 id=\"testing-it\"\u003e\u003cstrong\u003eTesting it\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eFirst we need to initialize our project so terraform can put modules, provider files, etc in place, it\u0026rsquo;s a good practice to version things and to move between versions that way everything can be tested and if something is not working as expected you can always rollback to the previous state.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/346e84ef3577ef708625741a508afb2c.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eThen we will just run it.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/e77dbdd482eb26cd54414324761900f4.js\"\u003e\u003c/script\u003e\nIf we check the output we will see that the name of the cluster matches the one from our variables and at the end we can see the output that the module produced.\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see, creating a module is pretty simple and with good planing and practice it can save you a lot of effort along big projects or while working on multiple projects, let me know your thoughts about it. Always remember to destroy the resources that you\u0026rsquo;re not going to use with \u003ccode\u003eterraform destroy\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/go_grpc_cheap_ping/",
      "url": "https://techsquad.rocks/blog/go_grpc_cheap_ping/",
      "title": "Go gRPC Cheap Ping",
      "date_published": "2019-06-23T00:00:00Z",
      "tags": ["go","grpc"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will explore gRPC with a cheap ping application, basically we will do a ping and measure the time it takes for the message to go to the server and back before reporting it to the terminal. You can find the source code \u003ca href=\"https://github.com/kainlite/grpc-ping\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"protobuf\"\u003e\u003cstrong\u003eProtobuf\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you might already know gRPC serializes data using \u003ca href=\"https://developers.google.com/protocol-buffers/\"\u003eprotocol buffers\u003c/a\u003e, We are just going to create a \u003ca href=\"https://grpc.io/docs/guides/concepts/\"\u003eUnary RPC\u003c/a\u003e as follows.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/ad4f85164730c6c6fb2257329f7fc164.js\"\u003e\u003c/script\u003e\nWith this file in place we are defining a service that will be able to send a single \u003ccode\u003ePingRequest\u003c/code\u003e and get a single \u003ccode\u003ePingResponse\u003c/code\u003e, we have a \u003ccode\u003eData\u003c/code\u003e field that goes back and forth in order to send some bytes over the wire (even that we don\u0026rsquo;t really care about that, it could be important or crucial in a performance test).\u003c/p\u003e\n\n\u003ch5 id=\"generating-the-code\"\u003e\u003cstrong\u003eGenerating the code\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn order to be able to use protobuf we need to generate the code for the app that we\u0026rsquo;re writing in this case for golang the command would be this one:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/dac49c31ffaedac1d0cc1584a8cce306.js\"\u003e\u003c/script\u003e\nThis will give us a definition of the service and the required structs to carry the data that we have defined as messages.\u003c/p\u003e\n\n\u003ch5 id=\"client\"\u003e\u003cstrong\u003eClient\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe client does most of the work here, as you can see you can supply 2 arguments one to point to another host:port and the second to send a string of your liking, then it measures the time it takes to send and receive the message back and prints it to the screen with a similar line to what the actual \u003ccode\u003eping\u003c/code\u003e command looks in linux.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/663a25de0321b85bde37e006c1621e60.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"server\"\u003e\u003cstrong\u003eServer\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe server is a merely echo server since it will send back whatever you send to it and log it to the console, by default it will listen in port \u003ccode\u003e50000\u003c/code\u003e.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/7c809672a86b6454f7080a88d87da977.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"testing-it\"\u003e\u003cstrong\u003eTesting it\u003c/strong\u003e\u003c/h5\u003e\n\n\u003ch6 id=\"regular-ping\"\u003e\u003cstrong\u003eRegular ping\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/8f60f178d0e6796256647d0e5a5c4078.js\"\u003e\u003c/script\u003e\n\n\u003ch6 id=\"client-1\"\u003e\u003cstrong\u003eClient\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eThis is what we would see in the terminal while testing it.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/3abc2ac34d1390680fc9fb5787c1da02.js\"\u003e\u003c/script\u003e\nAs you can see the initial connection takes a bit more time but after that the roundtrip time is very consistent (of course our cheap ping doesn\u0026rsquo;t cover errors, packet loss, etc).\u003c/p\u003e\n\n\u003ch6 id=\"server-1\"\u003e\u003cstrong\u003eServer\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eThe server just echoes back and logs what received over the wire.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/edf6fc9b5f1c71e2eab054b5dbae3a24.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see gRPC is pretty fast and simplifies a lot everything that you need to do in order to have a highly efficient message system or communication between microservices for example, it\u0026rsquo;s also easy to generate the boilerplate for whatever language you prefer and have a common interface that everyone has to agree on.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/go_continuous_delivery_with_terraform_and_kubernetes/",
      "url": "https://techsquad.rocks/blog/go_continuous_delivery_with_terraform_and_kubernetes/",
      "title": "Go continuous delivery with Terraform and Kubernetes",
      "date_published": "2019-05-05T00:00:00Z",
      "tags": ["travis-ci","docker","golang","go","linux","continuous-integration","continuous-delivery","terraform"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will continue where we left off the last time \u003ca href=\"https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/\"\u003eGo continuous integration with Travis CI and Docker\u003c/a\u003e, the files used here can be found \u003ca href=\"https://github.com/kainlite/whatismyip-go/tree/continuos-delivery\"\u003eHERE\u003c/a\u003e, and we will be creating our terraform cluster with a load balancer and generating our kubeconfig file based on the certs provided by terraform on travis and then finally creating a basic deployment and validate that everything works.\u003c/p\u003e\n\n\u003ch5 id=\"digitalocean\"\u003e\u003cstrong\u003eDigitalOcean\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eWe need to create a token so terraform can create resources using DO API. Go to your account then in the menu on the left click API, then you should see something like this:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-token-1.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nOnce there click generate token (give it a meaningful name to you), and make sure it can write.\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-token-2.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"terraform\"\u003e\u003cstrong\u003eTerraform\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs the next step it would be good to set the token for terraform, so let\u0026rsquo;s examine all files and see what they are going to do, but first we\u0026rsquo;re going to provide the secrets to our app via environment variables, and I\u0026rsquo;ve found quite useful to use \u003ccode\u003edirenv\u003c/code\u003e on many projects, so the content of the first file \u003ccode\u003e.envrc\u003c/code\u003e would look something like:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/2da0abc285e227b966b492f8e7f3eddc.js\"\u003e\u003c/script\u003e\nand after that you will need to allow it\u0026rsquo;s execution by running \u003ccode\u003edirenv allow\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe first terraform file that we are going to check is \u003ccode\u003eprovider.tf\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/add2f8b31929468359e9222bce0855f1.js\"\u003e\u003c/script\u003e\nAs we\u0026rsquo;re using environment variables we need to declare it and then set it in the provider, for now we only need the token.\u003c/p\u003e\n\n\u003cp\u003eThen the \u003ccode\u003ekubernetes.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/11d6eb62a0b3c5f0e5978e6b43e4b166.js\"\u003e\u003c/script\u003e\nThis file will be the responsible of creating the kubernetes cluster, as it\u0026rsquo;s our development cluster we only need one node.\u003c/p\u003e\n\n\u003cp\u003eNext the file \u003ccode\u003elb.tf\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/85185e39960765a189ee70b5c9489fea.js\"\u003e\u003c/script\u003e\nThis one is particularly interesting because it will provide a point of access to our applications (port 80 on it\u0026rsquo;s public IP address), and it also uses a basic health check.\u003c/p\u003e\n\n\u003cp\u003eAnd last but not least the \u003ccode\u003eoutput.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/18205b3ba693be054e2ea22832f4ecef.js\"\u003e\u003c/script\u003e\nThis file will print the kubernetes config file that we need to be able to use \u003ccode\u003ekubectl\u003c/code\u003e, and also the IP address of our load balancer.\u003c/p\u003e\n\n\u003cp\u003eSo what do we do with all of this?, first you will need to run \u003ccode\u003eterraform init\u003c/code\u003e inside the terraform folder to download plugins and providers, once that is done you can run \u003ccode\u003eterraform plan\u003c/code\u003e to see what changes terraform wants to make or \u003ccode\u003eterraform apply\u003c/code\u003e to do the changes. How is that going to look?:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/d4a4c4f18be5022e2ed23e74879ff975.js\"\u003e\u003c/script\u003e\nThis will create our cluster in DigitalOcean, remember to destroy it after you\u0026rsquo;re done using it with \u003ccode\u003eterraform destroy\u003c/code\u003e, if you don\u0026rsquo;t use a plan you will be prompted for a confirmation when you do \u003ccode\u003eterraform apply\u003c/code\u003e, review and say \u003ccode\u003eyes\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"travis\"\u003e\u003cstrong\u003eTravis\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eWe did some additions to our \u003ccode\u003e.travis.yml\u003c/code\u003e file, which are mostly to prepare \u003ccode\u003ekubectl\u003c/code\u003e and to also trigger a deployment if the build succeeded.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/69cdd243a815b68c483bdc71e6bf9186.js\"\u003e\u003c/script\u003e\nAs shown in the screenshot we took the base64 encoded certificates and loaded them into travis as environment variables (KUBERNETES_CA, KUBERNETES_CLIENT_CA, KUBERNETES_CLIENT_KEY, KUBERNETES_ENDPOINT), then we decode that into files, create the configuration using kubectl and set it as active and then we apply the deployment with the newly rendered hash.\u003c/p\u003e\n\n\u003cp\u003eThis is how it should look in travis:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-environment-variables.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s take a look at the generated kubernetes configuration and what values you should take into account:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/ebd9e3c82d4aa0f1e43be53078a9b593.js\"\u003e\u003c/script\u003e\nNever do that, don\u0026rsquo;t share your configuration or anybody will be able to use your cluster, also be careful not to commit it to your repo, in this example it\u0026rsquo;s no longer valid because after running the examples I destroyed the cluster with \u003ccode\u003eterraform destroy\u003c/code\u003e. Now there are four values of interest for us: certificate-authority-data: KUBERNETES_CA, client-certificate-data: KUBERNETES_CLIENT_CA, client-key-data: KUBERNETES_CLIENT_KEY and server: KUBERNETES_ENDPOINT, with these variables we can re-create our kubernetes configuration easily using kubectl, be aware that we\u0026rsquo;re not decoding to save it in travis, we do that in the travis configuration file (\u003ccode\u003e.travis.yml\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch5 id=\"kubernetes\"\u003e\u003cstrong\u003eKubernetes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSo after all that, we still need to have a deployment template to deploy our application, and it\u0026rsquo;s a template because we need to replace the SHA of the current build in the manifest before committing it to the Kubernetes API, so let\u0026rsquo;s check it \u003ccode\u003emanifest.yml.template\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/aa1d9181112582ef94b5602480f95bf9.js\"\u003e\u003c/script\u003e\nHere we expose our service in the port 30000 as a NodePort, and deploy the current SHA (replaced during execution by travis)\u003c/p\u003e\n\n\u003ch5 id=\"testing-everything\"\u003e\u003cstrong\u003eTesting everything\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eValidate that the deployment went well by checking our kubernetes cluster:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/fa4e77e771c564bc14185afba4903a8c.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eFirst we test the load balancer, and as we will see the ip is not right, it\u0026rsquo;s the internal ip of the load balancer and not our public ip address.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/4d9b99cd269d2eb346f60c308af054da.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eBut if we hit our service directly we can see the correct IP address, this could be improved but it\u0026rsquo;s left as an exercise for the avid reader ◕_◕.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/cc2618efbf28bdb8c2a83d344a6dcff7.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eFinally let\u0026rsquo;s check what we should see in travis:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-travis-result-1.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAs we can see everything went well and our deployment applied successfully in our cluster\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-travis-result-2.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eI will be posting some articles about CI and CD and good practices that DevOps/SREs should have in mind, tips, tricks, and full deployment examples, this is the second part of a possible series of three articles (Next one should be about the same but using Jenkins) with a complete but basic example of CI first and then CD. This can of course change and any feedback would be greatly appreciated :).\u003c/p\u003e\n\n\u003cp\u003eIn this example many things could be improved, for example we use a node port and there is no firewall so we can hit our app directly via nodeport or using the load balancer, we should add some firewall rules so only the load balancer is able to talk to the node port range (30000-32767).\u003c/p\u003e\n\n\u003cp\u003eAlso be aware that for production this setup will not be sufficient but for a development environment would suffice initially.\u003c/p\u003e\n\n\u003cp\u003eSome useful links for \u003ca href=\"https://docs.travis-ci.com/user/job-lifecycle/\"\u003etravis\u003c/a\u003e and \u003ca href=\"https://www.terraform.io/docs/providers/do/r/kubernetes_cluster.html\"\u003eterraform\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/",
      "url": "https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/",
      "title": "Go continuous integration with Travis CI and Docker",
      "date_published": "2019-05-01T00:00:00Z",
      "tags": ["travis-ci","docker","golang","linux","continuous-integration"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will see how to create a simple continuous integration process using \u003ca href=\"https://github.com\"\u003eGithub\u003c/a\u003e, \u003ca href=\"https://travis-ci.org\"\u003eTravis-CI\u003c/a\u003e and \u003ca href=\"https://cloud.docker.com\"\u003eDocker HUB\u003c/a\u003e, the files used here can be found \u003ca href=\"https://github.com/kainlite/whatismyip-go\"\u003eHERE\u003c/a\u003e, in the next article we will continue with what we have here to provide continuous deployment possibly using Jenkins or maybe Travis, let me know which one you would prefer to see.\u003c/p\u003e\n\n\u003ch5 id=\"first-thing-first\"\u003e\u003cstrong\u003eFirst thing first\u003c/strong\u003e\u003c/h5\u003e\n\n\u003ch5 id=\"app\"\u003eApp\u003c/h5\u003e\n\n\u003cp\u003eWe will review the docker file, the app code and the travis-ci file, so let\u0026rsquo;s start with the app \u003ccode\u003emain.go\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/f7e0c3e40b02cc31a78f4eef491fa834.js\"\u003e\u003c/script\u003e\nLet\u0026rsquo;s quickly check what this code does, first we check for the port to use, then convert it to a number, register the handler for our HTTP function and listen for requests, this code should print our ip address as you would expect by the name.\u003c/p\u003e\n\n\u003cp\u003eThen the \u003ccode\u003emain_test.go\u003c/code\u003e code:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/13391af166c77ffb10b940e5a9a1ac4d.js\"\u003e\u003c/script\u003e\nThe test is fairly simple it just checks that the web server works by trying to fetch \u003ccode\u003e/\u003c/code\u003e and checking for an empty body and \u003ccode\u003e200\u003c/code\u003e status code.\u003c/p\u003e\n\n\u003ch5 id=\"docker\"\u003eDocker\u003c/h5\u003e\n\n\u003cp\u003eNext the \u003ccode\u003eDockerfile\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/5db561f6f8808f1b5eaf091887416311.js\"\u003e\u003c/script\u003e\nWe set the working directory to please go, then fetch dependencies and install our binary, we also generate a test binary, expose the port that we want to use and set the user as nobody in case someone can exploit our app and jump into our container, then just set the command to execute on \u003ccode\u003edocker run\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"travis\"\u003eTravis\u003c/h5\u003e\n\n\u003cp\u003eAnd last but not least the \u003ccode\u003e.travis.yml\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/55c5fcd1fde0bfc148b8a9ee8a41fc5a.js\"\u003e\u003c/script\u003e\nWe let travis know that we will be running some go code and also docker, then build the image, run the tests and then the app as initialization, after that we validate that the app works and lastly login to dockerhub and push the image, the important things to have in mind here is that we use variables for example the repo name, the commit SHA, and the docker username and password in a secure way, since travis-ci hides the values that we tell them to.\u003c/p\u003e\n\n\u003ch5 id=\"putting-everything-together\"\u003e\u003cstrong\u003ePutting everything together\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSo far we got the \u003ca href=\"https://github.com/kainlite/whatismyip-go\"\u003erepo\u003c/a\u003e going, the configuration for travis, the dockerfile, the app, but now we need to make use of it, so you will need to create a travis account for this to work then link your github account to it, then you will be able to sync your repositories and you should see something like this:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-travis-list.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nOnce you have your account linked you will be able to sync and enable repositories to be built.\u003c/p\u003e\n\n\u003cp\u003eAfter enabling the repository you can configure some details like environment variables, here we will set the credentials for dockerhub.\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-travis-settings.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAnd now we will create the repository in dockerhub:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-docker-repo.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nAfter the repository is created we can trigger a build from travis or push a commit to the repo in order to trigger a build and to validate that everything works.\u003c/p\u003e\n\n\u003cp\u003eYou should see something like this in travis if everything went well:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-travis-log-1.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nYou can validate that everything went well by checking the commit SHA that triggered the build.\u003c/p\u003e\n\n\u003cp\u003eAnd dockerhub:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-travis-log-2.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nThe same SHA will be used to tag the image.\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eI will be posting some articles about CI and CD and good practices that DevOps/SREs should have in mind, tips, tricks, and full deployment examples, this is the first part of a possible series of two or three articles with a complete but basic example of CI first and then CD. This can of course change and any feedback would be greatly appreciated :).\u003c/p\u003e\n\n\u003cp\u003eSome useful links for travis and \u003ca href=\"https://docs.travis-ci.com/user/docker/\"\u003edocker\u003c/a\u003e and the \u003ca href=\"https://docs.travis-ci.com/user/environment-variables/\"\u003eenvironment variables list\u003c/a\u003e that can be used.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/",
      "url": "https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/",
      "title": "Actually using Vault on Kubernetes",
      "date_published": "2019-04-29T00:00:00Z",
      "tags": ["kubernetes","vault","linux","security"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn the previous article we configured Vault with Consul on our cluster, now it\u0026rsquo;s time to go ahead and use it to provision secrets to our pods/applications. If you don\u0026rsquo;t remember about it or don\u0026rsquo;t have your Vault already configured you can go to \u003ca href=\"https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/\"\u003eGetting started with HashiCorp Vault on Kubernetes\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn this article we will actually create an example using mutual TLS and provision some secrets to our app, You can find the files used here in \u003ca href=\"https://github.com/kainlite/vault-kubernetes\"\u003ethis repo\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"creating-a-cert-for-our-new-client\"\u003e\u003cstrong\u003eCreating a cert for our new client\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs we see here we need to enable kv version 1 on \u003ccode\u003e/secret\u003c/code\u003e for this to work, then we just create a secret and store it as a kubernetes secret for myapp, note that the CA was created in the previous article and we rely on these certificates so we can keep building on that.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/2989cf05404896f7b65ac400068ac903.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"service-account-for-kubernetes\"\u003e\u003cstrong\u003eService account for kubernetes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn Kubernetes, a service account provides an identity for processes that run in a Pod so that the processes can contact the API server.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/8440fe3654d36fb2055c7ceb894f167e.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"vault-policy\"\u003e\u003cstrong\u003eVault policy\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThen we need to set a read-only policy for our secrets, we don\u0026rsquo;t want or app to be able to write or rewrite secrets.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/aef3234eb43aa37f7cce5f20ecf7c757.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"kubernetes-configuration\"\u003e\u003cstrong\u003eKubernetes configuration\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSet the environment variables to point to the running Minikube environment and enable the \u003ca href=\"https://www.vaultproject.io/docs/auth/kubernetes.html#configuration\"\u003ekubernetes authentication method\u003c/a\u003e and then validate it from a temporal Pod.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/a47d22781b177c483bfe706cc436f049.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"the-deployment-and-the-consul-template-configuration\"\u003e\u003cstrong\u003eThe deployment and the consul-template configuration\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIf you check the volume mounts and the secrets we load the certificates we created initially and use them to fetch the secret from vault\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/0cc0e90b668c2fef4d2442e1b9eed03f.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eThis is where the magic happens so we\u0026rsquo;re able to fetch secrets (thanks to that role and the token that then will be stored there)\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/f977a689000a20c5163ce72cea0039f5.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd last but not least we create a file based in the template provided which our nginx container will render on the screen later, this is done using Consul Template.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/3dd851d97eba8222dd978a2e7ed067a9.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"test-it\"\u003e\u003cstrong\u003eTest it!\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe last step would be to test all that, so after having deployed the files to kubernetes we should see something like this\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/269dd3f96ef2b5505a50513eef9ff94c.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis post was heavily inspired by \u003ca href=\"https://learn.hashicorp.com/vault/identity-access-management/vault-agent-k8s\"\u003ethis doc page\u003c/a\u003e, the main difference is that we have mutual TLS on, the only thing left would be to auto unseal our Vault, but we will left that for a future article or as an exercise for the reader.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/",
      "url": "https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/",
      "title": "Getting started with HashiCorp Vault on Kubernetes",
      "date_published": "2019-04-28T00:00:00Z",
      "tags": ["kubernetes","vault","linux","security"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eVault secures, stores, and tightly controls access to tokens, passwords, certificates, API keys, and other secrets in modern computing. What this means is that you can safely store all your App secrets in Vault without having to worry anymore how to store, provide, and use those secrets, we will see how to install it on a running kubernetes cluster and save and read a secret by our application, in this page we will be using Vault version 1.1.1, we will be using dynamic secrets, that means that each pod will have a different secret and that secret will expire once the pod is killed.\u003c/p\u003e\n\n\u003cp\u003eBefore you start you will need \u003ca href=\"https://www.consul.io/docs/install/index.html\"\u003eConsul\u003c/a\u003e, \u003ca href=\"https://www.vaultproject.io/docs/install/\"\u003eVault\u003c/a\u003e client binaries and \u003ca href=\"https://kubernetes.io/docs/tasks/tools/install-minikube/\"\u003eMinikube\u003c/a\u003e or any running cluster, you can find the files used here in \u003ca href=\"https://github.com/kainlite/vault-consul-tls\"\u003ethis repo\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis is the part one of \u003ca href=\"https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/\"\u003etwo\u003c/a\u003e\u003c/p\u003e\n\n\u003ch5 id=\"preparing-the-cluster\"\u003e\u003cstrong\u003ePreparing the cluster\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eLet\u0026rsquo;s start minikube and validate that we can reach our cluster with \u003ccode\u003eminikube start\u003c/code\u003e and then with \u003ccode\u003ekubectl get nodes\u003c/code\u003e, also the dashboard can become handy you can invoke it like this \u003ccode\u003eminikube dashboard\u003c/code\u003e\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/750ee3b20d03fe3e999844c1c80fcf3f.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"creating-certificates-for-consul-and-vault\"\u003e\u003cstrong\u003eCreating certificates for Consul and Vault\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eVault needs a backend to store data, this backend can be consul, etcd, postgres, and \u003ca href=\"https://www.vaultproject.io/docs/configuration/storage/index.html\"\u003emany more\u003c/a\u003e, so the first thing that we are going to do is create a certificate so consul and vault can speak to each other securely.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/f46c829de562750d0fb21ec25f8fa91b.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"consul\"\u003e\u003cstrong\u003eConsul\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe next steps would be to create an encryption key for the consul cluster and to create all the kubernetes resources associated with it\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/4f787ef0e5152eb14928a73b3e2b9d91.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"vault\"\u003e\u003cstrong\u003eVault\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eOnce we have Consul running starting vault should be straight forward, we need to create all kubernetes resources associated with it and then initialize and unseal the vault.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/dbe6cb3055b5c202bb3f65b7178e2f7c.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see it takes a while to configure a Vault server but I really like the pattern that renders for the apps using it, in the next post we will see how to unlock it automatically with kubernetes and also how to mount the secrets automatically to our pods so our applications can use it :), this post was heavily inspired by \u003ca href=\"https://testdriven.io/blog/running-vault-and-consul-on-kubernetes/\"\u003ethis one\u003c/a\u003e and \u003ca href=\"https://learn.hashicorp.com/consul/advanced/day-1-operations/certificates#configuring-agents\"\u003ethis one\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/creating_a_lambda_function_with_terraform/",
      "url": "https://techsquad.rocks/blog/creating_a_lambda_function_with_terraform/",
      "title": "Creating a lambda function with terraform",
      "date_published": "2019-04-27T00:00:00Z",
      "tags": ["development","serverless","aws","terraform"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eHere we will see how to use terraform to manage lambda functions, it will be a simple hello world in node.js, available as a \u003ca href=\"https://gist.github.com/smithclay/e026b10980214cbe95600b82f67b4958\"\u003egist here\u003c/a\u003e, note that I did not create this example but it\u0026rsquo;s really close to the official documentation but shorter, you can see another example with \u003ca href=\"https://github.com/terraform-providers/terraform-provider-aws/tree/master/examples/lambda\"\u003epython here\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eBefore you start make sure you already have your account configured for \u003ca href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\"\u003eawscli\u003c/a\u003e and \u003ca href=\"https://learn.hashicorp.com/terraform/getting-started/install.html\"\u003eterraform\u003c/a\u003e installed.\u003c/p\u003e\n\n\u003ch5 id=\"configuration-files\"\u003e\u003cstrong\u003eConfiguration files\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eFirst of all we need to get our terraform file or files (in a normal case scenario, but since this is a hello world it is easier to have everything in the same file), I have added some comments of what each part does as you can see.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/67b5e84684ae6cca6c0f0847352df55f.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"the-code-itself\"\u003e\u003cstrong\u003eThe code itself\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThen we need the code that we need or want to run there.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/e52a9a9e63f7de88f11090add8668dd1.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"initialize-terraform\"\u003e\u003cstrong\u003eInitialize terraform\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eFirst of all we will need to initialize terraform like in the gist below, this will download the necessary plugins that we used in the code, otherwise it won\u0026rsquo;t be able to run.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/cca6fe034015ee2ce205baf6b68750c3.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"apply-the-changes\"\u003e\u003cstrong\u003eApply the changes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe next step would be to apply the changes, you can also plan to an outfile and then apply from that file, but also apply works, this command will take care of doing everything that we defined, it will archive the code, the IAM role and the function itself.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/128f522071e66f2a33799241a79ebd1a.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"running-the-function\"\u003e\u003cstrong\u003eRunning the function\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThen the last step would be to run our function to see if it actually works, in this case we\u0026rsquo;re using the awscli but you can use the AWS console as well, the result will be the same.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/ea98dcf28b0fe1df31c662e5051bb5b5.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"clean-up\"\u003e\u003cstrong\u003eClean up\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eRemember to clean up before leaving.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/83be5bcc8e237cc30d7aee17667a5171.js\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003eI don\u0026rsquo;t know about you, but I\u0026rsquo;m going to keep using the \u003ca href=\"https://serverless.com/\"\u003eserverless framework\u003c/a\u003e for now, but it\u0026rsquo;s good to see that we have alternatives and with some effort can give us the same functionality.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/ssh_socks_proxy/",
      "url": "https://techsquad.rocks/blog/ssh_socks_proxy/",
      "title": "SSH Socks Proxy",
      "date_published": "2019-03-10T00:00:00Z",
      "tags": ["openssh","tips-and-tricks","linux"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Socks proxy and what it means, we also will explore \u003ca href=\"https://techsquad.rocks/blog/ssh_remote_port_forward/\"\u003eSSH Remote Port Forward\u003c/a\u003e and \u003ca href=\"https://techsquad.rocks/blog/ssh_local_port_forward/\"\u003eSSH Local Port Forward\u003c/a\u003e and how to use that functionality.\u003c/p\u003e\n\n\u003ch5 id=\"explanation\"\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSOCKS is an Internet protocol that exchanges network packets between a client and server through a proxy server (Extracted from Wikipedia). So basically it allows our remote server to become a VPNey likey thingy using SSH, so let\u0026rsquo;s see the different options of how and when to use it. But we will need to tell the application to use that SOCKS proxy, for example our browser or curl.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe command\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh -D \u003cspan style=\"color:#ae81ff\"\u003e9999\u003c/span\u003e -Nn ec2-user@54.210.37.203\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003eFor example I started a EC2 instance for this example and this is the output from curl:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ curl --socks4 localhost:9999 icanhazip.com\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# 54.210.37.203\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch5 id=\"the-parameters-and-their-meaning\"\u003e\u003cstrong\u003eThe parameters and their meaning\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eI extracted a portion of the meaning of parameter from the man page, but in a nutshell it means dynamic port forward without a shell.\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e-N Do not execute a remote command. This is useful for just forwarding ports.\n-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.\n-D Specifies a local “dynamic” application-level port forwarding.  This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see this option can be really handy to have a temporary VPN or proxy, also if you want to make this automatic and not so temporary you can check autossh or any real VPN solution like OpenVPN. You can use this kind of proxy in any App that supports SOCKS, most browsers do for example.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/ssh_remote_port_forward/",
      "url": "https://techsquad.rocks/blog/ssh_remote_port_forward/",
      "title": "SSH Remote Port Forward",
      "date_published": "2019-03-09T00:00:00Z",
      "tags": ["openssh","tips-and-tricks","linux"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Remote port forward and what it means, we also will explore \u003ca href=\"https://techsquad.rocks/blog/ssh_local_port_forward/\"\u003eSSH Local Port Forward\u003c/a\u003e and \u003ca href=\"https://techsquad.rocks/blog/ssh_socks_proxy/\"\u003eSSH Socks Proxy\u003c/a\u003e and how to use that functionality.\u003c/p\u003e\n\n\u003ch5 id=\"explanation\"\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eRemote port forward basically let\u0026rsquo;s you forward one port from your machine to a remote machine, for example you want to connect to a local service from a remote server but just temporarily, let\u0026rsquo;s say you want to connect to a mysql instance on the default port (3306).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe command\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh -Nn -R \u003cspan style=\"color:#ae81ff\"\u003e3306\u003c/span\u003e:localhost:3306 user@example.com\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe parameters and their meaning\u003c/strong\u003e\nI extracted a portion of the meaning of parameter from the man page, but in a nutshell it means remote port forward without a shell.\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e-N Do not execute a remote command. This is useful for just forwarding ports.\n-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.\n-R Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch5 id=\"server-configuration\"\u003e\u003cstrong\u003eServer configuration\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThere are two configuration parameters that can change the behaviour of remote and local forwarded ports, those parameters are \u003ccode\u003eGatewayPorts\u003c/code\u003e and \u003ccode\u003eAllowTcpForwarding\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"gatewayports\"\u003e\u003cstrong\u003eGatewayPorts\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eBy default this option is \u003ccode\u003eno\u003c/code\u003e which means that only the remote computer will be able to connect to the forwarded port, you can set it to \u003ccode\u003eyes\u003c/code\u003e or \u003ccode\u003eclientspecified\u003c/code\u003e to allow other machines use that remote port-forward (handy and dangerous).\u003c/p\u003e\n\n\u003ch5 id=\"allowtcpforwarding\"\u003e\u003cstrong\u003eAllowTcpForwarding\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eBy default this option is set to \u003ccode\u003eyes\u003c/code\u003e, you can restrict remote and local port forwarding by setting it to \u003ccode\u003eno\u003c/code\u003e or allow only local by setting it to \u003ccode\u003elocal\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eAs you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don\u0026rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/ssh_local_port_forward/",
      "url": "https://techsquad.rocks/blog/ssh_local_port_forward/",
      "title": "SSH Local Port Forward",
      "date_published": "2019-03-08T00:00:00Z",
      "tags": ["openssh","tips-and-tricks","linux"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Local port forward and what it means, we also will explore \u003ca href=\"https://techsquad.rocks/blog/ssh_remote_port_forward/\"\u003eSSH Remote Port Forward\u003c/a\u003e and \u003ca href=\"https://techsquad.rocks/blog/ssh_socks_proxy/\"\u003eSSH Socks Proxy\u003c/a\u003e and how to use that functionality.\u003c/p\u003e\n\n\u003ch5 id=\"explanation\"\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eLocal port forward basically let\u0026rsquo;s you forward one port from a remote machine to your local machine, for example you want to connect to a remote service from machine but just temporarily or there is a firewall that won\u0026rsquo;t let you do it, let\u0026rsquo;s say you want to connect to a mysql instance on the default port (3306).\u003c/p\u003e\n\n\u003ch5 id=\"the-command\"\u003e\u003cstrong\u003eThe command\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet1.sh\"\u003e\u003c/script\u003e\n\n\u003cp\u003eHere we are forwarding localhost:3306 in the remote machine to localhost:3306, but you can specify another address in the network for example 172.16.16.200 and the command would look like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet2.sh\"\u003e\u003c/script\u003e\nThis will give you access to the ip 172.16.16.200 and port 3306 in the remote network.\u003c/p\u003e\n\n\u003ch5 id=\"the-parameters-and-their-meaning\"\u003e\u003cstrong\u003eThe parameters and their meaning\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eI extracted a portion of the meaning of parameter from the man page, but in a nutshell it means local port forward without a shell.\n\u003cscript type=\"application/javascript\" src=\"//gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet3.txt\"\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003ch5 id=\"server-configuration\"\u003e\u003cstrong\u003eServer configuration\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThere is a configuration parameter that can change the behaviour of remote and local forwarded ports, that parameter is \u003ccode\u003eAllowTcpForwarding\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"allowtcpforwarding\"\u003e\u003cstrong\u003eAllowTcpForwarding\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eBy default this option is set to \u003ccode\u003eyes\u003c/code\u003e, you can restrict remote and local port forwarding by setting it to \u003ccode\u003eno\u003c/code\u003e or allow only local by setting it to \u003ccode\u003elocal\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don\u0026rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/create_an_aws_lambda_function_in_go/",
      "url": "https://techsquad.rocks/blog/create_an_aws_lambda_function_in_go/",
      "title": "Create an AWS lambda function in Go",
      "date_published": "2019-02-16T00:00:00Z",
      "tags": ["go","golang","development","serverless","linux","terraform"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will create a lambda function and an API Gateway route like we did with the serverless framework but only using AWS tools, we will be using the same generated code for our function from the last article \u003ca href=\"https://techsquad.rocks/blog/what_does_the_serverless_framework_does_for_me/\"\u003eWhat does the serverless framework does for me\u003c/a\u003e, so refer to that one before starting this one if you want to know how did we get here. Also as a side note this is a very basic example on how to get started with lambda without any additional tool.\u003c/p\u003e\n\n\u003ch5 id=\"let-s-see-the-code-one-more-time\"\u003e\u003cstrong\u003eLet\u0026rsquo;s see the code one more time\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bytes\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-lambda-go/events\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-lambda-go/lambda\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#75715e\"\u003e// Response is of type APIGatewayProxyResponse since we\u0026#39;re leveraging the\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// AWS Lambda Proxy Request functionality (default behavior)\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// https://serverless.com/framework/docs/providers/aws/events/apigateway/#lambda-proxy-integration\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevents\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAPIGatewayProxyResponse\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e// Handler is our lambda handler invoked by the `lambda.Start` function call\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuf\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebytes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBuffer\u003c/span\u003e\n\n    \u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMarshal\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e{}{\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Go Serverless v1.0! Your function executed successfully!\u0026#34;\u003c/span\u003e,\n    })\n    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e{\u003cspan style=\"color:#a6e22e\"\u003eStatusCode\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e404\u003c/span\u003e}, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n    }\n    \u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHTMLEscape\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ebuf\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e)\n\n    \u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e{\n        \u003cspan style=\"color:#a6e22e\"\u003eStatusCode\u003c/span\u003e:      \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e,\n        \u003cspan style=\"color:#a6e22e\"\u003eIsBase64Encoded\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n        \u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e:            \u003cspan style=\"color:#a6e22e\"\u003ebuf\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(),\n        \u003cspan style=\"color:#a6e22e\"\u003eHeaders\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\n            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type\u0026#34;\u003c/span\u003e:           \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e,\n            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;X-MyCompany-Func-Reply\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello-handler\u0026#34;\u003c/span\u003e,\n        },\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n    \u003cspan style=\"color:#a6e22e\"\u003elambda\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStart\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eHandler\u003c/span\u003e)\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWith that code as a starting point, now we need to build, package, upload, and deploy our function:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBuild\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eGOOS\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003elinux go build main.go\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePackage\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ezip main.zip ./main\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   adding: main (deflated 51%)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCreate the role\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eGo to IAM \u0026gt; Roles \u0026gt; Create.\nThen select Lambda, assign a name and a description and then get the ARN for this role. Note that with the serverless framework this is done automatically for us, so we don\u0026rsquo;t need to create a new role for each\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpload / Deploy\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws lambda create-function \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  --region us-east-1 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  --function-name helloworld \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  --memory \u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  --role arn:aws:iam::894527626897:role/testing-aws-go \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  --runtime go1.x \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  --zip-file fileb://main.zip \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e  --handler main\n\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;FunctionName\u0026#34;: \u0026#34;helloworld\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;FunctionArn\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:894527626897:function:helloworld\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;Runtime\u0026#34;: \u0026#34;go1.x\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;Role\u0026#34;: \u0026#34;arn:aws:iam::894527626897:role/testing-aws-go\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;Handler\u0026#34;: \u0026#34;main\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;CodeSize\u0026#34;: 4346283,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;Description\u0026#34;: \u0026#34;\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;Timeout\u0026#34;: 3,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;MemorySize\u0026#34;: 128,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;LastModified\u0026#34;: \u0026#34;2019-02-16T15:44:10.610+0000\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;CodeSha256\u0026#34;: \u0026#34;02/PQBeQuCC8JS1TLjyU38oiUwiyQSmKJXjya25XpFA=\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;Version\u0026#34;: \u0026#34;$LATEST\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;TracingConfig\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         \u0026#34;Mode\u0026#34;: \u0026#34;PassThrough\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;RevisionId\u0026#34;: \u0026#34;7c9030e5-4a26-4f7e-968d-3a4f65dfde21\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# }\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nNote that your function-name must match the name of your Lambda handler name (Handler). Note that this role might be insecure in some scenarios if you grant too much permissions, so try to restrict it as much as possible as with any role and policy.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTest the function\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws lambda invoke --function-name helloworld --log-type Tail /dev/stdout\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# {\u0026#34;statusCode\u0026#34;:200,\u0026#34;headers\u0026#34;:{\u0026#34;Content-Type\u0026#34;:\u0026#34;application/json\u0026#34;,\u0026#34;X-MyCompany-Func-Reply\u0026#34;:\u0026#34;hello-handler\u0026#34;},\u0026#34;body\u0026#34;:\u0026#34;{\\\u0026#34;message\\\u0026#34;:\\\u0026#34;Go Serverless v1.0! Your function executed successfully!\\\u0026#34;}\u0026#34;}{\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;StatusCode\u0026#34;: 200,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;LogResult\u0026#34;: \u0026#34;U1RBUlQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQgVmVyc2lvbjogJExBVEVTVApFTkQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQKUkVQT1JUIFJlcXVlc3RJZDogZmU0ZjFhOGYtZGMwMi00MmFkLWIwZWMtMDIwOWI2ODA2NWFkCUR1cmF0aW9uOiAxMy4xOSBtcwlCaWxsZWQgRHVyYXRpb246IDEwMCBtcyAJTWVtb3J5IFNpemU6IDEyOCBNQglNYXggTWVtb3J5IFVzZWQ6IDQ1IE1CCQo=\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;ExecutedVersion\u0026#34;: \u0026#34;$LATEST\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# }\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nEverything looks about right, so what\u0026rsquo;s next? We will eventually need to communicate with this code from an external source, so let\u0026rsquo;s see how we can do that with the API Gateway. Also the log is encoded in base64, so if you want to see what the log result was do the following.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCheck the logs\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eecho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;U1RBUlQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQgVmVyc2lvbjogJExBVEVTVApFTkQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQKUkVQT1JUIFJlcXVlc3RJZDogZmU0ZjFhOGYtZGMwMi00MmFkLWIwZWMtMDIwOWI2ODA2NWFkCUR1cmF0aW9uOiAxMy4xOSBtcwlCaWxsZWQgRHVyYXRpb246IDEwMCBtcyAJTWVtb3J5IFNpemU6IDEyOCBNQglNYXggTWVtb3J5IFVzZWQ6IDQ1IE1CCQo=\u0026#34;\u003c/span\u003e | base64 -d\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# START RequestId: fe4f1a8f-dc02-42ad-b0ec-0209b68065ad Version: $LATEST\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# END RequestId: fe4f1a8f-dc02-42ad-b0ec-0209b68065ad\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# REPORT RequestId: fe4f1a8f-dc02-42ad-b0ec-0209b68065ad  Duration: 13.19 ms      Billed Duration: 100 ms         Memory Size: 128 MB     Max Memory Used: 45 MB\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nYou should also be able to see this same output in CloudWatch.\u003c/p\u003e\n\n\u003ch5 id=\"api-gateway\"\u003e\u003cstrong\u003eAPI Gateway\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eTo make this step simpler I decided to use the AWS Console instead of the CLI it will also cut down the size of this article substantially.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNow we need to create the API Gateway endpoint\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNote that you only have to go to Lambda-\u0026gt;Functions-\u0026gt;helloworld-\u0026gt;Add triggers-\u0026gt;API Gateway. And then complete as shown in the image, when you save this new trigger you will get the resource that then can be used to test the API Gateway integration.\n\u003cfigure\u003e\n    \u003cimg src=\"/img/lambda-helloworld-example.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThe endpoint will show as follows (Click on API Gateway):\n\u003cfigure\u003e\n    \u003cimg src=\"/img/lambda-helloworld-example-endpoint.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTest the API\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl -v https://r8efasfb26.execute-api.us-east-1.amazonaws.com/default/helloworld\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *   Trying 54.236.123.239...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TCP_NODELAY set\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Connected to r8efasfb26.execute-api.us-east-1.amazonaws.com (54.236.123.239) port 443 (#0)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * ALPN, offering h2\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * ALPN, offering http/1.1\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * successfully set certificate verify locations:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *   CAfile: /etc/ssl/certs/ca-certificates.crt\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   CApath: none\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.3 (OUT), TLS handshake, Client hello (1):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.3 (IN), TLS handshake, Server hello (2):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (IN), TLS handshake, Certificate (11):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (IN), TLS handshake, Server key exchange (12):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (IN), TLS handshake, Server finished (14):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (OUT), TLS handshake, Finished (20):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (IN), TLS handshake, Finished (20):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * ALPN, server accepted to use h2\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Server certificate:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  subject: CN=*.execute-api.us-east-1.amazonaws.com\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  start date: Sep 20 00:00:00 2018 GMT\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  expire date: Oct 20 12:00:00 2019 GMT\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  subjectAltName: host \u0026#34;r8efasfb26.execute-api.us-east-1.amazonaws.com\u0026#34; matched cert\u0026#39;s \u0026#34;*.execute-api.us-east-1.amazonaws.com\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  SSL certificate verify ok.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Using HTTP2, server supports multi-use\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Connection state changed (HTTP/2 confirmed)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Using Stream ID: 1 (easy handle 0x56394c766db0)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt; GET /default/helloworld HTTP/2\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt; Host: r8efasfb26.execute-api.us-east-1.amazonaws.com\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt; User-Agent: curl/7.63.0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt; Accept: */*\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Connection state changed (MAX_CONCURRENT_STREAMS == 128)!\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; HTTP/2 200\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; date: Sat, 16 Feb 2019 17:17:58 GMT\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; content-type: application/json\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; content-length: 70\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-amzn-requestid: ce5c5863-320e-11e9-9e76-875e7540974c\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-amz-apigw-id: VM_XAGhoIAMFqoQ=\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-mycompany-func-reply: hello-handler\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-amzn-trace-id: Root=1-5c6845c6-920cfc7da3cfd94f3e644647;Sampled=0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Connection #0 to host r8efasfb26.execute-api.us-east-1.amazonaws.com left intact\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# {\u0026#34;message\u0026#34;:\u0026#34;Go Serverless v1.0! Your function executed successfully!\u0026#34;}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you ask me that was a lot of effort to handle without automation, maybe AWS SAM or the serverless framework can make things easier and let you focus on your application rather than the boilerplate required for it to run.\u003c/p\u003e\n\n\u003ch3 id=\"clean-up\"\u003eClean up\u003c/h3\u003e\n\n\u003cp\u003eAlways remember to clean up and delete everything that you created (to avoid surprises and save money), in this article I will leave that as an exercise for the reader :)\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/what_does_the_serverless_framework_does_for_me/",
      "url": "https://techsquad.rocks/blog/what_does_the_serverless_framework_does_for_me/",
      "title": "What does the serverless framework does for me",
      "date_published": "2019-02-15T00:00:00Z",
      "tags": ["development","serverless","go","golang"],
      "content_html": "\n\n\u003ch3 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://serverless.com/\"\u003eserverless framework\u003c/a\u003e is a nice tool to manage all your cloud functions. from their page:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe Serverless Framework helps you develop and deploy your AWS Lambda functions, along with the AWS infrastructure resources they require. It\u0026rsquo;s a CLI that offers structure, automation and best practices out-of-the-box, allowing you to focus on building sophisticated, event-driven, serverless architectures, comprised of Functions and Events.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"let-s-take-the-golang-example-for-a-spin\"\u003e\u003cstrong\u003eLet\u0026rsquo;s take the golang example for a spin\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eSo let\u0026rsquo;s generate a project with the serverless framework and see everything that it does for us.\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkdir foo \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e cd \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$_\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e  serverless create -t aws-go\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Generating boilerplate...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#  _______                             __\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |   _   .-----.----.--.--.-----.----|  .-----.-----.-----.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |____   |_____|__|  \\___/|_____|__| |__|_____|_____|_____|\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |   |   |             The Serverless Application Framework\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |       |                           serverless.com, v1.36.1\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#  -------\u0026#39;\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Successfully generated boilerplate for template: \u0026#34;aws-go\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: NOTE: Please update the \u0026#34;service\u0026#34; property in serverless.yml with your service name\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nGot you a bit of command line fu right there with the \u0026ldquo;$_\u0026rdquo; (it means the first parameter of the previous command)\u003c/p\u003e\n\n\u003cp\u003eOkay all peachy but what just happened? We initialized a serverless framework project with the template aws-go (as you probably figured by now) the serverless framework can handle different languages and cloud providers, in this example we picked aws and go (there is another template for go called aws-go-dep which as the name indicates uses dep to manage dependencies), enough talking.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLet\u0026rsquo;s take a look at the files\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003etree .\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ├── hello\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# │   └── main.go\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ├── Makefile\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ├── serverless.yml\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# └── world\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     └── main.go\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# 2 directories, 4 files\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nWe got a manifest \u003ccode\u003eserverless.yml\u003c/code\u003e a \u003ccode\u003eMakefile\u003c/code\u003e (which you can use to build your functions (to validate syntax errors for instance or run in test mode before pushing them to AWS, it will also be used to build them while deploying)\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe manifest file indicates a lot of things, I will add comments to the \u003cem\u003ecode\u003c/em\u003e\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eframeworkVersion: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026gt;=1.28.0 \u0026lt;2.0.0\u0026#34;\u003c/span\u003e\n\nprovider:\n  name: aws\n  runtime: go1.x\n\n\u003cspan style=\"color:#75715e\"\u003e# Which files needs to be included and which to be ignored\u003c/span\u003e\npackage:\n exclude:\n   - ./**\n include:\n   - ./bin/**\n\n\u003cspan style=\"color:#75715e\"\u003e# The functions and the handlers (the actual function definition in the code), and events which then will be translated into API Gateway endpoints for your functions\u003c/span\u003e\nfunctions:\n  hello:\n    handler: bin/hello\n    events:\n      - http:\n          path: hello\n          method: get\n  world:\n    handler: bin/world\n    events:\n      - http:\n          path: world\n          method: get\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLet\u0026rsquo;s take a look at the hello function / file\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epackage main\n\nimport \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bytes\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-lambda-go/events\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-lambda-go/lambda\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\n// Response is of type APIGatewayProxyResponse since we\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u0026#39;\u003c/span\u003ere leveraging the\n// AWS Lambda Proxy Request functionality \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003edefault behavior\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n//\n// https://serverless.com/framework/docs/providers/aws/events/apigateway/#lambda-proxy-integration\ntype Response events.APIGatewayProxyResponse\n\n// Handler is our lambda handler invoked by the \u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003elambda.Start\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e call\nfunc Handler\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003ectx context.Context\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eResponse, error\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    var buf bytes.Buffer\n\n    body, err :\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e json.Marshal\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003emap\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003einterface\u003cspan style=\"color:#f92672\"\u003e{}{\u003c/span\u003e\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Go Serverless v1.0! Your function executed successfully!\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#f92672\"\u003e})\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e err !\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nil \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Response\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003eStatusCode: \u003cspan style=\"color:#ae81ff\"\u003e404\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e, err\n    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n    json.HTMLEscape\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u0026amp;buf, body\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\n    resp :\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Response\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n        StatusCode:      \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e,\n        IsBase64Encoded: false,\n        Body:            buf.String\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e,\n        Headers: map\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type\u0026#34;\u003c/span\u003e:           \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e,\n            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;X-MyCompany-Func-Reply\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello-handler\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\n    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e resp, nil\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\nfunc main\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    lambda.Start\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eHandler\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nThis function only returns some text with some headers, every lambda function requires the lambda.Start with your function name as an entrypoint, in this case Handler, the context is usually used to pass data between calls or functions. The rest of the code is pretty straight forward go code, it builds a json object and returns it along with some headers.\u003c/p\u003e\n\n\u003ch5 id=\"let-s-deploy-it\"\u003e\u003cstrong\u003eLet\u0026rsquo;s deploy it\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eserverless deploy\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: WARNING: Missing \u0026#34;tenant\u0026#34; and \u0026#34;app\u0026#34; properties in serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Packaging service...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Excluding development dependencies...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Uploading CloudFormation file to S3...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Uploading artifacts...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Uploading service .zip file to S3 (10.88 MB)...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Validating template...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Updating Stack...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Checking Stack update progress...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ............\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Stack update finished...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Service Information\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# service: aws-go\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# stage: dev\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# region: us-east-1\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# stack: aws-go-dev\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# api keys:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   None\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# endpoints:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   GET - https://cfr9zyw3r1.execute-api.us-east-1.amazonaws.com/dev/hello\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   GET - https://cfr9zyw3r1.execute-api.us-east-1.amazonaws.com/dev/world\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# functions:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   hello: aws-go-dev-hello\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   world: aws-go-dev-world\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# layers:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   None\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nSo a lot happened here, the deploy function compiled our binary, packaged it, uploaded that package to s3, created a cloudformation stack and after everything was completed, returned the endpoints that were defined, as you can see the framework enabled us to create and deploy a function (two actually) really easily which totally simplifies the process of managing functions and events.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAnd test it\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl -v https://cfr9zyw3r1.execute-api.us-east-1.amazonaws.com/dev/hello\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *   Trying 99.84.27.2...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TCP_NODELAY set\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Connected to cfr9zyw3r1.execute-api.us-east-1.amazonaws.com (99.84.27.2) port 443 (#0)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * ALPN, offering h2\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * ALPN, offering http/1.1\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * successfully set certificate verify locations:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *   CAfile: /etc/ssl/certs/ca-certificates.crt\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   CApath: none\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.3 (OUT), TLS handshake, Client hello (1):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.3 (IN), TLS handshake, Server hello (2):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (IN), TLS handshake, Certificate (11):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (IN), TLS handshake, Server key exchange (12):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (IN), TLS handshake, Server finished (14):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (OUT), TLS handshake, Finished (20):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * TLSv1.2 (IN), TLS handshake, Finished (20):\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * ALPN, server accepted to use h2\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Server certificate:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  subject: CN=*.execute-api.us-east-1.amazonaws.com\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  start date: Oct  9 00:00:00 2018 GMT\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  expire date: Oct  9 12:00:00 2019 GMT\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  subjectAltName: host \u0026#34;cfr9zyw3r1.execute-api.us-east-1.amazonaws.com\u0026#34; matched cert\u0026#39;s \u0026#34;*.execute-api.us-east-1.amazonaws.com\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# *  SSL certificate verify ok.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Using HTTP2, server supports multi-use\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Connection state changed (HTTP/2 confirmed)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Using Stream ID: 1 (easy handle 0x55944b9d7db0)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt; GET /dev/hello HTTP/2\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt; Host: cfr9zyw3r1.execute-api.us-east-1.amazonaws.com\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt; User-Agent: curl/7.63.0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt; Accept: */*\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026gt;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Connection state changed (MAX_CONCURRENT_STREAMS == 128)!\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; HTTP/2 200\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; content-type: application/json\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; content-length: 70\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; date: Sat, 16 Feb 2019 04:32:04 GMT\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-amzn-requestid: cf4c6094-31a3-11e9-b61e-bb2138b2f390\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-amz-apigw-id: VLPKmHj4oAMFbbw=\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-mycompany-func-reply: hello-handler\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-amzn-trace-id: Root=1-5c679243-d4f945debb1a2b675c41675f;Sampled=0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-cache: Miss from cloudfront\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; via: 1.1 655473215401ef909f449b92f216caa1.cloudfront.net (CloudFront)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt; x-amz-cf-id: LOHG0oG-WbGKpTnlGz-VDVqb9DxXQX-kgJJEUkchh1v_zLfUqNCpEQ==\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026lt;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# * Connection #0 to host cfr9zyw3r1.execute-api.us-east-1.amazonaws.com left intact\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# {\u0026#34;message\u0026#34;:\u0026#34;Go Serverless v1.0! Your function executed successfully!\u0026#34;}%\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nAs expected we can see the headers x-my-company-func-reply and the json object that it created for us.\u003c/p\u003e\n\n\u003ch3 id=\"cleanup\"\u003e\u003cstrong\u003eCleanup\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eserverless remove\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: WARNING: Missing \u0026#34;tenant\u0026#34; and \u0026#34;app\u0026#34; properties in serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Getting all objects in S3 bucket...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Removing objects in S3 bucket...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Removing Stack...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Checking Stack removal progress...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ...............\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Stack removal finished...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nThis will as you expect remove everything that was created with the deploy command.\u003c/p\u003e\n\n\u003cp\u003eIn the next article we will explore how to do create and deploy a function like this one by hand.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/",
      "url": "https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/",
      "title": "Sending emails with AWS Lambda and SES from a HTML form",
      "date_published": "2019-02-03T00:00:00Z",
      "tags": ["go","golang","development","serverless","linux"],
      "content_html": "\n\n\u003ch5 id=\"serverless-series\"\u003e\u003cstrong\u003eServerless series\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003ePart I: \u003ca href=\"https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/\"\u003eServing static websites with s3 and cloudfront\u003c/a\u003e, so refer to that one before starting this one if you want to know how did we get here.\u003c/p\u003e\n\n\u003cp\u003ePart II: \u003ca href=\"https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/\"\u003eSending emails with AWS Lambda and SES from a HTML form\u003c/a\u003e, \u003cstrong\u003eYou are here\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis article is part of the serverless series, in this article we will see how to create a serverless function in AWS Lambda to send an email coming from the HTML form in the site the source code can be \u003ca href=\"https://github.com/kainlite/aws-serverless-go-ses-example\"\u003efound here\u003c/a\u003e, that is the go version but if you prefer node you can use \u003ca href=\"https://github.com/kainlite/aws-serverless-nodejs-ses-example\"\u003ethis one\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"serverless-framework\"\u003e\u003cstrong\u003eServerless framework\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003e\u003cstrong\u003eAs usual I will be using the serverless framework to manage our functions, create the project\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkdir techsquad-functions \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e cd techsquad-functions \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e serverless create -t aws-go\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Generating boilerplate...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#  _______                             __\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |   _   .-----.----.--.--.-----.----|  .-----.-----.-----.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |____   |_____|__|  \\___/|_____|__| |__|_____|_____|_____|\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |   |   |             The Serverless Application Framework\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |       |                           serverless.com, v1.36.1\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#  -------\u0026#39;\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Successfully generated boilerplate for template: \u0026#34;aws-go\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: NOTE: Please update the \u0026#34;service\u0026#34; property in serverless.yml with your service name\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003eAfter creating the project we can update the serverless manifest as follow:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eservice: sendMail\n\nframeworkVersion: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026gt;=1.28.0 \u0026lt;2.0.0\u0026#34;\u003c/span\u003e\n\nprovider:\n  name: aws\n  runtime: go1.x\n  region: us-east-1\n  memorySize: \u003cspan style=\"color:#ae81ff\"\u003e128\u003c/span\u003e\n  versionFunctions: false\n  stage: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;prod\u0026#39;\u003c/span\u003e\n\n  iamRoleStatements:\n    - Effect: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Allow\u0026#34;\u003c/span\u003e\n      Action:\n        - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ses:*\u0026#34;\u003c/span\u003e\n        - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lambda:*\u0026#34;\u003c/span\u003e\n      Resource:\n        - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\n\npackage:\n exclude:\n   - ./**\n include:\n   - ./send_mail/send_mail\n\nfunctions:\n  send_mail:\n    handler: send_mail/send_mail\n    events:\n      - http:\n          path: sendMail\n          method: post\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nThe interesting parts here are the IAM permissions and the function send_mail, the rest is pretty much standard, we define a function and the event HTTP POST for the API Gateway, where our executable can be found and we also request permissions to send emails via SES.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDeploy the function\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emake deploy\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# rm -rf ./send_mail/send_mail\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# env GOOS=linux go build -ldflags=\u0026#34;-s -w\u0026#34; -o send_mail/send_mail send_mail/main.go\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# sls deploy --verbose\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: WARNING: Missing \u0026#34;tenant\u0026#34; and \u0026#34;app\u0026#34; properties in serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Packaging service...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Excluding development dependencies...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Uploading CloudFormation file to S3...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Uploading artifacts...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Uploading service .zip file to S3 (7.31 MB)...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Validating template...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Updating Stack...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Checking Stack update progress...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - UPDATE_IN_PROGRESS - AWS::CloudFormation::Stack - sendMail-prod\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Function - SendUnderscoremailLambdaFunction\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - UPDATE_COMPLETE - AWS::Lambda::Function - SendUnderscoremailLambdaFunction\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246566486\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246566486\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - CREATE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246566486\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - UPDATE_COMPLETE_CLEANUP_IN_PROGRESS - AWS::CloudFormation::Stack - sendMail-prod\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - DELETE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246013644\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - DELETE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246013644\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# CloudFormation - UPDATE_COMPLETE - AWS::CloudFormation::Stack - sendMail-prod\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Serverless: Stack update finished...\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Service Information\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# service: sendMail\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# stage: prod\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# region: us-east-1\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# stack: sendMail-prod\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# api keys:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   None\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# endpoints:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   POST - https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod/sendMail\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# functions:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   send_mail: sendMail-prod-send_mail\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# layers:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#   None\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# Stack Outputs\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ServiceEndpoint: https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ServerlessDeploymentBucketName: sendmail-prod-serverlessdeploymentbucket-1vbmb6gwt8559\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nEverything looks right, so what\u0026rsquo;s next? the source code.\u003c/p\u003e\n\n\u003ch5 id=\"lambda\"\u003e\u003cstrong\u003eLambda\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis is basically the full source code for this function, as you will see it\u0026rsquo;s really simple:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-lambda-go/events\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-lambda-go/lambda\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-sdk-go/aws\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-sdk-go/aws/awserr\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-sdk-go/aws/session\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/aws/aws-sdk-go/service/ses\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevents\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAPIGatewayProxyResponse\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRequestData\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\t\u003cspan style=\"color:#a6e22e\"\u003eEmail\u003c/span\u003e   \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#75715e\"\u003e// This could be env vars\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e (\n\t\u003cspan style=\"color:#a6e22e\"\u003eSender\u003c/span\u003e    = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;web@serverless.techsquad.rocks\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003eRecipient\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kainlite@gmail.com\u0026#34;\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003eCharSet\u003c/span\u003e   = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHandler\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ectx\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContext\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevents\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eAPIGatewayProxyRequest\u003c/span\u003e) (\u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Request: %+v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e)\n\n\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Processing request data for request %s.\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequestContext\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRequestID\u003c/span\u003e)\n\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Body size = %d.\\n\u0026#34;\u003c/span\u003e, len(\u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e))\n\n\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erequestData\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRequestData\u003c/span\u003e\n\t\u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e([]byte(\u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003erequestData\u003c/span\u003e)\n\n\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;RequestData: %+v\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003erequestData\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\n\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003erequestData\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEmail\u003c/span\u003e) \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e len(\u003cspan style=\"color:#a6e22e\"\u003erequestData\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e) \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003esend\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erequestData\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEmail\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003erequestData\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e)\n\t}\n\n\t\u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eStatusCode\u003c/span\u003e:      \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eIsBase64Encoded\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e:            \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e,\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eHeaders\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\n\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type\u0026#34;\u003c/span\u003e:           \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e,\n\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;X-MyCompany-Func-Reply\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;send-mail-handler\u0026#34;\u003c/span\u003e,\n\t\t},\n\t}\n\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresp\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esend\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eEmail\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) (\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e) {\n\t\u003cspan style=\"color:#75715e\"\u003e// This could be an env var\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esess\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esession\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewSession\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eConfig\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eRegion\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;us-east-1\u0026#34;\u003c/span\u003e)},\n\t)\n\n\t\u003cspan style=\"color:#75715e\"\u003e// Create an SES session.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003esvc\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esess\u003c/span\u003e)\n\n\t\u003cspan style=\"color:#75715e\"\u003e// Assemble the email.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003einput\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSendEmailInput\u003c/span\u003e{\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eDestination\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDestination\u003c/span\u003e{\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eCcAddresses\u003c/span\u003e: []\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{},\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eToAddresses\u003c/span\u003e: []\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\n\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eRecipient\u003c/span\u003e),\n\t\t\t},\n\t\t},\n\t\t\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e{\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e{\n\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eHtml\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContent\u003c/span\u003e{\n\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eCharset\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eCharSet\u003c/span\u003e),\n\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eData\u003c/span\u003e:    \u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e),\n\t\t\t\t},\n\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eText\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContent\u003c/span\u003e{\n\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eCharset\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eCharSet\u003c/span\u003e),\n\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eData\u003c/span\u003e:    \u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eMessage\u003c/span\u003e),\n\t\t\t\t},\n\t\t\t},\n\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eSubject\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContent\u003c/span\u003e{\n\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eCharset\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eCharSet\u003c/span\u003e),\n\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003eData\u003c/span\u003e:    \u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eEmail\u003c/span\u003e),\n\t\t\t},\n\t\t},\n\t\t\u003cspan style=\"color:#75715e\"\u003e// We are using the same sender because it needs to be validated in SES.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eSource\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eaws\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eString\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eSender\u003c/span\u003e),\n\n\t\t\u003cspan style=\"color:#75715e\"\u003e// Uncomment to use a configuration set\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\u003cspan style=\"color:#75715e\"\u003e//ConfigurationSetName: aws.String(ConfigurationSet),\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t}\n\n\t\u003cspan style=\"color:#75715e\"\u003e// Attempt to send the email.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esvc\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSendEmail\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003einput\u003c/span\u003e)\n\n\t\u003cspan style=\"color:#75715e\"\u003e// Display error messages if they occur.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaerr\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e.(\u003cspan style=\"color:#a6e22e\"\u003eawserr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e); \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaerr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCode\u003c/span\u003e() {\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErrCodeMessageRejected\u003c/span\u003e:\n\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErrCodeMessageRejected\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaerr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e())\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErrCodeMailFromDomainNotVerifiedException\u003c/span\u003e:\n\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErrCodeMailFromDomainNotVerifiedException\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaerr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e())\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErrCodeConfigurationSetDoesNotExistException\u003c/span\u003e:\n\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eses\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eErrCodeConfigurationSetDoesNotExistException\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eaerr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e())\n\t\t\t\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e:\n\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eaerr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e())\n\t\t\t}\n\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\t\t\t\u003cspan style=\"color:#75715e\"\u003e// Print the error, cast err to awserr.Error to get the Code and\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#75715e\"\u003e// Message from an error.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eError\u003c/span\u003e())\n\t\t}\n\n\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;there was an unexpected error\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n\t}\n\n\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Email Sent to address: \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRecipient\u003c/span\u003e)\n\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e)\n\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sent!\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\t\u003cspan style=\"color:#a6e22e\"\u003elambda\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStart\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eHandler\u003c/span\u003e)\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nThe code is pretty much straight forward it only expects 2 parameters and it will send an email and return sent! if everything went well. You can debug and compile your function before uploading by issuing the command \u003ccode\u003emake\u003c/code\u003e (This is really useful), and if you use \u003ccode\u003emake deploy\u003c/code\u003e you will save lots of time by only deploying working files.\u003c/p\u003e\n\n\u003ch5 id=\"ses\"\u003e\u003cstrong\u003eSES\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eFor this to work you will need to verify/validate your domain in SES.\u003c/p\u003e\n\n\u003cp\u003eGo to \u003ccode\u003eSES-\u0026gt;Domains-\u0026gt;Verify a New Domain\u003c/code\u003e.\n\u003cfigure\u003e\n    \u003cimg src=\"/img/aws-ses-validate-domain.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAfter putting your domain in, you will see something like this:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/aws-ses-validation-and-dkim.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAs I don\u0026rsquo;t have this domain in Route53 I don\u0026rsquo;t have a button to add the records to it (which makes everything simpler and faster), but it\u0026rsquo;s easy enough just create a few dns records and wait a few minutes until you get something like this:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/aws-ses-validation-ok.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAfter that just test it\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eserverless invoke -f send_mail -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{ \u0026#34;Email\u0026#34;: \u0026#34;kainlite@gmail.com\u0026#34;, \u0026#34;Message\u0026#34;: \u0026#34;test\u0026#34; }\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;statusCode\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;headers\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;X-MyCompany-Func-Reply\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;send-mail-handler\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;body\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nAfter hitting enter the message popped up right away in my inbox :).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAnother option is to use \u003ca href=\"https://devhints.io/httpie\"\u003ehttpie\u003c/a\u003e\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eecho \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{ \u0026#34;email\u0026#34;: \u0026#34;kainlite@gmail.com\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;test2\u0026#34; }\u0026#39;\u003c/span\u003e | http https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod/sendMail\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# HTTP/1.1 200 OK\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Access-Control-Allow-Origin: *\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Connection: keep-alive\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Content-Length: 32\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Content-Type: application/json\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Date: Sun, 03 Feb 2019 02:24:25 GMT\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Via: 1.1 3421ea0c15d4fdc0bcb792131861cb1f.cloudfront.net (CloudFront)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# X-Amz-Cf-Id: kGK4R9kTpcWjZap8aeyPu0vdiCtpQ4gnhCAtCeeA6OJufzaTDL__0w==\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# X-Amzn-Trace-Id: Root=1-5c5650d9-7c3c8fcc5e303ca480739560;Sampled=0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# X-Cache: Miss from cloudfront\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# x-amz-apigw-id: UgGR7FlWIAMF75Q=\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# x-amzn-RequestId: d2f45b14-275a-11e9-a8f3-47d675eed13e\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# sent!\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOR \u003ca href=\"https://devhints.io/curl\"\u003ecurl\u003c/a\u003e\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl -i -X POST https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod/sendMail -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{ \u0026#34;email\u0026#34;: \u0026#34;kainlite@gmail.com\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;test3\u0026#34; }\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# HTTP/2 200\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# content-type: application/json\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# content-length: 32\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# date: Sun, 03 Feb 2019 02:28:04 GMT\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# x-amzn-requestid: 55cc72d0-275b-11e9-99bd-91c3fab78a2f\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# access-control-allow-origin: *\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# x-amz-apigw-id: UgG0OEigoAMF-Yg=\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# x-amzn-trace-id: Root=1-5c5651b4-fc5427b4798e14dc61fe161e;Sampled=0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# x-cache: Miss from cloudfront\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# via: 1.1 2167e4d6cf81822217c1ea31b3d3ba7e.cloudfront.net (CloudFront)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# x-amz-cf-id: FttmBoeUaSwQ2AArTgVmI5br51zwVMfUrVpXPLGm1HacV4yS9IYMHA==\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# sent!\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd that\u0026rsquo;s all for now, see you in the next article.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/",
      "url": "https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/",
      "title": "Serve your static website with S3 and CloudFront",
      "date_published": "2019-02-02T00:00:00Z",
      "tags": ["elm","development","serverless","aws"],
      "content_html": "\n\n\u003ch3 id=\"serverless-series\"\u003e\u003cstrong\u003eServerless series\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003ePart I: \u003ca href=\"https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/\"\u003eServing static websites with s3 and cloudfront\u003c/a\u003e, \u003cstrong\u003eYou\u0026rsquo;re here\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003ePart II: \u003ca href=\"https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/\"\u003eSending emails with AWS Lambda and SES from a HTML form\u003c/a\u003e\u003c/p\u003e\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis article will be part of a series, the idea is to get a fully serverless site up and running with login functionality, maybe a profile page, and some random utility, but as we are just starting with it we will host our first draft of the page with a contact form, for the distribution of the files we will see how to configure CloudFront and for storing the files we will be using S3, S3 is an object storage service that offers industry leading scalability, data availability, security and performance, and CloudFront is a fast content delivery network (CDN). The site that we will be using were written using \u003ca href=\"https://elm-lang.org/\"\u003eelm\u003c/a\u003e and can be \u003ca href=\"https://github.com/kainlite/aws-serverless-s3-elm-example\"\u003efound here\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"s3\"\u003e\u003cstrong\u003eS3\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003e\u003cstrong\u003eFirst of all we need to create a bucket\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws s3api create-bucket --bucket techsquad-serverless-site --region us-east-1\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;Location\u0026#34;: \u0026#34;/techsquad-serverless-site\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# }\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nWe could serve directly from S3 but that can be expensive in a site with lots of traffic (You can do it by \u003ca href=\"https://docs.aws.amazon.com/cli/latest/reference/s3/website.html\"\u003eenabling web hosting in the bucket\u003c/a\u003e).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eFor this setup to work we first need to create a cloud-front-origin-access-identity\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003eaws cloudfront create-cloud-front-origin-access-identity --cloud-front-origin-access-identity-config CallerReference=techsquad-serverless-site-cloudfront-origin,Comment=techsquad-serverless-site-cloudfront-origin\n{\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Location\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cloudfront.amazonaws.com/2018-11-05/origin-access-identity/cloudfront/E3IJG9M5PO9BYE\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ETag\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;E2XHDQQ0DDY9IJ\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CloudFrontOriginAccessIdentity\u0026#34;\u003c/span\u003e: {\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Id\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;E3IJG9M5PO9BYE\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;S3CanonicalUserId\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;c951e48af14afcf935c2455a6d503150c80f20df93b27af9ed0928eb48feb67d1b933aa1adb7e1bf88a7aacccccccccc\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CloudFrontOriginAccessIdentityConfig\u0026#34;\u003c/span\u003e: {\n            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CallerReference\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;techsquad-serverless-site-cloudfront-origin\u0026#34;\u003c/span\u003e,\n            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Comment\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;techsquad-serverless-site-cloudfront-origin\u0026#34;\u003c/span\u003e\n        }\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nOur origin access identity was successfully created, we need to grab the S3CanonicalUserId for our S3 bucket policy.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLimit access to your bucket with the following policy (save as bucket-policy.json)\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e{\n   \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Version\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2012-10-17\u0026#34;\u003c/span\u003e,\n   \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Id\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PolicyForCloudFrontPrivateContent\u0026#34;\u003c/span\u003e,\n   \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Statement\u0026#34;\u003c/span\u003e:[\n        {\n               \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sid\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;techsquad-serverless-site-cloudfront-origin\u0026#34;\u003c/span\u003e,\n               \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Effect\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Allow\u0026#34;\u003c/span\u003e,\n               \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Principal\u0026#34;\u003c/span\u003e:{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CanonicalUser\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;c951e48af14afcf935c2455a6d503150c80f20df93b27af9ed0928eb48feb67d1b933aa1adb7e1bf88a7aacccccccccc\u0026#34;\u003c/span\u003e},\n               \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Action\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;s3:GetObject\u0026#34;\u003c/span\u003e,\n               \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Resource\u0026#34;\u003c/span\u003e:\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;arn:aws:s3:::techsquad-serverless-site/*\u0026#34;\u003c/span\u003e\n             }\n      ]\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nThis policy will only allow CloudFront to fetch the files from the S3 bucket, because we want to avoid users or anyone actually from hitting the bucket directly.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAnd then just attach that policy to the bucket\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws s3api put-bucket-policy --bucket techsquad-serverless-site --policy file://bucket-policy.json\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eI\u0026rsquo;m using an old example I created and probably will continue building upon it, copy the files (the source files are in \u003ca href=\"https://github.com/kainlite/aws-serverless-s3-elm-example\"\u003ethis github repo\u003c/a\u003e)\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws s3 sync . s3://techsquad-serverless-site/\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nSo far so good, We have our S3 bucket ready.\u003c/p\u003e\n\n\u003ch5 id=\"cloudfront\"\u003e\u003cstrong\u003eCloudFront\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eWe will use this file to create our CF distribution (save it as distconfig.json or generate it with \u003ccode\u003eaws cloudfront create-distribution --generate-cli-skeleton \u0026gt; /tmp/distconfig.json\u003c/code\u003e and then replace the values: Id, DomainName, TargetOriginId, and the cname in Aliases.Items):\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CallerReference\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;techsquad-serverless-site-distribution\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Aliases\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Quantity\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Items\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\n      \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;serverless.techsquad.rocks\u0026#34;\u003c/span\u003e\n         \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n   \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;DefaultRootObject\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;index.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Origins\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Quantity\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Items\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Id\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;techsquad-serverless-site-cloudfront\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;DomainName\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;techsquad-serverless-site.s3.amazonaws.com\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;S3OriginConfig\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n          \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OriginAccessIdentity\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;origin-access-identity/cloudfront/E3IJG9M5PO9BYE\u0026#34;\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;DefaultCacheBehavior\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;TargetOriginId\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;techsquad-serverless-site-cloudfront\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ForwardedValues\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n      \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;QueryString\u0026#34;\u003c/span\u003e: true,\n      \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cookies\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Forward\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;none\u0026#34;\u003c/span\u003e\n      \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;TrustedSigners\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n      \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Enabled\u0026#34;\u003c/span\u003e: false,\n      \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Quantity\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ViewerProtocolPolicy\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;allow-all\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;MinTTL\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e3600\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;CacheBehaviors\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Quantity\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Comment\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Logging\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Enabled\u0026#34;\u003c/span\u003e: false,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;IncludeCookies\u0026#34;\u003c/span\u003e: true,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bucket\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Prefix\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PriceClass\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PriceClass_All\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Enabled\u0026#34;\u003c/span\u003e: true\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nWe will leave most values in their defaults, but if you want to know more or customize your deployment \u003ca href=\"https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html\"\u003echeck here\u003c/a\u003e or type \u003ccode\u003eaws cloudfront create-distribution help\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLet\u0026rsquo;s finally create the CloudFront distribution for our site\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws cloudfront create-distribution --distribution-config file://distconfig.json\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;Location\u0026#34;: \u0026#34;https://cloudfront.amazonaws.com/2018-11-05/distribution/E1M22XXNIJ5BLN\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;ETag\u0026#34;: \u0026#34;EW1AZUQ33NKQ7\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     \u0026#34;Distribution\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         \u0026#34;Id\u0026#34;: \u0026#34;E1M22XXNIJ5BLN\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         \u0026#34;ARN\u0026#34;: \u0026#34;arn:aws:cloudfront::894527626897:distribution/E1M22XXNIJ5BLN\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         \u0026#34;Status\u0026#34;: \u0026#34;InProgress\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         \u0026#34;LastModifiedTime\u0026#34;: \u0026#34;2019-02-02T19:35:45.729Z\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         \u0026#34;InProgressInvalidationBatches\u0026#34;: 0,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         \u0026#34;DomainName\u0026#34;: \u0026#34;d3v3xtkl1l2ynj.cloudfront.net\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         \u0026#34;ActiveTrustedSigners\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;Enabled\u0026#34;: false,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         \u0026#34;DistributionConfig\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;CallerReference\u0026#34;: \u0026#34;techsquad-serverless-site-distribution\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;Aliases\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;DefaultRootObject\u0026#34;: \u0026#34;index.html\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;Origins\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Quantity\u0026#34;: 1,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Items\u0026#34;: [\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;Id\u0026#34;: \u0026#34;techsquad-serverless-site-cloudfront\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;DomainName\u0026#34;: \u0026#34;techsquad-serverless-site.s3.amazonaws.com\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;OriginPath\u0026#34;: \u0026#34;\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;CustomHeaders\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                             \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;S3OriginConfig\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                             \u0026#34;OriginAccessIdentity\u0026#34;: \u0026#34;origin-access-identity/cloudfront/E3IJG9M5PO9BYE\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         }\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     }\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 ]\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;OriginGroups\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Quantity\u0026#34;: 0,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Items\u0026#34;: []\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;DefaultCacheBehavior\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;TargetOriginId\u0026#34;: \u0026#34;techsquad-serverless-site-cloudfront\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;ForwardedValues\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;QueryString\u0026#34;: true,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;Cookies\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;Forward\u0026#34;: \u0026#34;none\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;Headers\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;QueryStringCacheKeys\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     }\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;TrustedSigners\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;Enabled\u0026#34;: false,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;ViewerProtocolPolicy\u0026#34;: \u0026#34;allow-all\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;MinTTL\u0026#34;: 3600,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;AllowedMethods\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;Quantity\u0026#34;: 2,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;Items\u0026#34;: [\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;HEAD\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;GET\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     ],\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;CachedMethods\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;Quantity\u0026#34;: 2,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         \u0026#34;Items\u0026#34;: [\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                             \u0026#34;HEAD\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                             \u0026#34;GET\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                         ]\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     }\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;SmoothStreaming\u0026#34;: false,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;DefaultTTL\u0026#34;: 86400,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;MaxTTL\u0026#34;: 31536000,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Compress\u0026#34;: false,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;LambdaFunctionAssociations\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;FieldLevelEncryptionId\u0026#34;: \u0026#34;\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;CacheBehaviors\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;CustomErrorResponses\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;Comment\u0026#34;: \u0026#34;\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;Logging\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Enabled\u0026#34;: false,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;IncludeCookies\u0026#34;: false,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Bucket\u0026#34;: \u0026#34;\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;Prefix\u0026#34;: \u0026#34;\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;PriceClass\u0026#34;: \u0026#34;PriceClass_All\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;Enabled\u0026#34;: true,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;ViewerCertificate\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;CloudFrontDefaultCertificate\u0026#34;: true,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;MinimumProtocolVersion\u0026#34;: \u0026#34;TLSv1\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;CertificateSource\u0026#34;: \u0026#34;cloudfront\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;Restrictions\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 \u0026#34;GeoRestriction\u0026#34;: {\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;RestrictionType\u0026#34;: \u0026#34;none\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                     \u0026#34;Quantity\u0026#34;: 0\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#                 }\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             },\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;WebACLId\u0026#34;: \u0026#34;\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;HttpVersion\u0026#34;: \u0026#34;http2\u0026#34;,\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#             \u0026#34;IsIPV6Enabled\u0026#34;: true\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#         }\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#     }\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# }\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nWoah a lot of details in there, but what we might need later is the ETAG if we want to download and update our distribution, so have that handy, also we can see our CloudFront URL in there which is: d3v3xtkl1l2ynj.cloudfront.net in this case.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIt might take a few minutes to initialize the distribution, you can check the progress with\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws cloudfront list-distributions | jq \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.DistributionList.Items[0].Status\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026#34;InProgress\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nOnce it\u0026rsquo;s ready the status will be: \u0026ldquo;Deployed\u0026rdquo;, and now if we go to the CloudFront url you should see the site :). The S3 bucket will only let CloudFront access to the files so the only way to serve the site is through CloudFront.\u003c/p\u003e\n\n\u003ch5 id=\"dns\"\u003e\u003cstrong\u003eDNS\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe only thing missing is the record in the DNS (I don\u0026rsquo;t have this domain name in Route53, shame on me but a CNAME will do for now), so let\u0026rsquo;s add it and verify it using dig.\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edig serverless.techsquad.rocks\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# dig CNAME serverless.techsquad.rocks\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.13.5 \u0026lt;\u0026lt;\u0026gt;\u0026gt; CNAME serverless.techsquad.rocks\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ;; global options: +cmd\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ;; Got answer:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 52651\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# ;; OPT PSEUDOSECTION:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ; EDNS: version: 0, flags:; udp: 1452\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ;; QUESTION SECTION:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ;serverless.techsquad.rocks.    IN      CNAME\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# ;; ANSWER SECTION:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# serverless.techsquad.rocks. 292 IN      CNAME   d3v3xtkl1l2ynj.cloudfront.net.\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# ;; Query time: 20 msec\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ;; SERVER: 1.1.1.1#53(1.1.1.1)\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ;; WHEN: Sat Feb 02 17:47:11 -03 2019\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ;; MSG SIZE  rcvd: 98\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nAs we can see the record is already there so we can go to \u003ca href=\"http://serverless.techsquad.rocks\"\u003ehttp://serverless.techsquad.rocks\u003c/a\u003e (note that this only works because we set that alias in the distribution), We could add SSL by creating a certificate using Amazon Certificate Manager, but we will leave that as an exercise or a future small article.\u003c/p\u003e\n\n\u003ch5 id=\"useful-commands\"\u003e\u003cstrong\u003eUseful commands\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn case you need to get some information some useful commands:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThis command will give us the Id of our distribution\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws cloudfront list-distributions --output table --query \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;DistributionList.Items[*].Id\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# -------------------\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |ListDistributions|\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# +-----------------+\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# |  EFJVJEPWAPGU2  |\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# +-----------------+\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThis one the ETag (needed to perform updates for example)\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws cloudfront get-distribution-config --id EFJVJEPWAPGU2 | jq \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;. | .ETag\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# \u0026#34;E2TPQRAUPJL2P3\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAnd this one will save the current config in /tmp so we can update it.\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws cloudfront get-distribution-config --id EFJVJEPWAPGU2 | jq \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;. | .DistributionConfig\u0026#39;\u003c/span\u003e \u0026gt; /tmp/curent-distribution-E2TPQRAUPJL2P\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch5 id=\"upcoming-articles\"\u003e\u003cstrong\u003eUpcoming articles\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis article is the first one in this series of serverless articles, the idea is to build a fully functional website using only serverless technologies, the next post will cover the AWS Lambda function used to send the contact form, also all code from the site can be \u003ca href=\"https://github.com/kainlite/aws-serverless-s3-elm-example\"\u003efound here\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainjkjkjklite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/serving_static_sites_with_github/",
      "url": "https://techsquad.rocks/blog/serving_static_sites_with_github/",
      "title": "Serve your static website in Github",
      "date_published": "2019-01-29T00:00:00Z",
      "tags": ["development","serverless","git"],
      "content_html": "\n\n\u003ch3 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eGitHub offers static web hosting for you and your apps this is called \u003ca href=\"https://pages.github.com/\"\u003eGitHub Pages\u003c/a\u003e, you can use markdown (\u003ca href=\"https://jekyllrb.com/\"\u003ejekyll\u003c/a\u003e or just plain html), for example for this blog I generate all the files with \u003ca href=\"https://gohugo.io/\"\u003eHugo.io\u003c/a\u003e and that gets deployed to GitHub Pages, the configuration is fairly simple as we will see in the following example (this blog setup).\u003c/p\u003e\n\n\u003cp\u003eGitHub pages offers some great examples that are really easy to follow, but if you want to know how I configured everything for this blog continue reading :), if you like it or have any comment use the disqus box at the bottom of the page.\u003c/p\u003e\n\n\u003ch3 id=\"pages\"\u003e\u003cstrong\u003ePages\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe first step in order to use GH Pages is to create a repo (assuming that you already have an account) with the following name: username.github.io in my case is kainlite.github.io, as we can see in the following screenshot:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/github-pages-repository.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nThis repo already has the blog files, but as with any github repo you will see the default commands to push something to it, the next step is to configure the pages itself, for that you need to go to \u003ca href=\"https://github.com/username/username.github.io/settings\"\u003eSettings\u003c/a\u003e (be sure to replace username in the link), then scroll down to the GitHub Pages section. It will look something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cfigure\u003e\n    \u003cimg src=\"/img/github-pages-configuration.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nAs you can see the configuration is fairly simple, you choose the branch that will be used to serve the site, you can even pick a theme if you are going to go with Jekyll, and you can also have a custom domain and https, in this case as I push the static html files to the master branch I selected that branch, you can have any branch you like but it\u0026rsquo;s common to use gh-pages.\u003c/p\u003e\n\n\u003ch5 id=\"dns\"\u003e\u003cstrong\u003eDNS\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eFor the custom domain you need to create the following entries in your DNS \u003ccode\u003edig techsquad.rocks\u003c/code\u003e, you can find these ips in \u003ca href=\"https://help.github.com/articles/setting-up-an-apex-domain/\"\u003ethis page\u003c/a\u003e:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003etechsquad.rocks.        \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e     IN      A       \u003cspan style=\"color:#ae81ff\"\u003e185\u003c/span\u003e.199.110.153\ntechsquad.rocks.        \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e     IN      A       \u003cspan style=\"color:#ae81ff\"\u003e185\u003c/span\u003e.199.111.153\ntechsquad.rocks.        \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e     IN      A       \u003cspan style=\"color:#ae81ff\"\u003e185\u003c/span\u003e.199.108.153\ntechsquad.rocks.        \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e     IN      A       \u003cspan style=\"color:#ae81ff\"\u003e185\u003c/span\u003e.199.109.153\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nAfter a few minutes it should start working, and whatever you have in that repo will be served as static files, there are some limits but they are really high so you can probably start your site or blog or whatever without having to worry to much about it. If you want to know what those limits are go \u003ca href=\"https://help.github.com/articles/what-is-github-pages/\"\u003ehere\u003c/a\u003e, as of now the repository size limit is 1Gb, and there is a soft bandwidth limit of 100GB per month, also 10 builds per hour.\u003c/p\u003e\n\n\u003ch5 id=\"go-hugo\"\u003e\u003cstrong\u003eGo Hugo\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eNow to the interesting part, \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e let\u0026rsquo;s you configure and customize several aspects of the generated files, first be sure to install hugo with your package manager or with go, the steps to create a blog are fairly simple:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehugo new site testing-hugo\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# Congratulations! Your new Hugo site is created in /home/kainlite/Webs/testing-hugo.\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# Just a few more steps and you\u0026#39;re ready to go:\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# 1. Download a theme into the same-named folder.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#    Choose a theme from https://themes.gohugo.io/, or\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#    create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# 2. Perhaps you want to add some content. You can add single files\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e#    with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;.\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;.\u003c/span\u003e\n#\n\u003cspan style=\"color:#75715e\"\u003e# Visit https://gohugo.io/ for quickstart guide and full documentation.\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nAs I have shown in the tmux article, I like to have 2 panes one small pane where I can see the files being rebuilt at each save and another pane with Vim to edit the source code. You can start the hugo webserver for development with \u003ccode\u003ehugo serve -D\u003c/code\u003e and it will listen by default in the port 1313. It is very common to use themes, so you can go to the \u003ca href=\"https://themes.gohugo.io/\"\u003ethemes page\u003c/a\u003e and start your project with one of those, there are several ways to install the themes, and you can see the installation steps at the theme page, for example for the blog I started with \u003ca href=\"https://themes.gohugo.io/hugo-sustain/\"\u003eSustain\u003c/a\u003e but then modified it to match my needs.\u003c/p\u003e\n\n\u003ch5 id=\"publishing-with-git-push\"\u003e\u003cstrong\u003ePublishing with git push\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe most interesting part of this setup is the simple automation that I use to publish with \u003ccode\u003egit push\u003c/code\u003e, I created the following hook in the blog repo \u003ccode\u003e.git/hooks/pre-push\u003c/code\u003e:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/bash\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\nCOMMIT_MESSAGE\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003egit log -n \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e --pretty\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eformat:%s \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003elocal_ref\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\nhugo -d ~/Webs/kainlite.github.io\nANYTHING_CHANGED\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003ecd ~/Webs/kainlite.github.io \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git diff --exit-code\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[[\u003c/span\u003e $? -gt \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n    cd ~/Webs/kainlite.github.io \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git add . \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git commit -m \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eCOMMIT_MESSAGE\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git push origin master\n\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nWhat this simple hook does is check if there is any change and push the changes with the same commit message than in the original repo, we first grab the commit message from the original repo, and then check if something changed with git, if it did then we just add all files and push that to the repo, that will trigger a build in github pages and once completed our page will be updated and visible (it can take a few seconds sometimes, but in general it\u0026rsquo;s pretty fast).\u003c/p\u003e\n\n\u003cp\u003eAnd that\u0026rsquo;s how this blog was configured, in the upcoming articles I will show you how to host your static website with S3 and serve it with cloudflare, after that we will use a go lambda function to send the form email, let me know any comments or anything that you might want me to write about.\u003c/p\u003e\n\n\u003ch5 id=\"pages-environment\"\u003e\u003cstrong\u003ePages Environment\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIf you paid attention at the first screenshot you probably noticed that it says \u003cem\u003e1 Environment\u003c/em\u003e that means that GH Pages have been already configured and if we click it we can see something like this:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/github-pages-environment.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\n\u003cbr /\u003e\nFor static html sites it would be unlikely to see a failure, but it can happen if you use Jekyll for example and there is any syntax error.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }
  ]
}
