{
  "version": "https://jsonfeed.org/version/1",
  "title": "Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more",
  "home_page_url": "https://techsquad.rocks/",
  "feed_url": "https://techsquad.rocks/index.json",
  "items": [
    
    {
      "id": "https://techsquad.rocks/blog/cloud_native_applications_with_kubebuilder_and_kind_aka_kubernetes_operators/",
      "url": "https://techsquad.rocks/blog/cloud_native_applications_with_kubebuilder_and_kind_aka_kubernetes_operators/",
      "title": "Cloud native applications with kubebuilder and kind aka kubernetes operators",
      "date_published": "2020-01-17T00:00:00Z",
      "tags": ["go","golang","kubernetes","linux","security","docker","kustomize","kubebuilder","kind"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will see how to use \u003ca href=\"https://github.com/kubernetes-sigs/kubebuilder\"\u003ekubebuilder\u003c/a\u003e and \u003ca href=\"https://github.com/kubernetes-sigs/kind\"\u003eKind\u003c/a\u003e to create a local test cluster and an operator, then deploy that operator in the cluster and test it, the repository with the files can be found here, also if you want to learn more about the idea and the project go: \u003ca href=\"https://github.com/kainlite/forward\"\u003eforward\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eBasically what the code does is create an alpine/socat pod and you can specify the host, port and protocol and it will make a tunnel for you, so then you can use port-forward or a service or ingress or whatever to expose things that are in another private subnet, while this might not sound like a good idea it has some use cases, so check your security constraints before doing any of that in a normal scenario it should be safe, it can be useful for testing or for reaching a DB while doing some debugging or test, but well, that is for another discussion, the tools used here is what makes this so interesting, this is a cloud native application, since it native to kubernetes and that\u0026rsquo;s what we will explore here.\u003c/p\u003e\n\n\u003cp\u003eWhile Kind is not actually a requirement I used that for testing and really liked it, it\u0026rsquo;s faster and simpler than minikube.\u003c/p\u003e\n\n\u003ch5 id=\"prerequisites\"\u003e\u003cstrong\u003ePrerequisites\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubernetes-sigs/kubebuilder\"\u003ekubebuilder\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubernetes-sigs/kustomize\"\u003ekustomize\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://golang.org/dl/\"\u003eGo 1.13\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kubernetes-sigs/kind\"\u003eKind\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hub.docker.com/?overlay=onboarding\"\u003eDocker\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch5 id=\"create-the-project\"\u003eCreate the project\u003c/h5\u003e\n\n\u003cp\u003eIn this step we need to create the kubebuilder project, so in an empty folder we run:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/fcb512051b1f9aa1abb7ee9d8fd177f5.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"create-the-api\"\u003eCreate the API\u003c/h5\u003e\n\n\u003cp\u003eNext let\u0026rsquo;s create an API, something for us to have control of (our controller).\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/99c415e6bbaf6d92b2c971acddc42221.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eRight until here we only have some boilerplate and basic or empty project with defaults, if you test it now it will work, but it won\u0026rsquo;t do anything interesting, but it covers a lot of ground and we should be grateful that such a tool exists.\u003c/p\u003e\n\n\u003ch5 id=\"add-our-code-to-the-mix\"\u003eAdd our code to the mix\u003c/h5\u003e\n\n\u003cp\u003eFirst we will add it to \u003ccode\u003eapi/v1beta1/map_types.go\u003c/code\u003e, which will add our fields to our type.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/6e823ba4160fb12b9414494c9b16be7b.js\"\u003e\u003c/script\u003e\n\nBasically we just edited the \u003ccode\u003eMapSpec\u003c/code\u003e and the \u003ccode\u003eMapStatus\u003c/code\u003e struct.\u003c/p\u003e\n\n\u003cp\u003eNow we need to add the code to our controller in \u003ccode\u003econtrollers/map_controller.go\u003c/code\u003e\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/d2e59c468a6864a96647054ac616285d.js\"\u003e\u003c/script\u003e\n\nIn this controller we added two functions one to create a pod and modified basically the entire Reconcile function (this one takes care of checking the status and make the transitions in other words makes a controller work like a controller), also notice the kubebuilder annotations which will generate the rbac config for us, pretty handy! right?\u003c/p\u003e\n\n\u003ch5 id=\"starting-the-cluster\"\u003eStarting the cluster\u003c/h5\u003e\n\n\u003cp\u003eNow we will use \u003ca href=\"https://github.com/kubernetes-sigs/kind\"\u003eKind\u003c/a\u003e to create a local cluster to test\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/3d5c7eb58a0ede8e34f0824d927deeca.js\"\u003e\u003c/script\u003e\n\nit could be that easy!?!?! yes, it is!\u003c/p\u003e\n\n\u003ch5 id=\"running-our-operator-locally\"\u003eRunning our operator locally\u003c/h5\u003e\n\n\u003cp\u003eFor testing you can run your operator locally like this:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/8184c8ae455e033602b81965cacf593b.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"testing-it\"\u003eTesting it\u003c/h5\u003e\n\n\u003cp\u003eFirst we spin up a pod, and launch \u003ccode\u003enc -l -p 8000\u003c/code\u003e\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/d940b280bd2f3fdf732b9b259e9da841.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThen we edit our manifest and apply it, check that everything is in place, and do the port-forward and launch another \u003ccode\u003enc localhost 8000\u003c/code\u003e to test if everything went well.\nFirst the manifest\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/d609ef25c2bc621d365781e6f3d9826b.js\"\u003e\u003c/script\u003e\n\nThen the port-forward and test\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/d9455e6a17b2a396f486d48cf159f5f2.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"making-it-publicly-ready\"\u003eMaking it publicly ready\u003c/h5\u003e\n\n\u003cp\u003eHere we just build and push the docker image to dockerhub or our favorite public registry.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/c45158dd378d09b82c8153dbdd122953.js\"\u003e\u003c/script\u003e\n\nThen you can install it with \u003ccode\u003emake deploy IMG=kainlite/forward:0.0.1\u003c/code\u003e and uninstall it with \u003ccode\u003emake uninstall\u003c/code\u003e\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eBe sure to check the \u003ca href=\"https://book.kubebuilder.io/\"\u003ekubebuilder book\u003c/a\u003e if you want to learn more and the \u003ca href=\"https://kind.sigs.k8s.io/docs/user/quick-start\"\u003ekind docs\u003c/a\u003e, I hope you enjoyed it and hope to see you on \u003ca href=\"https://twitter.com/kainlite\"\u003etwitter\u003c/a\u003e or \u003ca href=\"https://github.com/kainlite\"\u003egithub\u003c/a\u003e!\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/how_to_report_spam_to_spamcop_from_gmail/",
      "url": "https://techsquad.rocks/blog/how_to_report_spam_to_spamcop_from_gmail/",
      "title": "How to report spam to spamcop from gmail",
      "date_published": "2020-01-04T00:00:00Z",
      "tags": ["linux"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eEasy method to report spam to \u003ca href=\"https://www.spamcop.net/\"\u003eSpamCop.net\u003c/a\u003e using GMail, this helps to reduce the true Spam from unknown sources, since for some reason I started to get like 40 emails per day (all went to spam), but it is still somewhat annoying, so I started reporting it to spamcop, this alternative method doesn\u0026rsquo;t need a script and it\u0026rsquo;s really easy to do as well, same result as with the script from \u003ca href=\"https://techsquad.rocks/blog/how_to_report_your_gmail_spam_folder_to_spamcop/\"\u003ethe previous post\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003ePre-requisites:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eGMail account\u003c/li\u003e\n\u003cli\u003eSetup a spamcop account which you will be using to send your reports, you can do that \u003ca href=\"https://www.spamcop.net/anonsignup.shtml\"\u003ehere\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch5 id=\"forwarding-as-attachment\"\u003e\u003cstrong\u003eForwarding as attachment\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eFirst of all you need to select all emails and then click on the three dots and select \u0026ldquo;Forward as attachment\u0026rdquo;\n\u003cfigure\u003e\n    \u003cimg src=\"/img/spamcop-1.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"sending-it-to-your-spamcop-email\"\u003e\u003cstrong\u003eSending it to your spamcop email\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this step the only thing that you need to do is put your Spamcop email (it gives you this address to report spam when you create the account and in the report spam tab), you do not need to put anything in the body or the subject, just send it as is.\n\u003cfigure\u003e\n    \u003cimg src=\"/img/spamcop-2.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"confirming-each-one\"\u003e\u003cstrong\u003eConfirming each one\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThen you will get an email with a link to each spam message to submit the report.\n\u003cfigure\u003e\n    \u003cimg src=\"/img/spamcop-3.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"sending-the-reports\"\u003e\u003cstrong\u003eSending the reports\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis is a sample report, you can add additional notes if needed and then confirm to send it to the abuse addresses of the owners of the IPs and links found in the email.\n\u003cfigure\u003e\n    \u003cimg src=\"/img/spamcop-4.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003ch3 id=\"additional-notes\"\u003eAdditional notes\u003c/h3\u003e\n\n\u003cp\u003eThis method is pretty easy for someone who doesn\u0026rsquo;t want to run a script or whatever and is still able to report the spam to the sources, however if you want something a bit less manual you can try with the script or just create a filter to delete everything in the spam folder.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/how_to_report_your_gmail_spam_folder_to_spamcop/",
      "url": "https://techsquad.rocks/blog/how_to_report_your_gmail_spam_folder_to_spamcop/",
      "title": "How to report your gmail spam folder to spamcop",
      "date_published": "2019-12-31T00:00:00Z",
      "tags": ["development","golang","go","linux"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis post is a bit different from the others in the sense that it\u0026rsquo;s a small \u0026ldquo;tool\u0026rdquo; I did to ease spam reporting to \u003ca href=\"https://www.spamcop.net/\"\u003eSpamCop.net\u003c/a\u003e, this helps to reduce the true Spam from unknown sources, since for some reason I started to get like 40 emails per day (all went to spam), but it is still somewhat annoying, so I started reporting it to spamcop, but the process was kind of slow and I got tired of that quickly, so I created this \u0026ldquo;script\u0026rdquo; to make things easier. Basically what it does is list all messages in the spam folders fetches them and then forwards each one as an attachment to spamcop, then you get an email with a link to confirm the submission and that\u0026rsquo;s it.\u003c/p\u003e\n\n\u003cp\u003eThere are a few pre-requisites, like enabling the GMail API for your account, you can do that \u003ca href=\"https://developers.google.com/gmail/api/quickstart/go#step_1_turn_on_the\"\u003ehere\u003c/a\u003e, after that the first time you use the app you have to authorize it, you do this by pasting the URL that the app gives you in the browser, then clicking Allow, and then pasting the token that it gives you back in the terminal (this only needs to be done once), after that you just run the binary in a cronjob or maybe even as a lambda (but I haven\u0026rsquo;t gone there yet), I usually check the spam folder remove what I don\u0026rsquo;t think it\u0026rsquo;s spam or whatever and then run the script to report everything else that it is clearly spam, it takes a few seconds and then I get the link to confirm all reports (one by one, sadly), this script is not perfect as sometimes spamcop cannot read properly the forwarded email, but I have checked exporting those as a file and I do see them all right, so that will be an investigation for another day, this only took like 2-4 hours, having 0 knowledge of the GMail API, etc.\u003c/p\u003e\n\n\u003cp\u003eAlso you need to setup a spamcop account which you will be using to send your reports, you can do that \u003ca href=\"https://www.spamcop.net/anonsignup.shtml\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe source code can be found \u003ca href=\"https://github.com/kainlite/spamcop\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\n\u003ch5 id=\"code\"\u003e\u003cstrong\u003eCode\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eI have added some comments along the code to make things easy to understand\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/557731e9b398e593fc6a176cd9f705e5.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"running-it\"\u003e\u003cstrong\u003eRunning it\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/244d04580a8ca63e4bbecdcecd649840.js\"\u003e\u003c/script\u003e\n\n\n\u003ch5 id=\"sources\"\u003e\u003cstrong\u003eSources\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSome articles, pages, and files that I used and helped me to do what I wanted to do:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developers.google.com/gmail/api/quickstart/go\"\u003ehttps://developers.google.com/gmail/api/quickstart/go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/gsuitedevs/go-samples/blob/master/gmail/quickstart/quickstart.go\"\u003ehttps://github.com/gsuitedevs/go-samples/blob/master/gmail/quickstart/quickstart.go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://socketloop.com/tutorials/golang-send-email-with-attachment-rfc2822-using-gmail-api-example\"\u003ehttps://socketloop.com/tutorials/golang-send-email-with-attachment-rfc2822-using-gmail-api-example\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://raw.githubusercontent.com/googleapis/google-api-go-client/master/examples/gmail.go\"\u003ehttps://raw.githubusercontent.com/googleapis/google-api-go-client/master/examples/gmail.go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/xDinomode/Go-Gmail-Api-Example/blob/master/email.go\"\u003ehttps://github.com/xDinomode/Go-Gmail-Api-Example/blob/master/email.go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.spamcop.net/reporter.pl\"\u003ehttps://www.spamcop.net/reporter.pl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://godoc.org/google.golang.org/api/gmail/v1#Message\"\u003ehttps://godoc.org/google.golang.org/api/gmail/v1#Message\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"additional-notes\"\u003eAdditional notes\u003c/h3\u003e\n\n\u003cp\u003eWhile this still needs some work hopefully will keep my account clean and probably help someone wondering about how to do the same.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/brief_introduction_to_terratest/",
      "url": "https://techsquad.rocks/blog/brief_introduction_to_terratest/",
      "title": "Brief introduction to terratest",
      "date_published": "2019-09-08T00:00:00Z",
      "tags": ["go","golang","development","linux","terraform"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will see the basics to have tests for your terraform code using a re-usable pattern, we will use the code from the last article \u003ca href=\"https://techsquad.rocks/blog/serverless_authentication_with_cognito_and_golang/\"\u003eServerless authentication with Cognito\u003c/a\u003e, so refer to that one before starting this one if you want to know how did we get here. Also as a side note this is a very basic example on how to get started with terratest.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/gruntwork-io/terratest\"\u003eTerratest\u003c/a\u003e is a Go library that makes it easier to write automated tests for your infrastructure code, it supports Terraform, Docker, Packer, SSH, AWS, GCP, Kubernetes, Helm, and much more, also as it\u0026rsquo;s written as a Go library you have access to all the existing APIs.\u003c/p\u003e\n\n\u003ch5 id=\"the-code\"\u003e\u003cstrong\u003eThe code\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThere are comments all over the code to explain each part, but what I want to highlight here is the pattern being used with the module \u003ccode\u003etest-structure\u003c/code\u003e, this module allows us to split the test in sections and skip parts that we don\u0026rsquo;t need or want to run, so we have 3 stages here: \u003ccode\u003ecleanup\u003c/code\u003e, \u003ccode\u003edeploy\u003c/code\u003e, and \u003ccode\u003evalidate\u003c/code\u003e, this lets you use \u003ccode\u003eSKIP_stage\u003c/code\u003e, for example \u003ccode\u003eSKIP_cleanup\u003c/code\u003e when you run your tests with \u003ccode\u003ego test -timeout 90m .\u003c/code\u003e (I added some extra bits, that I usually use, like timeout by default it\u0026rsquo;s 10 minutes I believe and it\u0026rsquo;s often too short), to only run \u003ccode\u003evalidate\u003c/code\u003e and \u003ccode\u003ecleanup\u003c/code\u003e, it can be useful while developing a module to test without having to wait for everything to be re-created.\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;crypto/tls\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;testing\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\n    \u003cspan style=\"color:#a6e22e\"\u003ehttp_helper\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/gruntwork-io/terratest/modules/http-helper\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/gruntwork-io/terratest/modules/retry\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/gruntwork-io/terratest/modules/terraform\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#a6e22e\"\u003etest_structure\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/gruntwork-io/terratest/modules/test-structure\u0026#34;\u003c/span\u003e\n)\n\n\u003cspan style=\"color:#75715e\"\u003e// Main function, define stages and run.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTestTerraformAws\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etesting\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eT\u003c/span\u003e) {\n    \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParallel\u003c/span\u003e()\n\n    \u003cspan style=\"color:#75715e\"\u003e// Pick a random AWS region to test in. This helps ensure your code works in all regions.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e// awsRegion := aws.GetRandomStableRegion(t, nil, nil)\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eawsRegion\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;us-east-1\u0026#34;\u003c/span\u003e\n\n    \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;../terraform\u0026#34;\u003c/span\u003e\n\n    \u003cspan style=\"color:#75715e\"\u003e// At the end of the test, undeploy the web app using Terraform\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_structure\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRunTestStage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cleanup\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n        \u003cspan style=\"color:#a6e22e\"\u003edestroyTerraform\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e)\n    })\n\n    \u003cspan style=\"color:#75715e\"\u003e// Deploy the web app using Terraform\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003etest_structure\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRunTestStage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deploy\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n        \u003cspan style=\"color:#a6e22e\"\u003edeployTerraform\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eawsRegion\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e)\n    })\n\n    \u003cspan style=\"color:#75715e\"\u003e// Validate that the ASG deployed and is responding to HTTP requests\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003etest_structure\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eRunTestStage\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;validate\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n        \u003cspan style=\"color:#a6e22e\"\u003evalidateAPIGateway\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e)\n    })\n}\n\n\u003cspan style=\"color:#75715e\"\u003e// Validate that the API Gateway has been deployed and is working\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalidateAPIGateway\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etesting\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eT\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n    \u003cspan style=\"color:#75715e\"\u003e// Load the Terraform Options saved by the earlier deploy_terraform stage\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eterraformOptions\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_structure\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLoadTerraformOptions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e)\n\n    \u003cspan style=\"color:#75715e\"\u003e// Run `terraform output` to get the value of an output variable\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eterraform\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOutput\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eterraformOptions\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;URL\u0026#34;\u003c/span\u003e)\n\n    \u003cspan style=\"color:#75715e\"\u003e// It can take a few minutes for the API GW and CloudFront to finish spinning up, so retry a few times\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e//  maxRetries := 30\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003etimeBetweenRetries\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e\n\n    \u003cspan style=\"color:#75715e\"\u003e// Setup a TLS configuration to submit with the helper, a blank struct is acceptable\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003etlsConfig\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eConfig\u003c/span\u003e{}\n\n    \u003cspan style=\"color:#75715e\"\u003e// Verify that the API Gateway returns a proper response\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eapigw\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eretry\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDoInBackgroundUntilStopped\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Check URL %s\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e), \u003cspan style=\"color:#a6e22e\"\u003etimeBetweenRetries\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n        \u003cspan style=\"color:#a6e22e\"\u003ehttp_helper\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHttpGetWithCustomValidation\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s/app/health\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etlsConfig\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estatusCode\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e {\n            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estatusCode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n        })\n    })\n\n    \u003cspan style=\"color:#75715e\"\u003e// Stop checking the API Gateway\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eapigw\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDone\u003c/span\u003e()\n}\n\n\u003cspan style=\"color:#75715e\"\u003e// Deploy the resources using Terraform\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edeployTerraform\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etesting\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eT\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eawsRegion\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n    \u003cspan style=\"color:#a6e22e\"\u003eterraformOptions\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eterraform\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eOptions\u003c/span\u003e{\n        \u003cspan style=\"color:#75715e\"\u003e// The path to where our Terraform code is located\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#a6e22e\"\u003eTerraformDir\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e,\n    }\n\n    \u003cspan style=\"color:#75715e\"\u003e// Save the Terraform Options struct, instance name, and instance text so future test stages can use it\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003etest_structure\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSaveTerraformOptions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eterraformOptions\u003c/span\u003e)\n\n    \u003cspan style=\"color:#75715e\"\u003e// This will run `terraform init` and `terraform apply` and fail the test if there are any errors\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eterraform\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInitAndApply\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eterraformOptions\u003c/span\u003e)\n}\n\n\u003cspan style=\"color:#75715e\"\u003e// Destroy the resources using Terraform\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edestroyTerraform\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003etesting\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eT\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e) {\n    \u003cspan style=\"color:#75715e\"\u003e// Load the Terraform Options saved by the earlier deploy_terraform stage\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003eterraformOptions\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etest_structure\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eLoadTerraformOptions\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eworkingDir\u003c/span\u003e)\n\n    \u003cspan style=\"color:#a6e22e\"\u003eterraform\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDestroy\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eterraformOptions\u003c/span\u003e)\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nSome high level notes on each stage:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003edeploy\u003c/code\u003e: This stage will take care of running init and then apply.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003evalidate\u003c/code\u003e: This stage will take care of running a probe to check if our API is up and if the return code is \u003ccode\u003e200\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecleanup\u003c/code\u003e: This stage will take care of running destroy and cleaning up everything.\u003c/p\u003e\n\n\u003ch5 id=\"dep\"\u003e\u003cstrong\u003eDep\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eCurrently terratest uses dep, so you will need this file \u003ccode\u003eGopkg.toml\u003c/code\u003e and \u003ccode\u003edep\u003c/code\u003e installed to be able to install the dependencies with \u003ccode\u003edep ensure -v\u003c/code\u003e.\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e[[\u003cspan style=\"color:#a6e22e\"\u003econstraint\u003c/span\u003e]]\n  \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/gruntwork-io/terratest\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#a6e22e\"\u003eversion\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0.18.6\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch5 id=\"dockerfile\"\u003e\u003cstrong\u003eDockerfile\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAlso you can use this small dockerfile that does all that for you, in this example using the code from the previously mentioned article.\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eFROM golang:alpine\nMAINTAINER \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;kainlite \u0026lt;kainlite@gmail.com\u0026gt;\u0026#34;\u003c/span\u003e\n\nARG TERRAFORM_VERSION\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e.12.8\nENV TERRAFORM_VERSION\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$TERRAFORM_VERSION\n\nRUN apk --no-cache add curl git unzip gcc g++ make ca-certificates \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n\nRUN mkdir tmp \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    curl \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://releases.hashicorp.com/terraform/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eTERRAFORM_VERSION\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/terraform_\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eTERRAFORM_VERSION\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e_linux_amd64.zip\u0026#34;\u003c/span\u003e -o tmp/terraform.zip \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    unzip tmp/terraform.zip -d /usr/local/bin \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    rm -rf tmp/\n\nARG GOPROJECTPATH\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/go/src/github.com/kainlite/serverless-cognito\nCOPY ./ $GOPROJECTPATH\n\nWORKDIR $GOPROJECTPATH/test\n\nRUN dep ensure -v\n\nCMD \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;go\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; -timeout\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;90m\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch5 id=\"manually-testing-it\"\u003e\u003cstrong\u003eManually testing it\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eFirst we check that the URL actually works, and that everything is in place.\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ curl https://api.skynetng.pw/app/health\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# {\u0026#34;status\u0026#34;:\u0026#34;healthy\u0026#34;}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003eNext we can test it using our validate stage, using terratest:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ SKIP_deploy\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etrue SKIP_cleanup\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etrue go test -timeout 90m .\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# ok      github.com/kainlite/test        1.117s\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nThis works because in the terraform code we have an output called \u003ccode\u003eURL\u003c/code\u003e which is \u003ccode\u003ehttps://api.skynetng.pw\u003c/code\u003e, then we add at the end \u003ccode\u003e/app/health\u003c/code\u003e and check if it return a \u003ccode\u003e200\u003c/code\u003e code, otherwise we wait and retry until it does or times out.\u003c/p\u003e\n\n\u003ch3 id=\"closing-notes\"\u003eClosing notes\u003c/h3\u003e\n\n\u003cp\u003eAnd that\u0026rsquo;s all for now, in the next piece I will cover how to automate this deployment using a CI/CD tool, so you can have truly repeatable infrastructure, which can be of big importance when working on various modules, versions and deployments.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/serverless_authentication_with_cognito_and_golang/",
      "url": "https://techsquad.rocks/blog/serverless_authentication_with_cognito_and_golang/",
      "title": "Serverless authentication with Cognito and Go",
      "date_published": "2019-09-02T00:00:00Z",
      "tags": ["go","golang","serverless","aws","security","cognito","lambda"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will see how to use Terraform and Go to create a serverless API using API Gateway, Lambda, and Go, and we will also handle authentication with AWS Cognito, the repo with the files can be found \u003ca href=\"https://github.com/kainlite/serverless-cognito\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"terraform\"\u003e\u003cstrong\u003eTerraform\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this example I used terraform 0.12, and I kind of liked the new changes, it feels more like coding and a more natural way to describe things, however I think there are more bugs than usual in this version, but I really like the new output for the plan, apply, etc, getting back to the article since there is a lot of code I will gradually update the post with more notes and content or maybe another post explaining another section, but the initial version will only show the cognito part and the code to make it work and how to test it.\u003c/p\u003e\n\n\u003ch5 id=\"cognito\"\u003eCognito\u003c/h5\u003e\n\n\u003cp\u003e\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/1e466c6ac28f9cfcf1513c105325e100.js\"\u003e\u003c/script\u003e\n\nAs we can see it\u0026rsquo;s really simple to have a cognito user pool working, the most important part here is the \u003ccode\u003eauto_verified_attributes\u003c/code\u003e because that is what makes cognito to actually send an email or an sms with the confirmation code, the rest is self-describing, it creates a pool and a client, since what we need to be able to interact with out pool is the client that part is of considerable importance even that we have most things with default values. As you might have noticed we defined two \u003ccode\u003eexplicit_auth_flows\u003c/code\u003e and that is to be able to interact with this user pool using user and password.\u003c/p\u003e\n\n\u003ch5 id=\"acm\"\u003eACM\u003c/h5\u003e\n\n\u003cp\u003eNext let\u0026rsquo;s see how we manage the certificate creation using ACM.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/21e47ec80a8c9c5cf84420a61ae44da9.js\"\u003e\u003c/script\u003e\n\nHere basically we create the certificate using \u003ccode\u003eaws_acm_certificate\u003c/code\u003e and validate it automatically using the \u003ccode\u003eDNS\u003c/code\u003e method and the resource \u003ccode\u003eaws_acm_certificate_validation\u003c/code\u003e, the other resources in the file are just there because they are kind of associated but not necessarily need to be there.\u003c/p\u003e\n\n\u003ch5 id=\"route53\"\u003eRoute53\u003c/h5\u003e\n\n\u003cp\u003eHere we just create an alias record for the API Gateway and the validation record.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/6601b5154528547f5724e498712a8b4b.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"api-gateway\"\u003eAPI Gateway\u003c/h5\u003e\n\n\u003cp\u003eWhile this file might seem relatively simple, the API Gateway has many features and can get really complex really fast, basically what we are doing here is creating an API with a resource that accepts all method types and proxy that as it is to our lambda function.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/455dfd82e2a23299dc2d22650a2c1cef.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"lambda\"\u003eLambda\u003c/h5\u003e\n\n\u003cp\u003eThis file has the lambda function definition, the policy and the roles needed, basically the policy is to be able to log to CloudWatch and to inspect with X-Ray, then the log group to store the logs will set the retention period by default 7 days.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/f8d4db31c0b353d627df97418dd5dc87.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"variables-and-locals\"\u003eVariables and locals\u003c/h5\u003e\n\n\u003cp\u003eFirst the variables file with the default values\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/0b69599f35957612616dae4220207e37.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAnd last the locals file, in this small snippet we are just making a map with a computed value and the values that can come from a variable which can be quite useful in many scenarios where you don\u0026rsquo;t know all the information in advance or something is dynamically assigned:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/348a4919f625452412beeed8e2a45200.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"deployment-scripts\"\u003eDeployment scripts\u003c/h5\u003e\n\n\u003cp\u003eThere is a small bash script to make it easier to run the deployment, AKA as compiling the code, zipping it, and running terraform to update our function or whatever we changed.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/eafa48d2156b8a5bb2e5a458a928fab5.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"go\"\u003e\u003cstrong\u003eGo\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe good thing is that everything is code, but we don\u0026rsquo;t have to manage any server, we just consume services from AWS completely from code, isn\u0026rsquo;t that amazing?, I apologize for the length of the file, but you will notice that it\u0026rsquo;s very repetitive, in most functions we load the AWS configuration, we make a request and return a response, we\u0026rsquo;re also using Gin as a router, which is pretty straight-forward and easy to use, we have only one authenticated path (\u003ccode\u003e/user/profile\u003c/code\u003e), and we also have another unauthenticated path which is a health check (\u003ccode\u003e/app/health\u003c/code\u003e), the other two paths (\u003ccode\u003e/user\u003c/code\u003e and \u003ccode\u003e/user/validate\u003c/code\u003e) are exclusively for the user creation process with cognito.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/755f0c1b2381af46fb2f69f8865cabb9.js\"\u003e\u003c/script\u003e\n\nAll logs go to CloudWatch and you can also use X-Ray to diagnose issues.\u003c/p\u003e\n\n\u003ch5 id=\"testing-it\"\u003e\u003cstrong\u003eTesting it\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSo we\u0026rsquo;re going to hit the API to create, validate, and query the empty profile of the user from the terminal using curl.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/71ba07ed304b527793ddd1f95c92d244.js\"\u003e\u003c/script\u003e\n\nI have added most info in as comments in the snippet, note that I also used my test domain \u003ccode\u003eskynetng.pw\u003c/code\u003e with the subdomain \u003ccode\u003eapi\u003c/code\u003e for all tests.\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis post was heavily inspired by \u003ca href=\"https://a.l3x.in/2018/07/25/lambda-api-custom-domain-tutorial.html\"\u003ethis post\u003c/a\u003e from Alexander, kudos to him for the great work!, this post expands on that and adds the certificate with ACM, it also handles a basic AWS Cognito configuration and the necessary go code to make it work, there are other ways to accomplish the same, but what I like about this approach is that you can have some endpoints or paths without authentication and you can use authentication, etc on-demand. This article is a bit different but I will try to re-shape it in the following weeks, and also cover more of the content displayed here, let me know if you have any comments or suggestions!\u003c/p\u003e\n\n\u003cp\u003eIn some near future I will build upon this article in another article adding a few cool things, for example to allow an user to upload an image to an S3 bucket and fetch that with a friendly name using Cloudfront (In a secure manner, and only able to upload/update his/her profile picture, while being able to fetch anyone profile pic), the idea is to have a fully functional small API using AWS services and serverless facilities with common tasks that you can find in any functional website.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/getting_started_with_terraform_modules/",
      "url": "https://techsquad.rocks/blog/getting_started_with_terraform_modules/",
      "title": "Getting started with terraform modules",
      "date_published": "2019-06-24T00:00:00Z",
      "tags": ["terraform","kubernetes","gcp"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will see a subtle introduction to terraform modules, how to pass data into the module, get something from the module and create a resource (GKE cluster), it\u0026rsquo;s intended to be as simple as possible just to be aware of what a module is composed of, or how can you do your own modules, sometimes it makes sense to have modules to abstract implementations that you use over several projects, or things that are often repeated along the project. So let\u0026rsquo;s see what it takes to create and use a module. The source code for this article can be found \u003ca href=\"https://github.com/kainlite/terraform-module-example\"\u003ehere\u003c/a\u003e. Note that in this example I\u0026rsquo;m using GCP since they give you $300 USD for a year to try their services and it looks pretty good so far, after sign-up you will need to go to IAM, then create a service account and after that export the the key (this is required for the terraform provider to talk to GCP).\u003c/p\u003e\n\n\u003ch5 id=\"composition-of-a-module\"\u003e\u003cstrong\u003eComposition of a module\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eA module can be any folder with a \u003ccode\u003emain.tf\u003c/code\u003e file in it, yes, that is the only \u003cem\u003erequired\u003c/em\u003e file for a module to be usable, but the recommendation is that you also put a \u003ccode\u003eREADME.md\u003c/code\u003e file with a description of the module if it\u0026rsquo;s intended to be used by people if it\u0026rsquo;s a sub-module it\u0026rsquo;s not necessary, also you will need a file called \u003ccode\u003evariables.tf\u003c/code\u003e and other \u003ccode\u003eoutputs.tf\u003c/code\u003e of course if it\u0026rsquo;s a big module that cannot be splitted into sub-modules you can split those files for convenience or readability, variables should have descriptions so the tooling can show you what are they for, you can read more about the basics for a module \u003ca href=\"https://www.terraform.io/docs/modules/index.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eBefore moving on let\u0026rsquo;s see the folder structure of our project:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/4229babfdf16f9caaf16889246a5b53c.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"okay-enough-talking-show-me-the-code\"\u003e\u003cstrong\u003eOkay enough talking, show me the code\u003c/strong\u003e\u003c/h5\u003e\n\n\u003ch6 id=\"the-project\"\u003e\u003cstrong\u003eThe project\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eLet\u0026rsquo;s start with the \u003ccode\u003emain.tf\u003c/code\u003e that will call our module, notice that I added a few additional comments but it\u0026rsquo;s pretty much straight forward, we set the provider, then we define some variables, call our module and print some output (output can also be used to pass data between modules).\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/63f7b16e104bd3d2c827e4d491cbd347.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThen \u003ccode\u003eterraform.tfvars\u003c/code\u003e has some values to override the defaults that we defined:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/2ff76f85396f70f5a5d0fd406fc91381.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch6 id=\"the-module\"\u003e\u003cstrong\u003eThe module\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eNow into the module itself, this module will create a GKE cluster, and while it\u0026rsquo;s not a good practice to have a module as a wrapper but for this example we will forget about that rule for a while, this is the \u003ccode\u003emain.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/8a2db80dbcba38160e4c8f0112e55424.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003evariables.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/183d577eef0b1967792b0e2e95e79e1e.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAnd finally the \u003ccode\u003eoutputs.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/3b30dcc163e97103e9503be86672bd39.js\"\u003e\u003c/script\u003e\n\nNotice that we have a lot more outputs than the one we decided to print out, but you can play with that and experiment if you want :)\u003c/p\u003e\n\n\u003ch6 id=\"testing-it\"\u003e\u003cstrong\u003eTesting it\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eFirst we need to initialize our project so terraform can put modules, provider files, etc in place, it\u0026rsquo;s a good practice to version things and to move between versions that way everything can be tested and if something is not working as expected you can always rollback to the previous state.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/346e84ef3577ef708625741a508afb2c.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThen we will just run it.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/e77dbdd482eb26cd54414324761900f4.js\"\u003e\u003c/script\u003e\n\nIf we check the output we will see that the name of the cluster matches the one from our variables and at the end we can see the output that the module produced.\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see, creating a module is pretty simple and with good planing and practice it can save you a lot of effort along big projects or while working on multiple projects, let me know your thoughts about it. Always remember to destroy the resources that you\u0026rsquo;re not going to use with \u003ccode\u003eterraform destroy\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/go_grpc_cheap_ping/",
      "url": "https://techsquad.rocks/blog/go_grpc_cheap_ping/",
      "title": "Go gRPC Cheap Ping",
      "date_published": "2019-06-23T00:00:00Z",
      "tags": ["go","grpc"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will explore gRPC with a cheap ping application, basically we will do a ping and measure the time it takes for the message to go to the server and back before reporting it to the terminal. You can find the source code \u003ca href=\"https://github.com/kainlite/grpc-ping\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"protobuf\"\u003e\u003cstrong\u003eProtobuf\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you might already know gRPC serializes data using \u003ca href=\"https://developers.google.com/protocol-buffers/\"\u003eprotocol buffers\u003c/a\u003e, We are just going to create a \u003ca href=\"https://grpc.io/docs/guides/concepts/\"\u003eUnary RPC\u003c/a\u003e as follows.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/ad4f85164730c6c6fb2257329f7fc164.js\"\u003e\u003c/script\u003e\n\nWith this file in place we are defining a service that will be able to send a single \u003ccode\u003ePingRequest\u003c/code\u003e and get a single \u003ccode\u003ePingResponse\u003c/code\u003e, we have a \u003ccode\u003eData\u003c/code\u003e field that goes back and forth in order to send some bytes over the wire (even that we don\u0026rsquo;t really care about that, it could be important or crucial in a performance test).\u003c/p\u003e\n\n\u003ch5 id=\"generating-the-code\"\u003e\u003cstrong\u003eGenerating the code\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn order to be able to use protobuf we need to generate the code for the app that we\u0026rsquo;re writing in this case for golang the command would be this one:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/dac49c31ffaedac1d0cc1584a8cce306.js\"\u003e\u003c/script\u003e\n\nThis will give us a definition of the service and the required structs to carry the data that we have defined as messages.\u003c/p\u003e\n\n\u003ch5 id=\"client\"\u003e\u003cstrong\u003eClient\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe client does most of the work here, as you can see you can supply 2 arguments one to point to another host:port and the second to send a string of your liking, then it measures the time it takes to send and receive the message back and prints it to the screen with a similar line to what the actual \u003ccode\u003eping\u003c/code\u003e command looks in linux.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/663a25de0321b85bde37e006c1621e60.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"server\"\u003e\u003cstrong\u003eServer\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe server is a merely echo server since it will send back whatever you send to it and log it to the console, by default it will listen in port \u003ccode\u003e50000\u003c/code\u003e.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/7c809672a86b6454f7080a88d87da977.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"testing-it\"\u003e\u003cstrong\u003eTesting it\u003c/strong\u003e\u003c/h5\u003e\n\n\u003ch6 id=\"regular-ping\"\u003e\u003cstrong\u003eRegular ping\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/8f60f178d0e6796256647d0e5a5c4078.js\"\u003e\u003c/script\u003e\n\n\n\u003ch6 id=\"client-1\"\u003e\u003cstrong\u003eClient\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eThis is what we would see in the terminal while testing it.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/3abc2ac34d1390680fc9fb5787c1da02.js\"\u003e\u003c/script\u003e\n\nAs you can see the initial connection takes a bit more time but after that the roundtrip time is very consistent (of course our cheap ping doesn\u0026rsquo;t cover errors, packet loss, etc).\u003c/p\u003e\n\n\u003ch6 id=\"server-1\"\u003e\u003cstrong\u003eServer\u003c/strong\u003e\u003c/h6\u003e\n\n\u003cp\u003eThe server just echoes back and logs what received over the wire.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/edf6fc9b5f1c71e2eab054b5dbae3a24.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see gRPC is pretty fast and simplifies a lot everything that you need to do in order to have a highly efficient message system or communication between microservices for example, it\u0026rsquo;s also easy to generate the boilerplate for whatever language you prefer and have a common interface that everyone has to agree on.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/go_continuous_delivery_with_terraform_and_kubernetes/",
      "url": "https://techsquad.rocks/blog/go_continuous_delivery_with_terraform_and_kubernetes/",
      "title": "Go continuous delivery with Terraform and Kubernetes",
      "date_published": "2019-05-05T00:00:00Z",
      "tags": ["travis-ci","docker","golang","go","linux","continuous-integration","continuous-delivery","terraform"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will continue where we left off the last time \u003ca href=\"https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/\"\u003eGo continuous integration with Travis CI and Docker\u003c/a\u003e, the files used here can be found \u003ca href=\"https://github.com/kainlite/whatismyip-go/tree/continuos-delivery\"\u003eHERE\u003c/a\u003e, and we will be creating our terraform cluster with a load balancer and generating our kubeconfig file based on the certs provided by terraform on travis and then finally creating a basic deployment and validate that everything works.\u003c/p\u003e\n\n\u003ch5 id=\"digitalocean\"\u003e\u003cstrong\u003eDigitalOcean\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eWe need to create a token so terraform can create resources using DO API. Go to your account then in the menu on the left click API, then you should see something like this:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-token-1.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nOnce there click generate token (give it a meaningful name to you), and make sure it can write.\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-token-2.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"terraform\"\u003e\u003cstrong\u003eTerraform\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs the next step it would be good to set the token for terraform, so let\u0026rsquo;s examine all files and see what they are going to do, but first we\u0026rsquo;re going to provide the secrets to our app via environment variables, and I\u0026rsquo;ve found quite useful to use \u003ccode\u003edirenv\u003c/code\u003e on many projects, so the content of the first file \u003ccode\u003e.envrc\u003c/code\u003e would look something like:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/2da0abc285e227b966b492f8e7f3eddc.js\"\u003e\u003c/script\u003e\n\nand after that you will need to allow it\u0026rsquo;s execution by running \u003ccode\u003edirenv allow\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe first terraform file that we are going to check is \u003ccode\u003eprovider.tf\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/add2f8b31929468359e9222bce0855f1.js\"\u003e\u003c/script\u003e\n\nAs we\u0026rsquo;re using environment variables we need to declare it and then set it in the provider, for now we only need the token.\u003c/p\u003e\n\n\u003cp\u003eThen the \u003ccode\u003ekubernetes.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/11d6eb62a0b3c5f0e5978e6b43e4b166.js\"\u003e\u003c/script\u003e\n\nThis file will be the responsible of creating the kubernetes cluster, as it\u0026rsquo;s our development cluster we only need one node.\u003c/p\u003e\n\n\u003cp\u003eNext the file \u003ccode\u003elb.tf\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/85185e39960765a189ee70b5c9489fea.js\"\u003e\u003c/script\u003e\n\nThis one is particularly interesting because it will provide a point of access to our applications (port 80 on it\u0026rsquo;s public IP address), and it also uses a basic health check.\u003c/p\u003e\n\n\u003cp\u003eAnd last but not least the \u003ccode\u003eoutput.tf\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/18205b3ba693be054e2ea22832f4ecef.js\"\u003e\u003c/script\u003e\n\nThis file will print the kubernetes config file that we need to be able to use \u003ccode\u003ekubectl\u003c/code\u003e, and also the IP address of our load balancer.\u003c/p\u003e\n\n\u003cp\u003eSo what do we do with all of this?, first you will need to run \u003ccode\u003eterraform init\u003c/code\u003e inside the terraform folder to download plugins and providers, once that is done you can run \u003ccode\u003eterraform plan\u003c/code\u003e to see what changes terraform wants to make or \u003ccode\u003eterraform apply\u003c/code\u003e to do the changes. How is that going to look?:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/d4a4c4f18be5022e2ed23e74879ff975.js\"\u003e\u003c/script\u003e\n\nThis will create our cluster in DigitalOcean, remember to destroy it after you\u0026rsquo;re done using it with \u003ccode\u003eterraform destroy\u003c/code\u003e, if you don\u0026rsquo;t use a plan you will be prompted for a confirmation when you do \u003ccode\u003eterraform apply\u003c/code\u003e, review and say \u003ccode\u003eyes\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"travis\"\u003e\u003cstrong\u003eTravis\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eWe did some additions to our \u003ccode\u003e.travis.yml\u003c/code\u003e file, which are mostly to prepare \u003ccode\u003ekubectl\u003c/code\u003e and to also trigger a deployment if the build succeeded.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/69cdd243a815b68c483bdc71e6bf9186.js\"\u003e\u003c/script\u003e\n\nAs shown in the screenshot we took the base64 encoded certificates and loaded them into travis as environment variables (KUBERNETES_CA, KUBERNETES_CLIENT_CA, KUBERNETES_CLIENT_KEY, KUBERNETES_ENDPOINT), then we decode that into files, create the configuration using kubectl and set it as active and then we apply the deployment with the newly rendered hash.\u003c/p\u003e\n\n\u003cp\u003eThis is how it should look in travis:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-environment-variables.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s take a look at the generated kubernetes configuration and what values you should take into account:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/ebd9e3c82d4aa0f1e43be53078a9b593.js\"\u003e\u003c/script\u003e\n\nNever do that, don\u0026rsquo;t share your configuration or anybody will be able to use your cluster, also be careful not to commit it to your repo, in this example it\u0026rsquo;s no longer valid because after running the examples I destroyed the cluster with \u003ccode\u003eterraform destroy\u003c/code\u003e. Now there are four values of interest for us: certificate-authority-data: KUBERNETES_CA, client-certificate-data: KUBERNETES_CLIENT_CA, client-key-data: KUBERNETES_CLIENT_KEY and server: KUBERNETES_ENDPOINT, with these variables we can re-create our kubernetes configuration easily using kubectl, be aware that we\u0026rsquo;re not decoding to save it in travis, we do that in the travis configuration file (\u003ccode\u003e.travis.yml\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch5 id=\"kubernetes\"\u003e\u003cstrong\u003eKubernetes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSo after all that, we still need to have a deployment template to deploy our application, and it\u0026rsquo;s a template because we need to replace the SHA of the current build in the manifest before committing it to the Kubernetes API, so let\u0026rsquo;s check it \u003ccode\u003emanifest.yml.template\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/aa1d9181112582ef94b5602480f95bf9.js\"\u003e\u003c/script\u003e\n\nHere we expose our service in the port 30000 as a NodePort, and deploy the current SHA (replaced during execution by travis)\u003c/p\u003e\n\n\u003ch5 id=\"testing-everything\"\u003e\u003cstrong\u003eTesting everything\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eValidate that the deployment went well by checking our kubernetes cluster:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/fa4e77e771c564bc14185afba4903a8c.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eFirst we test the load balancer, and as we will see the ip is not right, it\u0026rsquo;s the internal ip of the load balancer and not our public ip address.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/4d9b99cd269d2eb346f60c308af054da.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eBut if we hit our service directly we can see the correct IP address, this could be improved but it\u0026rsquo;s left as an exercise for the avid reader ◕_◕.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/cc2618efbf28bdb8c2a83d344a6dcff7.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eFinally let\u0026rsquo;s check what we should see in travis:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-travis-result-1.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAs we can see everything went well and our deployment applied successfully in our cluster\n\u003cfigure\u003e\n    \u003cimg src=\"/img/terraform-do-travis-result-2.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eI will be posting some articles about CI and CD and good practices that DevOps/SREs should have in mind, tips, tricks, and full deployment examples, this is the second part of a possible series of three articles (Next one should be about the same but using Jenkins) with a complete but basic example of CI first and then CD. This can of course change and any feedback would be greatly appreciated :).\u003c/p\u003e\n\n\u003cp\u003eIn this example many things could be improved, for example we use a node port and there is no firewall so we can hit our app directly via nodeport or using the load balancer, we should add some firewall rules so only the load balancer is able to talk to the node port range (30000-32767).\u003c/p\u003e\n\n\u003cp\u003eAlso be aware that for production this setup will not be sufficient but for a development environment would suffice initially.\u003c/p\u003e\n\n\u003cp\u003eSome useful links for \u003ca href=\"https://docs.travis-ci.com/user/job-lifecycle/\"\u003etravis\u003c/a\u003e and \u003ca href=\"https://www.terraform.io/docs/providers/do/r/kubernetes_cluster.html\"\u003eterraform\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/",
      "url": "https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/",
      "title": "Go continuous integration with Travis CI and Docker",
      "date_published": "2019-05-01T00:00:00Z",
      "tags": ["travis-ci","docker","golang","linux","continuous-integration"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn this article we will see how to create a simple continuous integration process using \u003ca href=\"https://github.com\"\u003eGithub\u003c/a\u003e, \u003ca href=\"https://travis-ci.org\"\u003eTravis-CI\u003c/a\u003e and \u003ca href=\"https://cloud.docker.com\"\u003eDocker HUB\u003c/a\u003e, the files used here can be found \u003ca href=\"https://github.com/kainlite/whatismyip-go\"\u003eHERE\u003c/a\u003e, in the next article we will continue with what we have here to provide continuous deployment possibly using Jenkins or maybe Travis, let me know which one you would prefer to see.\u003c/p\u003e\n\n\u003ch5 id=\"first-thing-first\"\u003e\u003cstrong\u003eFirst thing first\u003c/strong\u003e\u003c/h5\u003e\n\n\u003ch5 id=\"app\"\u003eApp\u003c/h5\u003e\n\n\u003cp\u003eWe will review the docker file, the app code and the travis-ci file, so let\u0026rsquo;s start with the app \u003ccode\u003emain.go\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/f7e0c3e40b02cc31a78f4eef491fa834.js\"\u003e\u003c/script\u003e\n\nLet\u0026rsquo;s quickly check what this code does, first we check for the port to use, then convert it to a number, register the handler for our HTTP function and listen for requests, this code should print our ip address as you would expect by the name.\u003c/p\u003e\n\n\u003cp\u003eThen the \u003ccode\u003emain_test.go\u003c/code\u003e code:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/13391af166c77ffb10b940e5a9a1ac4d.js\"\u003e\u003c/script\u003e\n\nThe test is fairly simple it just checks that the web server works by trying to fetch \u003ccode\u003e/\u003c/code\u003e and checking for an empty body and \u003ccode\u003e200\u003c/code\u003e status code.\u003c/p\u003e\n\n\u003ch5 id=\"docker\"\u003eDocker\u003c/h5\u003e\n\n\u003cp\u003eNext the \u003ccode\u003eDockerfile\u003c/code\u003e:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/5db561f6f8808f1b5eaf091887416311.js\"\u003e\u003c/script\u003e\n\nWe set the working directory to please go, then fetch dependencies and install our binary, we also generate a test binary, expose the port that we want to use and set the user as nobody in case someone can exploit our app and jump into our container, then just set the command to execute on \u003ccode\u003edocker run\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"travis\"\u003eTravis\u003c/h5\u003e\n\n\u003cp\u003eAnd last but not least the \u003ccode\u003e.travis.yml\u003c/code\u003e file:\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/55c5fcd1fde0bfc148b8a9ee8a41fc5a.js\"\u003e\u003c/script\u003e\n\nWe let travis know that we will be running some go code and also docker, then build the image, run the tests and then the app as initialization, after that we validate that the app works and lastly login to dockerhub and push the image, the important things to have in mind here is that we use variables for example the repo name, the commit SHA, and the docker username and password in a secure way, since travis-ci hides the values that we tell them to.\u003c/p\u003e\n\n\u003ch5 id=\"putting-everything-together\"\u003e\u003cstrong\u003ePutting everything together\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSo far we got the \u003ca href=\"https://github.com/kainlite/whatismyip-go\"\u003erepo\u003c/a\u003e going, the configuration for travis, the dockerfile, the app, but now we need to make use of it, so you will need to create a travis account for this to work then link your github account to it, then you will be able to sync your repositories and you should see something like this:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-travis-list.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nOnce you have your account linked you will be able to sync and enable repositories to be built.\u003c/p\u003e\n\n\u003cp\u003eAfter enabling the repository you can configure some details like environment variables, here we will set the credentials for dockerhub.\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-travis-settings.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAnd now we will create the repository in dockerhub:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-docker-repo.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nAfter the repository is created we can trigger a build from travis or push a commit to the repo in order to trigger a build and to validate that everything works.\u003c/p\u003e\n\n\u003cp\u003eYou should see something like this in travis if everything went well:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-travis-log-1.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nYou can validate that everything went well by checking the commit SHA that triggered the build.\u003c/p\u003e\n\n\u003cp\u003eAnd dockerhub:\n\u003cfigure\u003e\n    \u003cimg src=\"/img/whatismyip-go-travis-log-2.png\" width=\"100%\"/\u003e \n\u003c/figure\u003e\n\nThe same SHA will be used to tag the image.\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eI will be posting some articles about CI and CD and good practices that DevOps/SREs should have in mind, tips, tricks, and full deployment examples, this is the first part of a possible series of two or three articles with a complete but basic example of CI first and then CD. This can of course change and any feedback would be greatly appreciated :).\u003c/p\u003e\n\n\u003cp\u003eSome useful links for travis and \u003ca href=\"https://docs.travis-ci.com/user/docker/\"\u003edocker\u003c/a\u003e and the \u003ca href=\"https://docs.travis-ci.com/user/environment-variables/\"\u003eenvironment variables list\u003c/a\u003e that can be used.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/",
      "url": "https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/",
      "title": "Actually using Vault on Kubernetes",
      "date_published": "2019-04-29T00:00:00Z",
      "tags": ["kubernetes","vault","linux","security"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn the previous article we configured Vault with Consul on our cluster, now it\u0026rsquo;s time to go ahead and use it to provision secrets to our pods/applications. If you don\u0026rsquo;t remember about it or don\u0026rsquo;t have your Vault already configured you can go to \u003ca href=\"https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/\"\u003eGetting started with HashiCorp Vault on Kubernetes\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn this article we will actually create an example using mutual TLS and provision some secrets to our app, You can find the files used here in \u003ca href=\"https://github.com/kainlite/vault-kubernetes\"\u003ethis repo\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"creating-a-cert-for-our-new-client\"\u003e\u003cstrong\u003eCreating a cert for our new client\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs we see here we need to enable kv version 1 on \u003ccode\u003e/secret\u003c/code\u003e for this to work, then we just create a secret and store it as a kubernetes secret for myapp, note that the CA was created in the previous article and we rely on these certificates so we can keep building on that.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/2989cf05404896f7b65ac400068ac903.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"service-account-for-kubernetes\"\u003e\u003cstrong\u003eService account for kubernetes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIn Kubernetes, a service account provides an identity for processes that run in a Pod so that the processes can contact the API server.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/8440fe3654d36fb2055c7ceb894f167e.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"vault-policy\"\u003e\u003cstrong\u003eVault policy\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThen we need to set a read-only policy for our secrets, we don\u0026rsquo;t want or app to be able to write or rewrite secrets.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/aef3234eb43aa37f7cce5f20ecf7c757.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"kubernetes-configuration\"\u003e\u003cstrong\u003eKubernetes configuration\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSet the environment variables to point to the running Minikube environment and enable the \u003ca href=\"https://www.vaultproject.io/docs/auth/kubernetes.html#configuration\"\u003ekubernetes authentication method\u003c/a\u003e and then validate it from a temporal Pod.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/a47d22781b177c483bfe706cc436f049.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"the-deployment-and-the-consul-template-configuration\"\u003e\u003cstrong\u003eThe deployment and the consul-template configuration\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eIf you check the volume mounts and the secrets we load the certificates we created initially and use them to fetch the secret from vault\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/0cc0e90b668c2fef4d2442e1b9eed03f.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThis is where the magic happens so we\u0026rsquo;re able to fetch secrets (thanks to that role and the token that then will be stored there)\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/f977a689000a20c5163ce72cea0039f5.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAnd last but not least we create a file based in the template provided which our nginx container will render on the screen later, this is done using Consul Template.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/3dd851d97eba8222dd978a2e7ed067a9.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"test-it\"\u003e\u003cstrong\u003eTest it!\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe last step would be to test all that, so after having deployed the files to kubernetes we should see something like this\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/269dd3f96ef2b5505a50513eef9ff94c.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis post was heavily inspired by \u003ca href=\"https://learn.hashicorp.com/vault/identity-access-management/vault-agent-k8s\"\u003ethis doc page\u003c/a\u003e, the main difference is that we have mutual TLS on, the only thing left would be to auto unseal our Vault, but we will left that for a future article or as an exercise for the reader.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/",
      "url": "https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/",
      "title": "Getting started with HashiCorp Vault on Kubernetes",
      "date_published": "2019-04-28T00:00:00Z",
      "tags": ["kubernetes","vault","linux","security"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eVault secures, stores, and tightly controls access to tokens, passwords, certificates, API keys, and other secrets in modern computing. What this means is that you can safely store all your App secrets in Vault without having to worry anymore how to store, provide, and use those secrets, we will see how to install it on a running kubernetes cluster and save and read a secret by our application, in this page we will be using Vault version 1.1.1, we will be using dynamic secrets, that means that each pod will have a different secret and that secret will expire once the pod is killed.\u003c/p\u003e\n\n\u003cp\u003eBefore you start you will need \u003ca href=\"https://www.consul.io/docs/install/index.html\"\u003eConsul\u003c/a\u003e, \u003ca href=\"https://www.vaultproject.io/docs/install/\"\u003eVault\u003c/a\u003e client binaries and \u003ca href=\"https://kubernetes.io/docs/tasks/tools/install-minikube/\"\u003eMinikube\u003c/a\u003e or any running cluster, you can find the files used here in \u003ca href=\"https://github.com/kainlite/vault-consul-tls\"\u003ethis repo\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis is the part one of \u003ca href=\"https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/\"\u003etwo\u003c/a\u003e\u003c/p\u003e\n\n\u003ch5 id=\"preparing-the-cluster\"\u003e\u003cstrong\u003ePreparing the cluster\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eLet\u0026rsquo;s start minikube and validate that we can reach our cluster with \u003ccode\u003eminikube start\u003c/code\u003e and then with \u003ccode\u003ekubectl get nodes\u003c/code\u003e, also the dashboard can become handy you can invoke it like this \u003ccode\u003eminikube dashboard\u003c/code\u003e\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/750ee3b20d03fe3e999844c1c80fcf3f.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"creating-certificates-for-consul-and-vault\"\u003e\u003cstrong\u003eCreating certificates for Consul and Vault\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eVault needs a backend to store data, this backend can be consul, etcd, postgres, and \u003ca href=\"https://www.vaultproject.io/docs/configuration/storage/index.html\"\u003emany more\u003c/a\u003e, so the first thing that we are going to do is create a certificate so consul and vault can speak to each other securely.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/f46c829de562750d0fb21ec25f8fa91b.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"consul\"\u003e\u003cstrong\u003eConsul\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe next steps would be to create an encryption key for the consul cluster and to create all the kubernetes resources associated with it\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/4f787ef0e5152eb14928a73b3e2b9d91.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"vault\"\u003e\u003cstrong\u003eVault\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eOnce we have Consul running starting vault should be straight forward, we need to create all kubernetes resources associated with it and then initialize and unseal the vault.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/dbe6cb3055b5c202bb3f65b7178e2f7c.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see it takes a while to configure a Vault server but I really like the pattern that renders for the apps using it, in the next post we will see how to unlock it automatically with kubernetes and also how to mount the secrets automatically to our pods so our applications can use it :), this post was heavily inspired by \u003ca href=\"https://testdriven.io/blog/running-vault-and-consul-on-kubernetes/\"\u003ethis one\u003c/a\u003e and \u003ca href=\"https://learn.hashicorp.com/consul/advanced/day-1-operations/certificates#configuring-agents\"\u003ethis one\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/creating_a_lambda_function_with_terraform/",
      "url": "https://techsquad.rocks/blog/creating_a_lambda_function_with_terraform/",
      "title": "Creating a lambda function with terraform",
      "date_published": "2019-04-27T00:00:00Z",
      "tags": ["development","serverless","aws","terraform"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eHere we will see how to use terraform to manage lambda functions, it will be a simple hello world in node.js, available as a \u003ca href=\"https://gist.github.com/smithclay/e026b10980214cbe95600b82f67b4958\"\u003egist here\u003c/a\u003e, note that I did not create this example but it\u0026rsquo;s really close to the official documentation but shorter, you can see another example with \u003ca href=\"https://github.com/terraform-providers/terraform-provider-aws/tree/master/examples/lambda\"\u003epython here\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eBefore you start make sure you already have your account configured for \u003ca href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\"\u003eawscli\u003c/a\u003e and \u003ca href=\"https://learn.hashicorp.com/terraform/getting-started/install.html\"\u003eterraform\u003c/a\u003e installed.\u003c/p\u003e\n\n\u003ch5 id=\"configuration-files\"\u003e\u003cstrong\u003eConfiguration files\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eFirst of all we need to get our terraform file or files (in a normal case scenario, but since this is a hello world it is easier to have everything in the same file), I have added some comments of what each part does as you can see.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/67b5e84684ae6cca6c0f0847352df55f.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"the-code-itself\"\u003e\u003cstrong\u003eThe code itself\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThen we need the code that we need or want to run there.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/e52a9a9e63f7de88f11090add8668dd1.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"initialize-terraform\"\u003e\u003cstrong\u003eInitialize terraform\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eFirst of all we will need to initialize terraform like in the gist below, this will download the necessary plugins that we used in the code, otherwise it won\u0026rsquo;t be able to run.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/cca6fe034015ee2ce205baf6b68750c3.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"apply-the-changes\"\u003e\u003cstrong\u003eApply the changes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThe next step would be to apply the changes, you can also plan to an outfile and then apply from that file, but also apply works, this command will take care of doing everything that we defined, it will archive the code, the IAM role and the function itself.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/128f522071e66f2a33799241a79ebd1a.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"running-the-function\"\u003e\u003cstrong\u003eRunning the function\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThen the last step would be to run our function to see if it actually works, in this case we\u0026rsquo;re using the awscli but you can use the AWS console as well, the result will be the same.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/ea98dcf28b0fe1df31c662e5051bb5b5.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"clean-up\"\u003e\u003cstrong\u003eClean up\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eRemember to clean up before leaving.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/83be5bcc8e237cc30d7aee17667a5171.js\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003cp\u003eI don\u0026rsquo;t know about you, but I\u0026rsquo;m going to keep using the \u003ca href=\"https://serverless.com/\"\u003eserverless framework\u003c/a\u003e for now, but it\u0026rsquo;s good to see that we have alternatives and with some effort can give us the same functionality.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/ssh_socks_proxy/",
      "url": "https://techsquad.rocks/blog/ssh_socks_proxy/",
      "title": "SSH Socks Proxy",
      "date_published": "2019-03-10T00:00:00Z",
      "tags": ["openssh","tips-and-tricks","linux"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Socks proxy and what it means, we also will explore \u003ca href=\"https://techsquad.rocks/blog/ssh_remote_port_forward/\"\u003eSSH Remote Port Forward\u003c/a\u003e and \u003ca href=\"https://techsquad.rocks/blog/ssh_local_port_forward/\"\u003eSSH Local Port Forward\u003c/a\u003e and how to use that functionality.\u003c/p\u003e\n\n\u003ch5 id=\"explanation\"\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSOCKS is an Internet protocol that exchanges network packets between a client and server through a proxy server (Extracted from Wikipedia). So basically it allows our remote server to become a VPNey likey thingy using SSH, so let\u0026rsquo;s see the different options of how and when to use it. But we will need to tell the application to use that SOCKS proxy, for example our browser or curl.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe command\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh -D \u003cspan style=\"color:#ae81ff\"\u003e9999\u003c/span\u003e -Nn ec2-user@54.210.37.203\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003eFor example I started a EC2 instance for this example and this is the output from curl:\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ curl --socks4 localhost:9999 icanhazip.com\n\u003cspan style=\"color:#75715e\"\u003e# OUTPUT:\u003c/span\u003e\n\u003cspan style=\"color:#75715e\"\u003e# 54.210.37.203\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch5 id=\"the-parameters-and-their-meaning\"\u003e\u003cstrong\u003eThe parameters and their meaning\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eI extracted a portion of the meaning of parameter from the man page, but in a nutshell it means dynamic port forward without a shell.\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e-N Do not execute a remote command. This is useful for just forwarding ports.\n-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.\n-D Specifies a local “dynamic” application-level port forwarding.  This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see this option can be really handy to have a temporary VPN or proxy, also if you want to make this automatic and not so temporary you can check autossh or any real VPN solution like OpenVPN. You can use this kind of proxy in any App that supports SOCKS, most browsers do for example.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/ssh_remote_port_forward/",
      "url": "https://techsquad.rocks/blog/ssh_remote_port_forward/",
      "title": "SSH Remote Port Forward",
      "date_published": "2019-03-09T00:00:00Z",
      "tags": ["openssh","tips-and-tricks","linux"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Remote port forward and what it means, we also will explore \u003ca href=\"https://techsquad.rocks/blog/ssh_local_port_forward/\"\u003eSSH Local Port Forward\u003c/a\u003e and \u003ca href=\"https://techsquad.rocks/blog/ssh_socks_proxy/\"\u003eSSH Socks Proxy\u003c/a\u003e and how to use that functionality.\u003c/p\u003e\n\n\u003ch5 id=\"explanation\"\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eRemote port forward basically let\u0026rsquo;s you forward one port from your machine to a remote machine, for example you want to connect to a local service from a remote server but just temporarily, let\u0026rsquo;s say you want to connect to a mysql instance on the default port (3306).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe command\u003c/strong\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh -Nn -R \u003cspan style=\"color:#ae81ff\"\u003e3306\u003c/span\u003e:localhost:3306 user@example.com\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe parameters and their meaning\u003c/strong\u003e\nI extracted a portion of the meaning of parameter from the man page, but in a nutshell it means remote port forward without a shell.\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e-N Do not execute a remote command. This is useful for just forwarding ports.\n-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.\n-R Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\n\u003ch5 id=\"server-configuration\"\u003e\u003cstrong\u003eServer configuration\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThere are two configuration parameters that can change the behaviour of remote and local forwarded ports, those parameters are \u003ccode\u003eGatewayPorts\u003c/code\u003e and \u003ccode\u003eAllowTcpForwarding\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"gatewayports\"\u003e\u003cstrong\u003eGatewayPorts\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eBy default this option is \u003ccode\u003eno\u003c/code\u003e which means that only the remote computer will be able to connect to the forwarded port, you can set it to \u003ccode\u003eyes\u003c/code\u003e or \u003ccode\u003eclientspecified\u003c/code\u003e to allow other machines use that remote port-forward (handy and dangerous).\u003c/p\u003e\n\n\u003ch5 id=\"allowtcpforwarding\"\u003e\u003cstrong\u003eAllowTcpForwarding\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eBy default this option is set to \u003ccode\u003eyes\u003c/code\u003e, you can restrict remote and local port forwarding by setting it to \u003ccode\u003eno\u003c/code\u003e or allow only local by setting it to \u003ccode\u003elocal\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eAs you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don\u0026rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }, 
    {
      "id": "https://techsquad.rocks/blog/ssh_local_port_forward/",
      "url": "https://techsquad.rocks/blog/ssh_local_port_forward/",
      "title": "SSH Local Port Forward",
      "date_published": "2019-03-08T00:00:00Z",
      "tags": ["openssh","tips-and-tricks","linux"],
      "content_html": "\n\n\u003ch5 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eSSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Local port forward and what it means, we also will explore \u003ca href=\"https://techsquad.rocks/blog/ssh_remote_port_forward/\"\u003eSSH Remote Port Forward\u003c/a\u003e and \u003ca href=\"https://techsquad.rocks/blog/ssh_socks_proxy/\"\u003eSSH Socks Proxy\u003c/a\u003e and how to use that functionality.\u003c/p\u003e\n\n\u003ch5 id=\"explanation\"\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eLocal port forward basically let\u0026rsquo;s you forward one port from a remote machine to your local machine, for example you want to connect to a remote service from machine but just temporarily or there is a firewall that won\u0026rsquo;t let you do it, let\u0026rsquo;s say you want to connect to a mysql instance on the default port (3306).\u003c/p\u003e\n\n\u003ch5 id=\"the-command\"\u003e\u003cstrong\u003eThe command\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet1.sh\"\u003e\u003c/script\u003e\n\n\n\u003cp\u003eHere we are forwarding localhost:3306 in the remote machine to localhost:3306, but you can specify another address in the network for example 172.16.16.200 and the command would look like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet2.sh\"\u003e\u003c/script\u003e\n\nThis will give you access to the ip 172.16.16.200 and port 3306 in the remote network.\u003c/p\u003e\n\n\u003ch5 id=\"the-parameters-and-their-meaning\"\u003e\u003cstrong\u003eThe parameters and their meaning\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eI extracted a portion of the meaning of parameter from the man page, but in a nutshell it means local port forward without a shell.\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet3.txt\"\u003e\u003c/script\u003e\n\u003c/p\u003e\n\n\u003ch5 id=\"server-configuration\"\u003e\u003cstrong\u003eServer configuration\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eThere is a configuration parameter that can change the behaviour of remote and local forwarded ports, that parameter is \u003ccode\u003eAllowTcpForwarding\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"allowtcpforwarding\"\u003e\u003cstrong\u003eAllowTcpForwarding\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eBy default this option is set to \u003ccode\u003eyes\u003c/code\u003e, you can restrict remote and local port forwarding by setting it to \u003ccode\u003eno\u003c/code\u003e or allow only local by setting it to \u003ccode\u003elocal\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5 id=\"closing-notes\"\u003e\u003cstrong\u003eClosing notes\u003c/strong\u003e\u003c/h5\u003e\n\n\u003cp\u003eAs you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don\u0026rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.\u003c/p\u003e\n\n\u003ch3 id=\"errata\"\u003eErrata\u003c/h3\u003e\n\n\u003cp\u003eIf you spot any error or have any suggestion, please send me a message so it gets fixed.\u003c/p\u003e\n\n\u003cp\u003eAlso, you can check the source code and changes in the \u003ca href=\"https://github.com/kainlite/kainlite.github.io\"\u003egenerated code\u003c/a\u003e and the \u003ca href=\"https://github.com/kainlite/blog\"\u003esources here\u003c/a\u003e\u003c/p\u003e\n"
    }
  ]
}
