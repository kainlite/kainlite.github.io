<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</title>
    <link>https://techsquad.rocks/tags/aws/</link>
    <description>Recent content in aws on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 02 Sep 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://techsquad.rocks/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serverless authentication with Cognito and Go</title>
      <link>https://techsquad.rocks/blog/serverless_authentication_with_cognito_and_golang/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/serverless_authentication_with_cognito_and_golang/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>golang</tag>
      
        <tag>serverless</tag>
      
        <tag>aws</tag>
      
        <tag>security</tag>
      
        <tag>cognito</tag>
      
        <tag>lambda</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will see how to use Terraform and Go to create a serverless API using API Gateway, Lambda, and Go, and we will also handle authentication with AWS Cognito, the repo with the files can be found &lt;a href=&#34;https://github.com/kainlite/serverless-cognito&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;terraform&#34;&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this example I used terraform 0.12, and I kind of liked the new changes, it feels more like coding and a more natural way to describe things, however I think there are more bugs than usual in this version, but I really like the new output for the plan, apply, etc, getting back to the article since there is a lot of code I will gradually update the post with more notes and content or maybe another post explaining another section, but the initial version will only show the cognito part and the code to make it work and how to test it.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/1e466c6ac28f9cfcf1513c105325e100.js&#34;&gt;&lt;/script&gt;

As we can see it&amp;rsquo;s really simple to have a cognito user pool working, the most important part here is the &lt;code&gt;auto_verified_attributes&lt;/code&gt; because that is what makes cognito to actually send an email or an sms with the confirmation code, the rest is self-describing, it creates a pool and a client, since what we need to be able to interact with out pool is the client that part is of considerable importance even that we have most things with default values.&lt;/p&gt;

&lt;h5 id=&#34;go&#34;&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The good thing is that everything is code, but we don&amp;rsquo;t have to manage any server, we just consume services from AWS completely from code, isn&amp;rsquo;t that amazing?, I apologize for the length of the file, but you will notice that it&amp;rsquo;s very repetitive, in most functions we load the AWS configuration, we make a request and return a response, we&amp;rsquo;re also using Gin as a router, which is pretty straight-forward and easy to use, we have only one authenticated path (&lt;code&gt;/user/profile&lt;/code&gt;), and we also have another unauthenticated path which is a health check (&lt;code&gt;/app/health&lt;/code&gt;), the other two paths (&lt;code&gt;/user&lt;/code&gt; and &lt;code&gt;/user/validate&lt;/code&gt;) are exclusively for the user creation process with cognito.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/755f0c1b2381af46fb2f69f8865cabb9.js&#34;&gt;&lt;/script&gt;

All logs go to Cloudwatch and you can also use X-Ray to diagnose issues.&lt;/p&gt;

&lt;h5 id=&#34;testing-it&#34;&gt;&lt;strong&gt;Testing it&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;So we&amp;rsquo;re going to hit the API to create, validate, and query the empty profile of the user from the terminal using curl.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/71ba07ed304b527793ddd1f95c92d244.js&#34;&gt;&lt;/script&gt;

I have added most info in as comments in the snippet, note that I also used my test domain &lt;code&gt;skynetng.pw&lt;/code&gt; with the subdomain &lt;code&gt;api&lt;/code&gt; for all tests.&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This post was heavily inspired by &lt;a href=&#34;https://a.l3x.in/2018/07/25/lambda-api-custom-domain-tutorial.html&#34;&gt;this post&lt;/a&gt; from Alexander, kudos to him for the great work!, this post expands on that and adds the certificate with ACM, it also handles a basic AWS Cognito configuration and the necessary go code to make it work, there are other ways to accomplish the same, but what I like about this approach is that you can have some endpoints or paths without authentication and you can use authentication, etc on-demand. This article is a bit different but I will try to re-shape it in the following weeks, and also cover more of the content displayed here, let me know if you have any comments or suggestions!&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a lambda function with terraform</title>
      <link>https://techsquad.rocks/blog/creating_a_lambda_function_with_terraform/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/creating_a_lambda_function_with_terraform/</guid>
      <tags>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>aws</tag>
      
        <tag>terraform</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Here we will see how to use terraform to manage lambda functions, it will be a simple hello world in node.js, available as a &lt;a href=&#34;https://gist.github.com/smithclay/e026b10980214cbe95600b82f67b4958&#34;&gt;gist here&lt;/a&gt;, note that I did not create this example but it&amp;rsquo;s really close to the official documentation but shorter, you can see another example with &lt;a href=&#34;https://github.com/terraform-providers/terraform-provider-aws/tree/master/examples/lambda&#34;&gt;python here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before you start make sure you already have your account configured for &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html&#34;&gt;awscli&lt;/a&gt; and &lt;a href=&#34;https://learn.hashicorp.com/terraform/getting-started/install.html&#34;&gt;terraform&lt;/a&gt; installed.&lt;/p&gt;

&lt;h5 id=&#34;configuration-files&#34;&gt;&lt;strong&gt;Configuration files&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;First of all we need to get our terraform file or files (in a normal case scenario, but since this is a hello world it is easier to have everything in the same file), I have added some comments of what each part does as you can see.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/67b5e84684ae6cca6c0f0847352df55f.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;the-code-itself&#34;&gt;&lt;strong&gt;The code itself&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Then we need the code that we need or want to run there.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/e52a9a9e63f7de88f11090add8668dd1.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;initialize-terraform&#34;&gt;&lt;strong&gt;Initialize terraform&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;First of all we will need to initialize terraform like in the gist below, this will download the necessary plugins that we used in the code, otherwise it won&amp;rsquo;t be able to run.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/cca6fe034015ee2ce205baf6b68750c3.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;apply-the-changes&#34;&gt;&lt;strong&gt;Apply the changes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The next step would be to apply the changes, you can also plan to an outfile and then apply from that file, but also apply works, this command will take care of doing everything that we defined, it will archive the code, the IAM role and the function itself.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/128f522071e66f2a33799241a79ebd1a.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;running-the-function&#34;&gt;&lt;strong&gt;Running the function&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Then the last step would be to run our function to see if it actually works, in this case we&amp;rsquo;re using the awscli but you can use the AWS console as well, the result will be the same.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/ea98dcf28b0fe1df31c662e5051bb5b5.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;h5 id=&#34;clean-up&#34;&gt;&lt;strong&gt;Clean up&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Remember to clean up before leaving.
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/kainlite/83be5bcc8e237cc30d7aee17667a5171.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know about you, but I&amp;rsquo;m going to keep using the &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless framework&lt;/a&gt; for now, but it&amp;rsquo;s good to see that we have alternatives and with some effort can give us the same functionality.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serve your static website with S3 and CloudFront</title>
      <link>https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/</guid>
      <tags>
      
        <tag>elm</tag>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>aws</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;serverless-series&#34;&gt;&lt;strong&gt;Serverless series&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Part I: &lt;a href=&#34;https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/&#34;&gt;Serving static websites with s3 and cloudfront&lt;/a&gt;, &lt;strong&gt;You&amp;rsquo;re here&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Part II: &lt;a href=&#34;https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/&#34;&gt;Sending emails with AWS Lambda and SES from a HTML form&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This article will be part of a series, the idea is to get a fully serverless site up and running with login functionality, maybe a profile page, and some random utility, but as we are just starting with it we will host our first draft of the page with a contact form, for the distribution of the files we will see how to configure CloudFront and for storing the files we will be using S3, S3 is an object storage service that offers industry leading scalability, data availability, security and performance, and CloudFront is a fast content delivery network (CDN). The site that we will be using were written using &lt;a href=&#34;https://elm-lang.org/&#34;&gt;elm&lt;/a&gt; and can be &lt;a href=&#34;https://github.com/kainlite/aws-serverless-s3-elm-example&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;s3&#34;&gt;&lt;strong&gt;S3&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;First of all we need to create a bucket&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api create-bucket --bucket techsquad-serverless-site --region us-east-1
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Location&amp;#34;: &amp;#34;/techsquad-serverless-site&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We could serve directly from S3 but that can be expensive in a site with lots of traffic (You can do it by &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/s3/website.html&#34;&gt;enabling web hosting in the bucket&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For this setup to work we first need to create a cloud-front-origin-access-identity&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;aws cloudfront create-cloud-front-origin-access-identity --cloud-front-origin-access-identity-config CallerReference=techsquad-serverless-site-cloudfront-origin,Comment=techsquad-serverless-site-cloudfront-origin
{
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cloudfront.amazonaws.com/2018-11-05/origin-access-identity/cloudfront/E3IJG9M5PO9BYE&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ETag&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E2XHDQQ0DDY9IJ&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CloudFrontOriginAccessIdentity&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E3IJG9M5PO9BYE&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S3CanonicalUserId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c951e48af14afcf935c2455a6d503150c80f20df93b27af9ed0928eb48feb67d1b933aa1adb7e1bf88a7aacccccccccc&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CloudFrontOriginAccessIdentityConfig&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CallerReference&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront-origin&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Comment&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront-origin&amp;#34;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Our origin access identity was successfully created, we need to grab the S3CanonicalUserId for our S3 bucket policy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Limit access to your bucket with the following policy (save as bucket-policy.json)&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;{
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2012-10-17&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PolicyForCloudFrontPrivateContent&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Statement&amp;#34;&lt;/span&gt;:[
        {
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront-origin&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Principal&amp;#34;&lt;/span&gt;:{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CanonicalUser&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c951e48af14afcf935c2455a6d503150c80f20df93b27af9ed0928eb48feb67d1b933aa1adb7e1bf88a7aacccccccccc&amp;#34;&lt;/span&gt;},
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3:GetObject&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Resource&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arn:aws:s3:::techsquad-serverless-site/*&amp;#34;&lt;/span&gt;
             }
      ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This policy will only allow CloudFront to fetch the files from the S3 bucket, because we want to avoid users or anyone actually from hitting the bucket directly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And then just attach that policy to the bucket&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-policy --bucket techsquad-serverless-site --policy file://bucket-policy.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m using an old example I created and probably will continue building upon it, copy the files (the source files are in &lt;a href=&#34;https://github.com/kainlite/aws-serverless-s3-elm-example&#34;&gt;this github repo&lt;/a&gt;)&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3 sync . s3://techsquad-serverless-site/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
So far so good, We have our S3 bucket ready.&lt;/p&gt;

&lt;h5 id=&#34;cloudfront&#34;&gt;&lt;strong&gt;CloudFront&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;We will use this file to create our CF distribution (save it as distconfig.json or generate it with &lt;code&gt;aws cloudfront create-distribution --generate-cli-skeleton &amp;gt; /tmp/distconfig.json&lt;/code&gt; and then replace the values: Id, DomainName, TargetOriginId, and the cname in Aliases.Items):
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CallerReference&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-distribution&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Aliases&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Items&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serverless.techsquad.rocks&amp;#34;&lt;/span&gt;
         &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DefaultRootObject&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Origins&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Items&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DomainName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site.s3.amazonaws.com&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S3OriginConfig&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OriginAccessIdentity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;origin-access-identity/cloudfront/E3IJG9M5PO9BYE&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DefaultCacheBehavior&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TargetOriginId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;techsquad-serverless-site-cloudfront&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ForwardedValues&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QueryString&amp;#34;&lt;/span&gt;: true,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cookies&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Forward&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TrustedSigners&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enabled&amp;#34;&lt;/span&gt;: false,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ViewerProtocolPolicy&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;allow-all&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MinTTL&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CacheBehaviors&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Quantity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Comment&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enabled&amp;#34;&lt;/span&gt;: false,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IncludeCookies&amp;#34;&lt;/span&gt;: true,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bucket&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Prefix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PriceClass&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PriceClass_All&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enabled&amp;#34;&lt;/span&gt;: true
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We will leave most values in their defaults, but if you want to know more or customize your deployment &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html&#34;&gt;check here&lt;/a&gt; or type &lt;code&gt;aws cloudfront create-distribution help&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s finally create the CloudFront distribution for our site&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront create-distribution --distribution-config file://distconfig.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Location&amp;#34;: &amp;#34;https://cloudfront.amazonaws.com/2018-11-05/distribution/E1M22XXNIJ5BLN&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;ETag&amp;#34;: &amp;#34;EW1AZUQ33NKQ7&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Distribution&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Id&amp;#34;: &amp;#34;E1M22XXNIJ5BLN&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;ARN&amp;#34;: &amp;#34;arn:aws:cloudfront::894527626897:distribution/E1M22XXNIJ5BLN&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Status&amp;#34;: &amp;#34;InProgress&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;LastModifiedTime&amp;#34;: &amp;#34;2019-02-02T19:35:45.729Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;InProgressInvalidationBatches&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DomainName&amp;#34;: &amp;#34;d3v3xtkl1l2ynj.cloudfront.net&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;ActiveTrustedSigners&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Enabled&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DistributionConfig&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;CallerReference&amp;#34;: &amp;#34;techsquad-serverless-site-distribution&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Aliases&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;DefaultRootObject&amp;#34;: &amp;#34;index.html&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Origins&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 1,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Items&amp;#34;: [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Id&amp;#34;: &amp;#34;techsquad-serverless-site-cloudfront&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;DomainName&amp;#34;: &amp;#34;techsquad-serverless-site.s3.amazonaws.com&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;OriginPath&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;CustomHeaders&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                             &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;S3OriginConfig&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                             &amp;#34;OriginAccessIdentity&amp;#34;: &amp;#34;origin-access-identity/cloudfront/E3IJG9M5PO9BYE&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 ]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;OriginGroups&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Items&amp;#34;: []&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;DefaultCacheBehavior&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;TargetOriginId&amp;#34;: &amp;#34;techsquad-serverless-site-cloudfront&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;ForwardedValues&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;QueryString&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Cookies&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Forward&amp;#34;: &amp;#34;none&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Headers&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;QueryStringCacheKeys&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;TrustedSigners&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Enabled&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;ViewerProtocolPolicy&amp;#34;: &amp;#34;allow-all&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;MinTTL&amp;#34;: 3600,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;AllowedMethods&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Quantity&amp;#34;: 2,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Items&amp;#34;: [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;HEAD&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;GET&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     ],&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;CachedMethods&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Quantity&amp;#34;: 2,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         &amp;#34;Items&amp;#34;: [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                             &amp;#34;HEAD&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                             &amp;#34;GET&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                         ]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;SmoothStreaming&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;DefaultTTL&amp;#34;: 86400,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;MaxTTL&amp;#34;: 31536000,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Compress&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;LambdaFunctionAssociations&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;FieldLevelEncryptionId&amp;#34;: &amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;CacheBehaviors&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;CustomErrorResponses&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Comment&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Logging&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Enabled&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;IncludeCookies&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Bucket&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;Prefix&amp;#34;: &amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;PriceClass&amp;#34;: &amp;#34;PriceClass_All&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Enabled&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;ViewerCertificate&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;CloudFrontDefaultCertificate&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;MinimumProtocolVersion&amp;#34;: &amp;#34;TLSv1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;CertificateSource&amp;#34;: &amp;#34;cloudfront&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;Restrictions&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 &amp;#34;GeoRestriction&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;RestrictionType&amp;#34;: &amp;#34;none&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                     &amp;#34;Quantity&amp;#34;: 0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;WebACLId&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;HttpVersion&amp;#34;: &amp;#34;http2&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             &amp;#34;IsIPV6Enabled&amp;#34;: true&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Woah a lot of details in there, but what we might need later is the ETAG if we want to download and update our distribution, so have that handy, also we can see our CloudFront URL in there which is: d3v3xtkl1l2ynj.cloudfront.net in this case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It might take a few minutes to initialize the distribution, you can check the progress with&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront list-distributions | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.DistributionList.Items[0].Status&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;InProgress&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Once it&amp;rsquo;s ready the status will be: &amp;ldquo;Deployed&amp;rdquo;, and now if we go to the CloudFront url you should see the site :). The S3 bucket will only let CloudFront access to the files so the only way to serve the site is through CloudFront.&lt;/p&gt;

&lt;h5 id=&#34;dns&#34;&gt;&lt;strong&gt;DNS&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;The only thing missing is the record in the DNS (I don&amp;rsquo;t have this domain name in Route53, shame on me but a CNAME will do for now), so let&amp;rsquo;s add it and verify it using dig.&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dig serverless.techsquad.rocks
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# dig CNAME serverless.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.13.5 &amp;lt;&amp;lt;&amp;gt;&amp;gt; CNAME serverless.techsquad.rocks&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; global options: +cmd&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; Got answer:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 52651&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; OPT PSEUDOSECTION:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ; EDNS: version: 0, flags:; udp: 1452&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; QUESTION SECTION:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;serverless.techsquad.rocks.    IN      CNAME&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; ANSWER SECTION:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# serverless.techsquad.rocks. 292 IN      CNAME   d3v3xtkl1l2ynj.cloudfront.net.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; Query time: 20 msec&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; SERVER: 1.1.1.1#53(1.1.1.1)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; WHEN: Sat Feb 02 17:47:11 -03 2019&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ;; MSG SIZE  rcvd: 98&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we can see the record is already there so we can go to &lt;a href=&#34;http://serverless.techsquad.rocks&#34;&gt;http://serverless.techsquad.rocks&lt;/a&gt; (note that this only works because we set that alias in the distribution), We could add SSL by creating a certificate using Amazon Certificate Manager, but we will leave that as an exercise or a future small article.&lt;/p&gt;

&lt;h5 id=&#34;useful-commands&#34;&gt;&lt;strong&gt;Useful commands&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In case you need to get some information some useful commands:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This command will give us the Id of our distribution&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront list-distributions --output table --query &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DistributionList.Items[*].Id&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -------------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |ListDistributions|&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# +-----------------+&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |  EFJVJEPWAPGU2  |&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# +-----------------+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This one the ETag (needed to perform updates for example)&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront get-distribution-config --id EFJVJEPWAPGU2 | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. | .ETag&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;E2TPQRAUPJL2P3&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And this one will save the current config in /tmp so we can update it.&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws cloudfront get-distribution-config --id EFJVJEPWAPGU2 | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. | .DistributionConfig&amp;#39;&lt;/span&gt; &amp;gt; /tmp/curent-distribution-E2TPQRAUPJL2P&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;upcoming-articles&#34;&gt;&lt;strong&gt;Upcoming articles&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This article is the first one in this series of serverless articles, the idea is to build a fully functional website using only serverless technologies, the next post will cover the AWS Lambda function used to send the contact form, also all code from the site can be &lt;a href=&#34;https://github.com/kainlite/aws-serverless-s3-elm-example&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainjkjkjklite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create a serverless twitter bot</title>
      <link>https://techsquad.rocks/blog/creating_a_serverless_twitter_bot/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/creating_a_serverless_twitter_bot/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>aws</tag>
      
        <tag>serverless</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This article explains how to create a serverless tweet-bot, basically pulls articles from this blog and post them to twitter in a nice way. It uses cron as the trigger so it should post a tweet every 12 hours, or you can invoke it manually.&lt;/p&gt;

&lt;h3 id=&#34;twitter&#34;&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;So before you can start with the Twitter API you need to get a developer account in &lt;a href=&#34;https://developer.twitter.com/en/apply/user&#34;&gt;this url&lt;/a&gt;, after submitted and created, you then need to create an App and generate the keys and tokens to be able to use it, it might take a while, I recommend you read everything that Twitter wants you to read while creating both the dev account and the app, so you can understand the scope and the good practices of using their services.&lt;/p&gt;

&lt;h3 id=&#34;the-code&#34;&gt;&lt;strong&gt;The code&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I added several comments over the code so it&amp;rsquo;s easy to understand what everything is supposed to do, also it can be found &lt;a href=&#34;https://github.com/kainlite/tbo&#34;&gt;here&lt;/a&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/dghubble/go-twitter/twitter&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/dghubble/oauth1&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/joho/godotenv&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/sirupsen/logrus&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#75715e&#34;&gt;// Version
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Environment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Page JSON object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Page&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;version&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Title&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;title&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;BaseURL&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;home_page_url&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;FeedURL&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;feed_url&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Articles&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;items&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Article JSON object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ID&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;id&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;url&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Title&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;title&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Content&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;content_html&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Published&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;date_published&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Twitter Access
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Token&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;twitter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;tweetFormat&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;screenName&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// This functions grabs all the necessary bits to connect to the Twitter API.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Setup&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setting up twitter client&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessKey&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessSecret&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerKey&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerSecret&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Get the access keys from ENV
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessKey&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_ACCESS_KEY&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessSecret&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_ACCESS_SECRET&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerKey&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_CONSUMER_KEY&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerSecret&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_CONSUMER_SECRET&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterScreenName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TWITTER_SCREEN_NAME&amp;#34;&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterScreenName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter screen name cannot be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter consumer key can not be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerSecret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter consumer secret can not be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter access key can not be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessSecret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter access secret can not be null&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setting up oAuth for twitter&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// Setup the new oauth client
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewConfig&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerKey&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterConsumerSecret&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewToken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessKey&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterAccessSecret&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;oauth1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NoContext&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Twitter client
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;twitter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewClient&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Set the screen name for later use
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;screenName&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;twitterScreenName&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// This is the format of the tweet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;tweetFormat&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s: %s - TBO&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Twitter client setup complete&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Format tweets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;tweetFormat&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Title&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Send the tweet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sending tweet&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Infof&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Non production mode, would&amp;#39;ve tweeted: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;))
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Infof&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sending tweet: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;))
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Statuses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error sending tweet to twitter: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		}
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Get a random article from the feed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This functions checks that the same tweet is not present
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in the last 30 tweets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;PickArticle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checking to see if the tweet appeared in the last 30 tweets&amp;#34;&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;tweets&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Timelines&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UserTimeline&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;twitter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UserTimelineParams&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ScreenName&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;screenName&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Count&lt;/span&gt;:      &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;TweetMode&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;extended&amp;#34;&lt;/span&gt;,
	})

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error getting last 30 tweets from user: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tweet&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tweets&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Contains&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tweet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTweetString&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;)) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Twitter API constant
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tw&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Twitter&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// This function is rather large, but basically grabs the a big json from
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the jsonfeed url and tests several tweets until it finds one that it&amp;#39;s valid
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// a tweet could be invalid if for example it was already tweeted in the last 30 tweets
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetArticle&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://techsquad.rocks/index.json&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Setup a new HTTP Client with 3 seconds timeout
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Create a new HTTP Request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRequest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodGet&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// An error has occurred that we can&amp;#39;t recover from, bail.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error occurred creating new request: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Set the user agent to tbo &amp;lt;version&amp;gt; - twitter.com/kainlite
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User-Agent&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TBO %s - twitter.com/kainlite&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;))

	&lt;span style=&#34;color:#75715e&#34;&gt;// Tell the remote server to send us JSON
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accept&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// We&amp;#39;re only going to try maxTries times, otherwise we&amp;#39;ll fatal out.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Execute the request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attempting request to %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;getErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;httpClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Do&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// We got an error, lets bail out, we can&amp;#39;t do anything more
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error occurred retrieving article from API: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;getErr&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// BGet the body from the result
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;readErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ioutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadAll&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readErr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// This shouldn&amp;#39;t happen, but if it does, error out.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error occurred reading from result body: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;readErr&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Parse json into the struct Page
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Page&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// Invalid JSON was received, bail out
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error occurred decoding article: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;invalidArticle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;maxTries&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Attempt to get a valid article for the next tweet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invalidArticle&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Seed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;UnixNano&lt;/span&gt;())
		&lt;span style=&#34;color:#a6e22e&#34;&gt;randomInt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intn&lt;/span&gt;(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Articles&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Articles&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;randomInt&lt;/span&gt;]

		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;randomInt&lt;/span&gt;)
		&lt;span style=&#34;color:#75715e&#34;&gt;// check to make sure the tweet hasn&amp;#39;t been sent before
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PickArticle&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// If we get here we&amp;#39;ve found a tweet, exit the loop
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;invalidArticle&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxTries&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exiting after attempts to retrieve article failed.&amp;#34;&lt;/span&gt;)

		}
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Return the valid article response
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// HandleRequest - Handle the incoming Lambda request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HandleRequest&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Started handling request&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;tw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Setup&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetArticle&lt;/span&gt;()

	&lt;span style=&#34;color:#75715e&#34;&gt;// Send tweet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;tw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;article&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Set the local environment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setRunningEnvironment&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Get the environment variable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;APP_ENV&amp;#34;&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;development&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;development&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;development&amp;#34;&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shutdown&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Info&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Shutdown request registered&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Set the environment
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;setRunningEnvironment&lt;/span&gt;()

	&lt;span style=&#34;color:#75715e&#34;&gt;// Set logging configuration
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetFormatter&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TextFormatter&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;DisableColors&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;FullTimestamp&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
	})

	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetReportCaller&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;development&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetLevel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DebugLevel&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetLevel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrorLevel&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SetLevel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;InfoLevel&lt;/span&gt;)
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Start the bot
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting main&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TBO %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Env&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleRequest&lt;/span&gt;)
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// this environment variables are used locally while debugging, it can be quite handy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;godotenv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error loading .env file&amp;#34;&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleRequest&lt;/span&gt;()
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The code is fairly straigth forward, it checks for the environment to have a locally runable/debuggable app if it&amp;rsquo;s development or if it&amp;rsquo;s running as an AWS Function in production.&lt;/p&gt;

&lt;h3 id=&#34;while-debugging-locally-it-can-be-ran-like-this&#34;&gt;&lt;strong&gt;While debugging locally it can be ran like this&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;You can save use an .env file to test debug how your tweets are going to look.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go run .
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Starting main&amp;#34; func=main.main file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:279&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=info msg=&amp;#34;TBO development&amp;#34; func=main.main file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:280&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Started handling request&amp;#34; func=main.HandleRequest file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:225&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Setting up twitter client&amp;#34; func=&amp;#34;main.(*Twitter).Setup&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:55&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Setting up oAuth for twitter&amp;#34; func=&amp;#34;main.(*Twitter).Setup&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:88&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Twitter client setup complete&amp;#34; func=&amp;#34;main.(*Twitter).Setup&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:102&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Attempting request to &amp;amp;{GET https://techsquad.rocks/index.json HTTP/1.1 %!s(int=1) %!s(int=1) map[User-Agent:[TBO development - twitter.com/kainlite] Accept:[application/json]] &amp;lt;nil&amp;gt; %!s(func() (io.ReadCloser, error)=&amp;lt;nil&amp;gt;) %!s(int64=0) [] %!s(bool=false) techsquad.rocks map[] map[] %!s(*multipart.Form=&amp;lt;nil&amp;gt;) map[]   %!s(*tls.ConnectionState=&amp;lt;nil&amp;gt;) %!s(&amp;lt;-chan struct {}=&amp;lt;nil&amp;gt;) %!s(*http.Response=&amp;lt;nil&amp;gt;) &amp;lt;nil&amp;gt;}&amp;#34; func=main.GetArticle file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:173&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 4time=&amp;#34;2019-01-21T22:39:15-03:00&amp;#34; level=debug msg=&amp;#34;Checking to see if the tweet appeared in the last 30 tweets&amp;#34; func=&amp;#34;main.(*Twitter).PickArticle&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:125&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:16-03:00&amp;#34; level=debug msg=&amp;#34;Sending tweet&amp;#34; func=&amp;#34;main.(*Twitter).Send&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:111&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# time=&amp;#34;2019-01-21T22:39:16-03:00&amp;#34; level=info msg=&amp;#34;Non production mode, would&amp;#39;ve tweeted: Getting started with skaffold: https://techsquad.rocks/blog/getting_started_with_skaffold/ - TBO&amp;#34; func=&amp;#34;main.(*Twitter).Send&amp;#34; file=&amp;#34;/home/kainlite/Webs/tbo/tbo/main.go:113&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The output is very verbose but it will show you everything that the function will do.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-project&#34;&gt;&lt;strong&gt;Creating the project&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;But how did you get the project skeleton?
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir tbo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd tbo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; serverless create -t aws-go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
By default it creates two go functions: hello and world, if you look at the files serverless.yaml and the go code, it will be easy to understand how everything is tied together in the default example.&lt;/p&gt;

&lt;h3 id=&#34;serverless-framework&#34;&gt;&lt;strong&gt;Serverless framework&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This function is managed by the &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless framework&lt;/a&gt;, as you can see it&amp;rsquo;s an easy way to manage your functions, what this small block of YAML will do is compile, upload, and schedule our function (because we use an event schedule)
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Welcome to Serverless!&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# This file is the main config file for your service.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# It&amp;#39;s very minimal at this point and uses default values.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# You can always add more config options for more control.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# We&amp;#39;ve included some commented out config examples here.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Just uncomment any of them to get that config option.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# For full config options, check the docs:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    docs.serverless.com&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Happy Coding!&lt;/span&gt;

service: handler

&lt;span style=&#34;color:#75715e&#34;&gt;# You can pin your service to only deploy with a specific Serverless version&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Check out our docs for more details&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# frameworkVersion: &amp;#34;=X.X.X&amp;#34;&lt;/span&gt;
frameworkVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;=1.28.0 &amp;lt;2.0.0&amp;#34;&lt;/span&gt;

provider:
  name: aws
  runtime: go1.x
  region: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;env:AWS_DEFAULT_REGION, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;us-east-1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
  stage: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;env:TBO_BUILD_STAGE, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prod&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
  memorySize: &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;
  versionFunctions: false

package:
 exclude:
   - ./**
 include:
   - ./tbo/tbo

functions:
  tweet:
    handler: tbo/tbo
    events:
      - schedule: cron&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; */12 * * ? *&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    environment:
      APP_ENV: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;production&amp;#34;&lt;/span&gt;
      TWITTER_SCREEN_NAME: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;twitter_username&amp;#34;&lt;/span&gt;
      TWITTER_CONSUMER_KEY: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example_key&amp;#34;&lt;/span&gt;
      TWITTER_CONSUMER_SECRET: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example_secret&amp;#34;&lt;/span&gt;
      TWITTER_ACCESS_KEY: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example_key&amp;#34;&lt;/span&gt;
      TWITTER_ACCESS_SECRET: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example_secret&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We provide the environment variables there that the app needs to run, under the hood what serverless will do is create an s3 bucket for this function with a cloudformation stack and a zip file with your function (for each version or deployment), then it will apply that that stack and validate that everything went ok.&lt;/p&gt;

&lt;h3 id=&#34;deploy-the-function&#34;&gt;&lt;strong&gt;Deploy the function&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Once the code is ready and you are ready to test it in production aka send a real tweet, just deploy it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;serverless deploy
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: WARNING: Missing &amp;#34;tenant&amp;#34; and &amp;#34;app&amp;#34; properties in serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Packaging service...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Excluding development dependencies...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading CloudFormation file to S3...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading artifacts...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading service .zip file to S3 (9.86 MB)...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Validating template...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Updating Stack...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Checking Stack update progress...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ..................&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Stack update finished...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Service Information&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# service: handler&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stage: prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# region: us-east-1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stack: handler-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# api keys:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# endpoints:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# functions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   tweet: handler-prod-tweet&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# layers:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we described before you can see everything that the serverless framework did for us, nothing really hard to remember and everything automated.&lt;/p&gt;

&lt;h3 id=&#34;s3&#34;&gt;&lt;strong&gt;S3&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Example s3 bucket from the previous deployment.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3 ls
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 2019-01-21 22:42:05 handler-prod-serverlessdeploymentbucket-1s5fs5igk2pwc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As we can see after the deployment we see a new bucket with our function and if we take a look at the files we will find several (depending on how many deployments you do) stacks/manifests and the zip file with our function for each version/deployment.&lt;/p&gt;

&lt;h3 id=&#34;invoke-the-function&#34;&gt;&lt;strong&gt;Invoke the function&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Ok, but I don&amp;rsquo;t want to wait 12 hours to see if everything is okay, then just invoke the function.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;serverless invoke -f tweet
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Wait, where did tweet came from?, if you look at the serverless manifest you will see that our function is called tweet. If everything went well you will be able to see that tweet in your profile, something like this:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/twitter-tbo.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Why TBO, what&amp;rsquo;s tbo? bot misspelled.&lt;/li&gt;
&lt;li&gt;The Serverless framework is really cool and works in a variety of environments, I certainly recommend taking a look and at least trying it, I use it for a few small projects and it eases my life a lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From zero to hero with kops and AWS</title>
      <link>https://techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</guid>
      <tags>
      
        <tag>AWS</tag>
      
        <tag>kops</tag>
      
        <tag>kubernetes</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In this article we will create a cluster from scratch with &lt;a href=&#34;https://github.com/kubernetes/kops&#34;&gt;kops&lt;/a&gt; (K8s installation, upgrades and management) in &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;, We will configure &lt;a href=&#34;https://github.com/kubernetes-sigs/aws-alb-ingress-controller&#34;&gt;aws-alb-ingress-controller&lt;/a&gt; (External traffic into our services/pods) and &lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns&#34;&gt;external dns&lt;/a&gt; (Update the records based in the ingress rules) and also learn a bit about awscli in the process.&lt;/p&gt;

&lt;p&gt;Basically we will have a fully functional cluster that will be able to handle public traffic in minutes, first we will install the cluster with kops, then we will enable the ingress controller and lastly external-dns, then we will deploy a basic app to test that everything works fine, SSL/TLS is out of the scope but it&amp;rsquo;s fairly easy to implement if you are using ACM.&lt;/p&gt;

&lt;p&gt;Just in case you don&amp;rsquo;t know this setup is not going to be free, cheap for sure because we will use small instances, etc, but not completely free, so before you dive in, be sure that you can spend a few bucks testing it out.&lt;/p&gt;

&lt;h3 id=&#34;kops&#34;&gt;&lt;strong&gt;Kops&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This is an awesome tool to setup and maintain your clusters, currently only compatible with AWS and GCE, other platforms are planned and some are also supported in alpha, we will be using AWS in this example, it requires kubectl so make sure you have it installed:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -LO https://github.com/kubernetes/kops/releases/download/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Export the credentials that we will be using to create the kops user and policies&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export AWS_ACCESS_KEY_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;XXXX &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; export AWS_SECRET_ACCESS_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;XXXXX&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can do it this way or just use &lt;code&gt;aws configure&lt;/code&gt; and set a profile.&lt;/p&gt;

&lt;p&gt;The next thing that we need are IAM credentials for kops to work, you will need awscli configured and working with your AWS admin-like account most likely before proceeding:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create iam group&lt;/span&gt;
aws iam create-group --group-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Group&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupId&amp;#34;: &amp;#34;AGPAIABI3O4WYM46AIX44&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:group/kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:04:23Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops

&lt;span style=&#34;color:#75715e&#34;&gt;# Attach policies&lt;/span&gt;
aws iam create-user --user-name kops
aws iam add-user-to-group --user-name kops --group-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Group&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;GroupId&amp;#34;: &amp;#34;AGPAIABI3O4WYM46AIX44&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:group/kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:04:23Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Create access key - save the output of this command.&lt;/span&gt;
aws iam create-access-key --user-name kops
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;AccessKey&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UserName&amp;#34;: &amp;#34;kops&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AccessKeyId&amp;#34;: &amp;#34;AKIAJE*********&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Status&amp;#34;: &amp;#34;Active&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;SecretAccessKey&amp;#34;: &amp;#34;zWJhfemER**************************&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T01:05:44Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The last command will output the access key and the secret key for the &lt;em&gt;kops&lt;/em&gt; user, save that information because we will use it from now on, note that we gave kops a lot of power with that user, so be careful with the keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional permissions to be able to create ALBs&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; kops-alb-policy.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Statement&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;ec2:Describe*&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;iam:CreateServiceLinkedRole&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;tag:GetResources&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;elasticloadbalancing:*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

aws iam create-policy --policy-name kops-alb-policy --policy-document file://kops-alb-policy.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Policy&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyName&amp;#34;: &amp;#34;kops-alb-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyId&amp;#34;: &amp;#34;ANPAIRIYZZZTCPJGNZZXS&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:policy/kops-alb-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultVersionId&amp;#34;: &amp;#34;v1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AttachmentCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PermissionsBoundaryUsageCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;IsAttachable&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T03:50:00Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UpdateDate&amp;#34;: &amp;#34;2019-01-18T03:50:00Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; kops-route53-policy.json
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;#34;Statement&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ChangeResourceRecordSets&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;arn:aws:route53:::hostedzone/*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Action&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ListHostedZones&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;route53:ListResourceRecordSets&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ],
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     &amp;#34;Resource&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       &amp;#34;*&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;   }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;

aws iam create-policy --policy-name kops-route53-policy --policy-document file://kops-route53-policy.json
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Policy&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyName&amp;#34;: &amp;#34;kops-route53-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PolicyId&amp;#34;: &amp;#34;ANPAIEWAGN62HBYC7QOS2&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:iam::894527626897:policy/kops-route53-policy&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Path&amp;#34;: &amp;#34;/&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultVersionId&amp;#34;: &amp;#34;v1&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AttachmentCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;PermissionsBoundaryUsageCount&amp;#34;: 0,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;IsAttachable&amp;#34;: true,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CreateDate&amp;#34;: &amp;#34;2019-01-18T03:15:37Z&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;UpdateDate&amp;#34;: &amp;#34;2019-01-18T03:15:37Z&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that even we just created these kops policies for alb and route53 we cannot add them right now, we need to first create the cluster, you can skip them if you don&amp;rsquo;t plan on using these resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we will also export or set the cluster name and kops state store as environment variables&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k8s.techsquad.rocks
export KOPS_STATE_STORE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;techsquad-cluster-state-store&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We will be using these in a few places, so to not repeat ourselves let&amp;rsquo;s better have it as variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create the zone for the subdomain in Route53&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;uuidgen&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; aws route53 create-hosted-zone --name &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --caller-reference $ID | jq .DelegationSet.NameServers
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-848.awsdns-42.net&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-12.awsdns-01.com&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-1047.awsdns-02.org&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;ns-1862.awsdns-40.co.uk&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
As I&amp;rsquo;m already using this domain for the blog with github we can create a subdomain for it and add some NS records in our root zone for that subdomain, in this case k8s.techsquad.rocks. To make this easier I will show you how it should look like:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/kops-dns-subdomain.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

So with this change and our new zone in Route53 for the subdomain, we can freely manage it like if it was another domain, this means that everything that goes to *.k8s.techsquad.rocks will be handled by our Route53 zone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a bucket to store the cluster state&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api create-bucket &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --region us-east-1
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Location&amp;#34;: &amp;#34;/techsquad-cluster-state-store&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that bucket names are unique, so it&amp;rsquo;s always a good idea to prefix them with your domain name or something like that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set the versioning on, in case we need to rollback at some point&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-versioning --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;  --versioning-configuration Status&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Enabled&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set encryption on for the bucket&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws s3api put-bucket-encryption --bucket &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --server-side-encryption-configuration &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;Rules&amp;#34;:[{&amp;#34;ApplyServerSideEncryptionByDefault&amp;#34;:{&amp;#34;SSEAlgorithm&amp;#34;:&amp;#34;AES256&amp;#34;}}]}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And finally let&amp;rsquo;s create our cluster&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export KOPS_STATE_STORE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;KOPS_STATE_STORE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

kops create cluster &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --zones us-east-1a &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --networking calico &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --yes
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:06.449479   10314 create_cluster.go:1318] Using SSH public key: /home/kainlite/.ssh/id_rsa.pub&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:08.367862   10314 create_cluster.go:472] Inferred --cloud=aws from zone &amp;#34;us-east-1a&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:09.736030   10314 subnets.go:184] Assigned CIDR 172.20.32.0/19 to subnet us-east-1a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# W0117 23:14:18.049687   10314 firewall.go:249] Opening etcd port on masters for access from the nodes, for calico.  This is unsafe in untrusted environments.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:19.385541   10314 executor.go:91] Tasks: 0 done / 77 total; 34 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:21.779681   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-aggregator-ca&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:21.940026   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;ca&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:24.404810   10314 executor.go:91] Tasks: 34 done / 77 total; 24 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.548234   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;master&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.689470   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-aggregator&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.766563   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-scheduler&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.863562   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-controller-manager&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.955776   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubecfg&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.972837   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;apiserver-proxy-client&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:26.973239   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kops&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.055466   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubelet&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.127778   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kubelet-api&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:27.570516   10314 vfs_castore.go:731] Issuing new certificate: &amp;#34;kube-proxy&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:29.503168   10314 executor.go:91] Tasks: 58 done / 77 total; 17 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:31.594404   10314 executor.go:91] Tasks: 75 done / 77 total; 2 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:33.297131   10314 executor.go:91] Tasks: 77 done / 77 total; 0 can run&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:33.297168   10314 dns.go:153] Pre-creating DNS records&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I0117 23:14:34.947302   10314 update_cluster.go:291] Exporting kubecfg for cluster&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kops has set your kubectl context to k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Cluster is starting.  It should be ready in a few minutes.&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Suggestions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * validate cluster: kops validate cluster&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * list nodes: kubectl get nodes --show-labels&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * ssh to the master: ssh -i ~/.ssh/id_rsa admin@api.k8s.techsquad.rocks&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * the admin user is specific to Debian. If not using Debian please use the appropriate user based on your OS.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  * read about installing addons at: https://github.com/kubernetes/kops/blob/master/docs/addons.md.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We set the KOPS_STATE_STORE to a valid S3 url for kops, and then created the cluster, this will set kubectl context to our new cluster, we might need to wait a few minutes before being able to use it, but before doing anything let&amp;rsquo;s validate that&amp;rsquo;s up and ready.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kops validate cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Using cluster from kubectl context: k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Validating cluster k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# INSTANCE GROUPS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                    ROLE    MACHINETYPE     MIN     MAX     SUBNETS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# master-us-east-1a       Master  m3.medium       1       1       us-east-1a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# nodes                   Node    t2.medium       2       2       us-east-1a&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# NODE STATUS&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                            ROLE    READY&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-39-123.ec2.internal   node    True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-52-65.ec2.internal    node    True&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ip-172-20-61-51.ec2.internal    master  True&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Your cluster k8s.techsquad.rocks is ready&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The validation passed and we can see that our cluster is ready, it can take several minutes until the cluster is up and functional, in this case it took about 3-5 minutes.&lt;/p&gt;

&lt;p&gt;We will create an additional subnet to satisfy our ALB:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 create-subnet --vpc-id vpc-06e2e104ad785474c --cidr-block &lt;span style=&#34;color:#ae81ff&#34;&gt;172&lt;/span&gt;.20.64.0/19 --availability-zone us-east-1b
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Subnet&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AvailabilityZone&amp;#34;: &amp;#34;us-east-1b&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AvailableIpAddressCount&amp;#34;: 8187,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;CidrBlock&amp;#34;: &amp;#34;172.20.64.0/19&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;DefaultForAz&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;MapPublicIpOnLaunch&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;State&amp;#34;: &amp;#34;pending&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;SubnetId&amp;#34;: &amp;#34;subnet-017a5609ce6104e1b&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;VpcId&amp;#34;: &amp;#34;vpc-06e2e104ad785474c&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;AssignIpv6AddressOnCreation&amp;#34;: false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Ipv6CidrBlockAssociationSet&amp;#34;: []&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     }&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;KubernetesCluster,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k8s.techsquad.rocks
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Name,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;us-east-1b.k8s.techsquad.rocks
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SubnetType,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Public
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes.io/cluster/k8s.techsquad.rocks,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;owned
aws ec2 create-tags --resources subnet-017a5609ce6104e1b --tags Key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kubernetes.io/role/elb,Value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that we applied some required tags for the controller, and created an extra subnet, in a HA setup this would not be necessary since kops would create it for us but this is a small testing/dev cluster, so we will need to do it manually.&lt;/p&gt;

&lt;p&gt;And lastly a security group for our ALB:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 create-security-group --group-name WebApps --description &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default web security group&amp;#34;&lt;/span&gt;  --vpc-id vpc-06e2e104ad785474c
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;GroupId&amp;#34;: &amp;#34;sg-09f0b1233696e65ef&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;

aws ec2 authorize-security-group-ingress --group-id sg-09f0b1233696e65ef --protocol tcp --port &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; --cidr &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id sg-057d2b0f6e288aa70 --protocol all --port &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; --source-group sg-09f0b1233696e65ef&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that this rule will open the port 80 to the world, you can add your ip or your VPN ips there if you want to restrict it, the second rule will allow the traffic from the load balancer to reach the nodes where our app is running.&lt;/p&gt;

&lt;h3 id=&#34;aws-alb-ingress-controller&#34;&gt;&lt;strong&gt;Aws-alb-ingress-controller&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We will use &lt;a href=&#34;https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/&#34;&gt;Aws ALB Ingress Controller&lt;/a&gt;, to serve our web traffic, this will create an manage an ALB based in our ingress rules.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/rbac-role.yaml

clusterrole.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress-controller&amp;#34;&lt;/span&gt; created
clusterrolebinding.rbac.authorization.k8s.io &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress-controller&amp;#34;&lt;/span&gt; created
serviceaccount &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alb-ingress&amp;#34;&lt;/span&gt; created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Download the manifest and then modify the cluster-name to &lt;code&gt;k8s.techsquad.rocks&lt;/code&gt; and a few other parameters, you can list the vpcs with &lt;code&gt;aws ec2 describe-vpcs&lt;/code&gt; it will have some kops tags, so it&amp;rsquo;s easy to identify.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -sS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/alb-ingress-controller.yaml&amp;#34;&lt;/span&gt; &amp;gt; alb-ingress-controller.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Or copy and paste the following lines:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; alb-ingress-controller.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Application Load Balancer (ALB) Ingress Controller Deployment Manifest.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# This manifest details sensible defaults for deploying an ALB Ingress Controller.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# GitHub: https://github.com/kubernetes-sigs/aws-alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: apps/v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # Namespace the ALB Ingress Controller should run in. Does not impact which
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # namespaces it&amp;#39;s able to resolve ingress resource for. For limiting ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  # namespace scope, see --watch-namespace.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: kube-system
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  replicas: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  strategy:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    rollingUpdate:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      maxSurge: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      maxUnavailable: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    type: RollingUpdate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      creationTimestamp: null
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        app: alb-ingress-controller
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - -v=1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Limit the namespace where this ALB Ingress Controller deployment will
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # resolve ingress resources. If left commented, all namespaces are used.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - --watch-namespace=your-k8s-namespace
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --feature-gates=waf=false
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Setting the ingress-class flag below ensures that only ingress resources with the
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # annotation kubernetes.io/ingress.class: &amp;#34;alb&amp;#34; are respected by the controller. You may
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # choose any class you&amp;#39;d like for this controller to respect.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --ingress-class=alb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Name of your cluster. Used when naming resources created
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # by the ALB Ingress Controller, providing distinction between
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # clusters.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --cluster-name=k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS VPC ID this ingress controller will use to create AWS resources.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If unspecified, it will be discovered from ec2metadata.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --aws-vpc-id=vpc-06e2e104ad785474c
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS region this ingress controller will operate in.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If unspecified, it will be discovered from ec2metadata.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # List of regions: http://docs.aws.amazon.com/general/latest/gr/rande.html#vpc_region
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            - --aws-region=us-east-1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Enables logging on all outbound requests sent to the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # If logging is desired, set to true.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - ---aws-api-debug
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # Maximum number of times to retry the aws calls.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # defaults to 10.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # - --aws-max-retries=10
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          env:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS key id for authenticating with the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # This is only here for examples. It&amp;#39;s recommended you instead use
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # a project like kube2iam for granting access.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #- name: AWS_ACCESS_KEY_ID
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #  value: KEYVALUE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # AWS key secret for authenticating with the AWS API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # This is only here for examples. It&amp;#39;s recommended you instead use
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            # a project like kube2iam for granting access.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #- name: AWS_SECRET_ACCESS_KEY
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            #  value: SECRETVALUE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          # Repository location of the ALB Ingress Controller.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          image: 894847497797.dkr.ecr.us-west-2.amazonaws.com/aws-alb-ingress-controller:v1.0.0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          imagePullPolicy: Always
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name: server
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          resources: {}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          terminationMessagePath: /dev/termination-log
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      dnsPolicy: ClusterFirst
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      restartPolicy: Always
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      securityContext: {}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      terminationGracePeriodSeconds: 30
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccountName: alb-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccount: alb-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that I only modified the args section if you want to compare it with the original.&lt;/p&gt;

&lt;p&gt;Then finally apply it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f alb-ingress-controller.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.apps &amp;#34;alb-ingress-controller&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;external-dns&#34;&gt;&lt;strong&gt;External-dns&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/external-dns/blob/master/docs/tutorials/aws.md&#34;&gt;External DNS&lt;/a&gt; will update our zone in Route53 based in the ingress rules as well, so everything will be done automatically for us once we add an ingress resource.&lt;/p&gt;

&lt;p&gt;But first let&amp;rsquo;s attach those policies that we created before:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name nodes.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name masters.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name nodes.k8s.techsquad.rocks
aws iam attach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name masters.k8s.techsquad.rocks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that we just used the policies that we created before but we needed the cluster running because kops creates the roles nodes.k8s.techsquad.rocks and masters.k8s.techsquad.rocks, and this is needed for the aws-alb-ingress-controller and external-dns so these are able to do their job.&lt;/p&gt;

&lt;p&gt;We need to download the manifests and modify a few parameters to match our deployment, the parameters are domain-filter and txt-owner-id, the rest is as is:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Ss https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.0/docs/examples/external-dns.yaml &amp;gt; external-dns.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This configuration will only update records, that&amp;rsquo;s the default policy (upsert), and it will only look for public hosted zones.&lt;/p&gt;

&lt;p&gt;Or copy and paste the following lines:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; external-dns.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ServiceAccount
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ClusterRole
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;services&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;pods&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;extensions&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;ingresses&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;get&amp;#34;,&amp;#34;watch&amp;#34;,&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- apiGroups: [&amp;#34;&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  resources: [&amp;#34;nodes&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  verbs: [&amp;#34;list&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: rbac.authorization.k8s.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: ClusterRoleBinding
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns-viewer
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;roleRef:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  apiGroup: rbac.authorization.k8s.io
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  kind: ClusterRole
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;subjects:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;- kind: ServiceAccount
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: default
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: extensions/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  strategy:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    type: Recreate
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        app: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      serviceAccountName: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - name: external-dns
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        image: registry.opensource.zalan.do/teapot/external-dns:v0.5.9
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --source=service
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --source=ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --domain-filter=k8s.techsquad.rocks # will make ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --provider=aws
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --policy=upsert-only # would prevent ExternalDNS from deleting any records, omit to enable full synchronization
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --aws-zone-type=public # only look at public hosted zones (valid values are public, private or no value for both)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --registry=txt
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        - --txt-owner-id=k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And apply it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f external-dns.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# serviceaccount &amp;#34;external-dns&amp;#34; unchanged&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# clusterrole.rbac.authorization.k8s.io &amp;#34;external-dns&amp;#34; configured&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# clusterrolebinding.rbac.authorization.k8s.io &amp;#34;external-dns-viewer&amp;#34; configured&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.extensions &amp;#34;external-dns&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Validate that we have everything that we installed up and running:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get pods
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                            READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# external-dns-7d7998f7bb-lb5kq   1/1       Running   0          2m&lt;/span&gt;

kubectl get pods -n kube-system
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# NAME                                                   READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# alb-ingress-controller-5885ddd5f9-9rsc8                1/1       Running   0          12m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-kube-controllers-f6bc47f75-n99tl                1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-4ps9c                                      2/2       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-kjztv                                      2/2       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# calico-node-zs4fg                                      2/2       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# dns-controller-67f5c6b7bd-r67pl                        1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# etcd-server-events-ip-172-20-42-37.ec2.internal        1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# etcd-server-ip-172-20-42-37.ec2.internal               1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-apiserver-ip-172-20-42-37.ec2.internal            1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-controller-manager-ip-172-20-42-37.ec2.internal   1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-756bfc7fdf-2kzjs                              3/3       Running   0          24m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-756bfc7fdf-rq5nd                              3/3       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-dns-autoscaler-787d59df8f-c2d52                   1/1       Running   0          27m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-42-109.ec2.internal               1/1       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-42-37.ec2.internal                1/1       Running   0          26m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-proxy-ip-172-20-54-175.ec2.internal               1/1       Running   0          25m&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# kube-scheduler-ip-172-20-42-37.ec2.internal            1/1       Running   0          26m&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
We can see that alb-ingress-controller is running, also external-dns, and everything looks good and healthy, time to test it with a deployment.&lt;/p&gt;

&lt;h3 id=&#34;testing-everything&#34;&gt;&lt;strong&gt;Testing everything&lt;/strong&gt;&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-deployment.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-service.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# namespace &amp;#34;2048-game&amp;#34; created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# deployment.extensions &amp;#34;2048-deployment&amp;#34; created&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# service &amp;#34;service-2048&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to download and edit the ingress resource to make it use our domain so we can then see the record pointing to the ALB.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -Ss https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.0.0/docs/examples/2048/2048-ingress.yaml &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Or just copy and paste the next snippet.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; 2048-ingress.yaml
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: extensions/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: &amp;#34;2048-ingress&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  namespace: &amp;#34;2048-game&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  annotations:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    kubernetes.io/ingress.class:                alb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/scheme:           internet-facing
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/target-type:      instance
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/subnets:          subnet-017a5609ce6104e1b, subnet-060e6d3c3d3c2b34a
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    alb.ingress.kubernetes.io/security-groups:  sg-09f0b1233696e65ef
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # You can check all the alternatives here:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    # https://github.com/riccardofreixo/alb-ingress-controller/blob/master/docs/ingress-resources.md
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: 2048-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  - host: 2048.k8s.techsquad.rocks
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    http:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      paths:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - backend:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          serviceName: &amp;#34;service-2048&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          servicePort: 80
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        path: /*
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You can use &lt;code&gt;aws ec2 describe-subnets&lt;/code&gt;, to find the first subnet id, this subnet already has some tags that we need in order to make it work, for example: &lt;code&gt;kubernetes.io/role/elb: 1&lt;/code&gt;, and the second subnet is the one that we created manually and applied the same tags.&lt;/p&gt;

&lt;p&gt;And finally apply it:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ingress.extensions &amp;#34;2048-ingress&amp;#34; created&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Wait a few moments and verify.&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The ALB&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-listeners.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The DNS records&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-route53-records.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And the app&lt;/strong&gt;
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-alb-result.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;&lt;strong&gt;Clean up&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Remember this is not free, and if you don&amp;rsquo;t want to get charged after you&amp;rsquo;re done testing just shutdown and delete everything.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl delete -f &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;-ingress.yaml
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name nodes.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-route53-policy --role-name masters.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name nodes.k8s.techsquad.rocks
aws iam detach-role-policy --policy-arn arn:aws:iam::894527626897:policy/kops-alb-policy --role-name masters.k8s.techsquad.rocks

kops delete cluster &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --yes
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Deleted kubectl config for k8s.techsquad.rocks&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Deleted cluster: &amp;#34;k8s.techsquad.rocks&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
This command is really verbose, so I skipped it to the end, be aware that in order to delete the cluster with kops you first need to detach the additionally attached privileges. Also be careful to delete first the ingress resources so the ALB gets removed before you delete the cluster, or you will have an ALB laying around afterwards. You can re-run it if it gets stuck and cannot delete any resource.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I was going to use helm and deploy a more complex application here, but the article was already too long, so I decided to go with the aws alb ingress controller example.&lt;/li&gt;
&lt;li&gt;If something doesn&amp;rsquo;t go well or things aren&amp;rsquo;t happening you can always check the logs for external-dns and aws-alb-ingress-controller, the messages are usually very descriptive and easy to understand.&lt;/li&gt;
&lt;li&gt;For an ALB you need two subnets in two different AZs beforehand.&lt;/li&gt;
&lt;li&gt;If you are going to use ALBs, have in mind that it will create an ALB for each deployment, there is a small project that merges everything into one ALB but you need to have a unified or consolidated way to do health checks or or some of the apps will fail and the ALB will return a 502, the project can be found &lt;a href=&#34;https://github.com/jakubkulhan/ingress-merge&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Documenting what you do and how you do it (Also keeping the documentation updated is really important), not only will help the future you (Yes, you can thank your past self when reading and old doc), but also it will make it easier to share the knowledge and purpose of whatever you are implementing with your team.&lt;/li&gt;
&lt;li&gt;I spent 3 bucks with all the instances and dns zones, etc during this tutorial in case you are interested :).&lt;/li&gt;
&lt;li&gt;Notes I also removed all $ from the code blocks and added the output of the commands with # OUTPUT:, let me know if this is clear and easy to read, or if you have any suggestion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
