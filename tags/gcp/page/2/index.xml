<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gcp on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</title>
    <link>https://legacy.techsquad.rocks/tags/gcp/</link>
    <description>Recent content in gcp on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 24 Jun 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://legacy.techsquad.rocks/tags/gcp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go continuous integration with Travis CI and Docker</title>
      <link>https://legacy.techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/</guid>
      <description>Introduction In this article we will see how to create a simple continuous integration process using Github, Travis-CI and Docker HUB, the files used here can be found HERE, in the next article we will continue with what we have here to provide continuous deployment possibly using Jenkins or maybe Travis, let me know which one you would prefer to see.
First thing first App We will review the docker file, the app code and the travis-ci file, so let&amp;rsquo;s start with the app main.</description>
    </item>
    
    <item>
      <title>Actually using Vault on Kubernetes</title>
      <link>https://legacy.techsquad.rocks/blog/actually_using_vault_on_kubernetes/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/actually_using_vault_on_kubernetes/</guid>
      <description>Introduction In the previous article we configured Vault with Consul on our cluster, now it&amp;rsquo;s time to go ahead and use it to provision secrets to our pods/applications. If you don&amp;rsquo;t remember about it or don&amp;rsquo;t have your Vault already configured you can go to Getting started with HashiCorp Vault on Kubernetes.
In this article we will actually create an example using mutual TLS and provision some secrets to our app, You can find the files used here in this repo.</description>
    </item>
    
    <item>
      <title>Getting started with HashiCorp Vault on Kubernetes</title>
      <link>https://legacy.techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/</guid>
      <description>Introduction Vault secures, stores, and tightly controls access to tokens, passwords, certificates, API keys, and other secrets in modern computing. What this means is that you can safely store all your App secrets in Vault without having to worry anymore how to store, provide, and use those secrets, we will see how to install it on a running kubernetes cluster and save and read a secret by our application, in this page we will be using Vault version 1.</description>
    </item>
    
    <item>
      <title>Creating a lambda function with terraform</title>
      <link>https://legacy.techsquad.rocks/blog/creating_a_lambda_function_with_terraform/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/creating_a_lambda_function_with_terraform/</guid>
      <description>Introduction Here we will see how to use terraform to manage lambda functions, it will be a simple hello world in node.js, available as a gist here, note that I did not create this example but it&amp;rsquo;s really close to the official documentation but shorter, you can see another example with python here.
Before you start make sure you already have your account configured for awscli and terraform installed.
Configuration files First of all we need to get our terraform file or files (in a normal case scenario, but since this is a hello world it is easier to have everything in the same file), I have added some comments of what each part does as you can see.</description>
    </item>
    
    <item>
      <title>SSH Socks Proxy</title>
      <link>https://legacy.techsquad.rocks/blog/ssh_socks_proxy/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/ssh_socks_proxy/</guid>
      <description>Introduction SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Socks proxy and what it means, we also will explore SSH Remote Port Forward and SSH Local Port Forward and how to use that functionality.
Explanation SOCKS is an Internet protocol that exchanges network packets between a client and server through a proxy server (Extracted from Wikipedia). So basically it allows our remote server to become a VPNey likey thingy using SSH, so let&amp;rsquo;s see the different options of how and when to use it.</description>
    </item>
    
    <item>
      <title>SSH Remote Port Forward</title>
      <link>https://legacy.techsquad.rocks/blog/ssh_remote_port_forward/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/ssh_remote_port_forward/</guid>
      <description>Introduction SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Remote port forward and what it means, we also will explore SSH Local Port Forward and SSH Socks Proxy and how to use that functionality.
Explanation Remote port forward basically let&amp;rsquo;s you forward one port from your machine to a remote machine, for example you want to connect to a local service from a remote server but just temporarily, let&amp;rsquo;s say you want to connect to a mysql instance on the default port (3306).</description>
    </item>
    
    <item>
      <title>SSH Local Port Forward</title>
      <link>https://legacy.techsquad.rocks/blog/ssh_local_port_forward/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/ssh_local_port_forward/</guid>
      <description>Introduction SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Local port forward and what it means, we also will explore SSH Remote Port Forward and SSH Socks Proxy and how to use that functionality.
Explanation Local port forward basically let&amp;rsquo;s you forward one port from a remote machine to your local machine, for example you want to connect to a remote service from machine but just temporarily or there is a firewall that won&amp;rsquo;t let you do it, let&amp;rsquo;s say you want to connect to a mysql instance on the default port (3306).</description>
    </item>
    
    <item>
      <title>Create an AWS lambda function in Go</title>
      <link>https://legacy.techsquad.rocks/blog/create_an_aws_lambda_function_in_go/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/create_an_aws_lambda_function_in_go/</guid>
      <description>Introduction In this article we will create a lambda function and an API Gateway route like we did with the serverless framework but only using AWS tools, we will be using the same generated code for our function from the last article What does the serverless framework does for me, so refer to that one before starting this one if you want to know how did we get here. Also as a side note this is a very basic example on how to get started with lambda without any additional tool.</description>
    </item>
    
    <item>
      <title>What does the serverless framework does for me</title>
      <link>https://legacy.techsquad.rocks/blog/what_does_the_serverless_framework_does_for_me/</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/what_does_the_serverless_framework_does_for_me/</guid>
      <description>Introduction The serverless framework is a nice tool to manage all your cloud functions. from their page:
 The Serverless Framework helps you develop and deploy your AWS Lambda functions, along with the AWS infrastructure resources they require. It&amp;rsquo;s a CLI that offers structure, automation and best practices out-of-the-box, allowing you to focus on building sophisticated, event-driven, serverless architectures, comprised of Functions and Events.
 Let&amp;rsquo;s take the golang example for a spin So let&amp;rsquo;s generate a project with the serverless framework and see everything that it does for us.</description>
    </item>
    
    <item>
      <title>Sending emails with AWS Lambda and SES from a HTML form</title>
      <link>https://legacy.techsquad.rocks/blog/sending_emails_with_lambda_and_ses/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/sending_emails_with_lambda_and_ses/</guid>
      <description>Serverless series Part I: Serving static websites with s3 and cloudfront, so refer to that one before starting this one if you want to know how did we get here.
Part II: Sending emails with AWS Lambda and SES from a HTML form, You are here.
Introduction This article is part of the serverless series, in this article we will see how to create a serverless function in AWS Lambda to send an email coming from the HTML form in the site the source code can be found here, that is the go version but if you prefer node you can use this one.</description>
    </item>
    
    <item>
      <title>Serve your static website with S3 and CloudFront</title>
      <link>https://legacy.techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/</guid>
      <description>Serverless series Part I: Serving static websites with s3 and cloudfront, You&amp;rsquo;re here.
Part II: Sending emails with AWS Lambda and SES from a HTML form
Introduction This article will be part of a series, the idea is to get a fully serverless site up and running with login functionality, maybe a profile page, and some random utility, but as we are just starting with it we will host our first draft of the page with a contact form, for the distribution of the files we will see how to configure CloudFront and for storing the files we will be using S3, S3 is an object storage service that offers industry leading scalability, data availability, security and performance, and CloudFront is a fast content delivery network (CDN).</description>
    </item>
    
    <item>
      <title>Serve your static website in Github</title>
      <link>https://legacy.techsquad.rocks/blog/serving_static_sites_with_github/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/serving_static_sites_with_github/</guid>
      <description>Introduction GitHub offers static web hosting for you and your apps this is called GitHub Pages, you can use markdown (jekyll or just plain html), for example for this blog I generate all the files with Hugo.io and that gets deployed to GitHub Pages, the configuration is fairly simple as we will see in the following example (this blog setup).
GitHub pages offers some great examples that are really easy to follow, but if you want to know how I configured everything for this blog continue reading :), if you like it or have any comment use the disqus box at the bottom of the page.</description>
    </item>
    
    <item>
      <title>Give super powers to your terminal with tmux</title>
      <link>https://legacy.techsquad.rocks/blog/give_super_powers_to_your_terminal_with_tmux/</link>
      <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/give_super_powers_to_your_terminal_with_tmux/</guid>
      <description>Introduction In this article I want to introduce you to tmux, you might have used screen in the past or heard about it, what tmux and screen are is terminal multiplexers, what does that mean? That you can have many windows/tabs and splits/panes in just one terminal window, this can really make things easier when using it as a development environment for example, you can detach from the terminal and leave things running indefinitely, or share your terminal with a colleague over ssh, for the examples I will be explaining bits of my configuration and how do I use it.</description>
    </item>
    
    <item>
      <title>How to create a serverless twitter bot</title>
      <link>https://legacy.techsquad.rocks/blog/creating_a_serverless_twitter_bot/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/creating_a_serverless_twitter_bot/</guid>
      <description>Introduction This article explains how to create a serverless tweet-bot, basically pulls articles from this blog and post them to twitter in a nice way. It uses cron as the trigger so it should post a tweet every 12 hours, or you can invoke it manually.
Twitter So before you can start with the Twitter API you need to get a developer account in this url, after submitted and created, you then need to create an App and generate the keys and tokens to be able to use it, it might take a while, I recommend you read everything that Twitter wants you to read while creating both the dev account and the app, so you can understand the scope and the good practices of using their services.</description>
    </item>
    
    <item>
      <title>From zero to hero with kops and AWS</title>
      <link>https://legacy.techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/from_zero_to_hero_with_kops_and_aws/</guid>
      <description>Introduction In this article we will create a cluster from scratch with kops (K8s installation, upgrades and management) in AWS, We will configure aws-alb-ingress-controller (External traffic into our services/pods) and external dns (Update the records based in the ingress rules) and also learn a bit about awscli in the process.
Basically we will have a fully functional cluster that will be able to handle public traffic in minutes, first we will install the cluster with kops, then we will enable the ingress controller and lastly external-dns, then we will deploy a basic app to test that everything works fine, SSL/TLS is out of the scope but it&amp;rsquo;s fairly easy to implement if you are using ACM.</description>
    </item>
    
    <item>
      <title>My local environment</title>
      <link>https://legacy.techsquad.rocks/blog/my_local_environment/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/my_local_environment/</guid>
      <description>Introduction This article is about my current configuration, but I&amp;rsquo;m going to talk only about the terminal and my text editor because those will work in any linux distribution, I&amp;rsquo;m currently using Arch Linux and AwesomeWM (I used Gnome Shell previously, and Gnome 2 before that), you can find my dotfiles here with all my configurations.
While my terminal doesn&amp;rsquo;t look exactly like the one from the picture you can get something like that with GBT.</description>
    </item>
    
    <item>
      <title>Exploring some Istio features</title>
      <link>https://legacy.techsquad.rocks/blog/exploring_some_istio_features/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/exploring_some_istio_features/</guid>
      <description>Introduction This article builds up on what we did in the last article, so refer to that one before starting this one, if you are planing to follow the documentation examples you will find many similarities since I based this article on that.
In this example I will be using Digital Ocean (that&amp;rsquo;s my referral link), note that I do not have any association with Digital Ocean but they give you $100 to test their products for 60 days, if you spend $25 I get another $25.</description>
    </item>
    
    <item>
      <title>Why do I need a service mesh?</title>
      <link>https://legacy.techsquad.rocks/blog/why_do_i_need_a_service_mesh/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/why_do_i_need_a_service_mesh/</guid>
      <description>Introduction This time we will see how to get started with Istio and why do we need to use a service mesh.
In this example I will be using Digital Ocean (that&amp;rsquo;s my referral link), note that I do not have any association with Digital Ocean but they give you $100 to test their products for 60 days, if you spend $25 I get another $25.
Istio So&amp;hellip; You might be wondering some of those questions: why Istio?</description>
    </item>
    
    <item>
      <title>Getting started with skaffold</title>
      <link>https://legacy.techsquad.rocks/blog/getting_started_with_skaffold/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/getting_started_with_skaffold/</guid>
      <description>Skaffold This time we will see how to get started with Skaffold, it seems a relatively mature project, and it does a lot more than some of the previous explored alternatives: Skaffold is a command line tool that facilitates continuous development for Kubernetes applications. You can iterate on your application source code locally then deploy to local or remote Kubernetes clusters. Skaffold handles the workflow for building, pushing and deploying your application.</description>
    </item>
    
    <item>
      <title>Getting started with gitkube</title>
      <link>https://legacy.techsquad.rocks/blog/getting_started_with_gitkube/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://legacy.techsquad.rocks/blog/getting_started_with_gitkube/</guid>
      <description>Gitkube This time we will see how to get started with Gitkube, it&amp;rsquo;s a young project but it seems to work fine and it has an interesting approach compared to other alternatives, since it only relies on git and kubectl, other than that it&amp;rsquo;s just a CRD and a controller, so you end up with 2 pods in kube-system one for the controller and the other for gitkubed, gitkubed is in charge of cloning your repos and also build the docker images, it seems that the idea behind gitkube is for the daily use in a dev/test environment where you need to try your changes quickly and without hassle.</description>
    </item>
    
  </channel>
</rss>
