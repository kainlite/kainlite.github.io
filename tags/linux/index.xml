<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</title>
    <link>https://techsquad.rocks/tags/linux/</link>
    <description>Recent content in linux on Kubernetes, CI/CD, Git, Linux, Containers, Golang... and more</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 05 May 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://techsquad.rocks/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go continuous delivery with Terraform and Kubernetes</title>
      <link>https://techsquad.rocks/blog/go_continuous_delivery_with_terraform_and_kubernetes/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/go_continuous_delivery_with_terraform_and_kubernetes/</guid>
      <tags>
      
        <tag>travis-ci</tag>
      
        <tag>docker</tag>
      
        <tag>golang</tag>
      
        <tag>linux</tag>
      
        <tag>continuous-integration</tag>
      
        <tag>continuous-delivery</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will continue where we left off the last time &lt;a href=&#34;https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/&#34;&gt;Go continuous integration with Travis CI and Docker&lt;/a&gt;, the files used here can be found &lt;a href=&#34;https://github.com/kainlite/whatismyip-go/tree/continuos-delivery&#34;&gt;HERE&lt;/a&gt;, and we will be creating our terraform cluster with a load balancer and generating our kubeconfig file based on the certs provided by terraform on travis and then finally creating a basic deployment and validate that everything works.&lt;/p&gt;

&lt;h5 id=&#34;digitalocean&#34;&gt;&lt;strong&gt;DigitalOcean&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;We need to create a token so terraform can create resources using DO API. Go to your account then in the menu on the left click API, then you should see something like this:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-token-1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

Once there click generate token (give it a meaningful name to you), and make sure it can write.
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-token-2.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h5 id=&#34;terraform&#34;&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As the next step it would be good to set the token for terraform, so let&amp;rsquo;s examine all files and see what they are going to do, but first we&amp;rsquo;re going to provide the secrets to our app via environment variables, and I&amp;rsquo;ve found quite useful to use &lt;code&gt;direnv&lt;/code&gt; on many projects, so the content of the first file &lt;code&gt;.envrc&lt;/code&gt; would look something like:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/2da0abc285e227b966b492f8e7f3eddc.js&#34;&gt;&lt;/script&gt;
and after that you will need to allow it&amp;rsquo;s execution by running &lt;code&gt;direnv allow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first terraform file that we are going to check is &lt;code&gt;provider.tf&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/add2f8b31929468359e9222bce0855f1.js&#34;&gt;&lt;/script&gt;
As we&amp;rsquo;re using environment variables we need to declare it and then set it in the provider, for now we only need the token.&lt;/p&gt;

&lt;p&gt;Then the &lt;code&gt;kubernetes.tf&lt;/code&gt; file:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/11d6eb62a0b3c5f0e5978e6b43e4b166.js&#34;&gt;&lt;/script&gt;
This file will be the responsible of creating the kubernetes cluster, as it&amp;rsquo;s our development cluster we only need one node.&lt;/p&gt;

&lt;p&gt;Next the file &lt;code&gt;lb.tf&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/85185e39960765a189ee70b5c9489fea.js&#34;&gt;&lt;/script&gt;
This one is particularly interesting because it will provide a point of access to our applications (port 80 on it&amp;rsquo;s public IP address), and it also uses a basic health check.&lt;/p&gt;

&lt;p&gt;And last but not least the &lt;code&gt;output.tf&lt;/code&gt; file:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/18205b3ba693be054e2ea22832f4ecef.js&#34;&gt;&lt;/script&gt;
This file will print the kubernetes config file that we need to be able to use &lt;code&gt;kubectl&lt;/code&gt;, and also the IP address of our load balancer.&lt;/p&gt;

&lt;p&gt;So what do we do with all of this?, first you will need to run &lt;code&gt;terraform init&lt;/code&gt; inside the terraform folder to download plugins and providers, once that is done you can run &lt;code&gt;terraform plan&lt;/code&gt; to see what changes terraform wants to make or &lt;code&gt;terraform apply&lt;/code&gt; to do the changes. How is that going to look?:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/d4a4c4f18be5022e2ed23e74879ff975.js&#34;&gt;&lt;/script&gt;
This will create our cluster in DigitalOcean, remember to destroy it after you&amp;rsquo;re done using it with &lt;code&gt;terraform destroy&lt;/code&gt;, if you don&amp;rsquo;t use a plan you will be prompted for a confirmation when you do &lt;code&gt;terraform apply&lt;/code&gt;, review and say &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;travis&#34;&gt;&lt;strong&gt;Travis&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;We did some additions to our &lt;code&gt;.travis.yml&lt;/code&gt; file, which are mostly to prepare &lt;code&gt;kubectl&lt;/code&gt; and to also trigger a deployment if the build succeeded.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/69cdd243a815b68c483bdc71e6bf9186.js&#34;&gt;&lt;/script&gt;
As shown in the screenshot we took the base64 encoded certificates and loaded them into travis as environment variables (KUBERNETES_CA, KUBERNETES_CLIENT_CA, KUBERNETES_CLIENT_KEY, KUBERNETES_ENDPOINT), then we decode that into files, create the configuration using kubectl and set it as active and then we apply the deployment with the newly rendered hash.&lt;/p&gt;

&lt;p&gt;This is how it should look in travis:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-environment-variables.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the generated kubernetes configuration and what values you should take into account:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/ebd9e3c82d4aa0f1e43be53078a9b593.js&#34;&gt;&lt;/script&gt;
Never do that, don&amp;rsquo;t share your configuration or anybody will be able to use your cluster, also be careful not to commit it to your repo, in this example it&amp;rsquo;s no longer valid because after running the examples I destroyed the cluster with &lt;code&gt;terraform destroy&lt;/code&gt;. Now there are four values of interest for us: certificate-authority-data: KUBERNETES_CA, client-certificate-data: KUBERNETES_CLIENT_CA, client-key-data: KUBERNETES_CLIENT_KEY and server: KUBERNETES_ENDPOINT, with these variables we can re-create our kubernetes configuration easily using kubectl, be aware that we&amp;rsquo;re not decoding to save it in travis, we do that in the travis configuration file (&lt;code&gt;.travis.yml&lt;/code&gt;).&lt;/p&gt;

&lt;h5 id=&#34;kubernetes&#34;&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;So after all that, we still need to have a deployment template to deploy our application, and it&amp;rsquo;s a template because we need to replace the SHA of the current build in the manifest before committing it to the Kubernetes API, so let&amp;rsquo;s check it &lt;code&gt;manifest.yml.template&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/aa1d9181112582ef94b5602480f95bf9.js&#34;&gt;&lt;/script&gt;
Here we expose our service in the port 30000 as a NodePort, and deploy the current SHA (replaced during execution by travis)&lt;/p&gt;

&lt;h5 id=&#34;testing-everything&#34;&gt;&lt;strong&gt;Testing everything&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Validate that the deployment went well by checking our kubernetes cluster:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/fa4e77e771c564bc14185afba4903a8c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;First we test the load balancer, and as we will see the ip is not right, it&amp;rsquo;s the internal ip of the load balancer and not our public ip address.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/4d9b99cd269d2eb346f60c308af054da.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;But if we hit our service directly we can see the correct IP address, this could be improved but it&amp;rsquo;s left as an exercise for the avid reader ◕_◕.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/cc2618efbf28bdb8c2a83d344a6dcff7.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Finally let&amp;rsquo;s check what we should see in travis:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-travis-result-1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;As we can see everything went well and our deployment applied successfully in our cluster
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/terraform-do-travis-result-2.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I will be posting some articles about CI and CD and good practices that DevOps/SREs should have in mind, tips, tricks, and full deployment examples, this is the second part of a possible series of three articles (Next one should be about the same but using Jenkins) with a complete but basic example of CI first and then CD. This can of course change and any feedback would be greatly appreciated :).&lt;/p&gt;

&lt;p&gt;In this example many things could be improved, for example we use a node port and there is no firewall so we can hit our app directly via nodeport or using the load balancer, we should add some firewall rules so only the load balancer is able to talk to the node port range (30000-32767).&lt;/p&gt;

&lt;p&gt;Also be aware that for production this setup will not be sufficient but for a development environment would suffice initially.&lt;/p&gt;

&lt;p&gt;Some useful links for &lt;a href=&#34;https://docs.travis-ci.com/user/job-lifecycle/&#34;&gt;travis&lt;/a&gt; and &lt;a href=&#34;https://www.terraform.io/docs/providers/do/r/kubernetes_cluster.html&#34;&gt;terraform&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go continuous integration with Travis CI and Docker</title>
      <link>https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/go_continuous_integration_with_travis_ci_and_docker/</guid>
      <tags>
      
        <tag>travis-ci</tag>
      
        <tag>docker</tag>
      
        <tag>golang</tag>
      
        <tag>linux</tag>
      
        <tag>continuous-integration</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will see how to create a simple continuous integration process using &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;, &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis-CI&lt;/a&gt; and &lt;a href=&#34;https://cloud.docker.com&#34;&gt;Docker HUB&lt;/a&gt;, the files used here can be found &lt;a href=&#34;https://github.com/kainlite/whatismyip-go&#34;&gt;HERE&lt;/a&gt;, in the next article we will continue with what we have here to provide continuous deployment possibly using Jenkins or maybe Travis, let me know which one you would prefer to see.&lt;/p&gt;

&lt;h5 id=&#34;first-thing-first&#34;&gt;&lt;strong&gt;First thing first&lt;/strong&gt;&lt;/h5&gt;

&lt;h5 id=&#34;app&#34;&gt;App&lt;/h5&gt;

&lt;p&gt;We will review the docker file, the app code and the travis-ci file, so let&amp;rsquo;s start with the app &lt;code&gt;main.go&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/f7e0c3e40b02cc31a78f4eef491fa834.js&#34;&gt;&lt;/script&gt;
Let&amp;rsquo;s quickly check what this code does, first we check for the port to use, then convert it to a number, register the handler for our HTTP function and listen for requests, this code should print our ip address as you would expect by the name.&lt;/p&gt;

&lt;p&gt;Then the &lt;code&gt;main_test.go&lt;/code&gt; code:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/13391af166c77ffb10b940e5a9a1ac4d.js&#34;&gt;&lt;/script&gt;
The test is fairly simple it just checks that the web server works by trying to fetch &lt;code&gt;/&lt;/code&gt; and checking for an empty body and &lt;code&gt;200&lt;/code&gt; status code.&lt;/p&gt;

&lt;h5 id=&#34;docker&#34;&gt;Docker&lt;/h5&gt;

&lt;p&gt;Next the &lt;code&gt;Dockerfile&lt;/code&gt;:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/5db561f6f8808f1b5eaf091887416311.js&#34;&gt;&lt;/script&gt;
We set the working directory to please go, then fetch dependencies and install our binary, we also generate a test binary, expose the port that we want to use and set the user as nobody in case someone can exploit our app and jump into our container, then just set the command to execute on &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;travis&#34;&gt;Travis&lt;/h5&gt;

&lt;p&gt;And last but not least the &lt;code&gt;.travis.yml&lt;/code&gt; file:
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/55c5fcd1fde0bfc148b8a9ee8a41fc5a.js&#34;&gt;&lt;/script&gt;
We let travis know that we will be running some go code and also docker, then build the image, run the tests and then the app as initialization, after that we validate that the app works and lastly login to dockerhub and push the image, the important things to have in mind here is that we use variables for example the repo name, the commit SHA, and the docker username and password in a secure way, since travis-ci hides the values that we tell them to.&lt;/p&gt;

&lt;h5 id=&#34;putting-everything-together&#34;&gt;&lt;strong&gt;Putting everything together&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;So far we got the &lt;a href=&#34;https://github.com/kainlite/whatismyip-go&#34;&gt;repo&lt;/a&gt; going, the configuration for travis, the dockerfile, the app, but now we need to make use of it, so you will need to create a travis account for this to work then link your github account to it, then you will be able to sync your repositories and you should see something like this:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-travis-list.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

Once you have your account linked you will be able to sync and enable repositories to be built.&lt;/p&gt;

&lt;p&gt;After enabling the repository you can configure some details like environment variables, here we will set the credentials for dockerhub.
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-travis-settings.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;And now we will create the repository in dockerhub:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-docker-repo.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

After the repository is created we can trigger a build from travis or push a commit to the repo in order to trigger a build and to validate that everything works.&lt;/p&gt;

&lt;p&gt;You should see something like this in travis if everything went well:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-travis-log-1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

You can validate that everything went well by checking the commit SHA that triggered the build.&lt;/p&gt;

&lt;p&gt;And dockerhub:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/whatismyip-go-travis-log-2.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

The same SHA will be used to tag the image.&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I will be posting some articles about CI and CD and good practices that DevOps/SREs should have in mind, tips, tricks, and full deployment examples, this is the first part of a possible series of two or three articles with a complete but basic example of CI first and then CD. This can of course change and any feedback would be greatly appreciated :).&lt;/p&gt;

&lt;p&gt;Some useful links for travis and &lt;a href=&#34;https://docs.travis-ci.com/user/docker/&#34;&gt;docker&lt;/a&gt; and the &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables/&#34;&gt;environment variables list&lt;/a&gt; that can be used.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Actually using Vault on Kubernetes</title>
      <link>https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/</guid>
      <tags>
      
        <tag>kubernetes</tag>
      
        <tag>vault</tag>
      
        <tag>linux</tag>
      
        <tag>security</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In the previous article we configured Vault with Consul on our cluster, now it&amp;rsquo;s time to go ahead and use it to provision secrets to our pods/applications. If you don&amp;rsquo;t remember about it or don&amp;rsquo;t have your Vault already configured you can go to &lt;a href=&#34;https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/&#34;&gt;Getting started with HashiCorp Vault on Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article we will actually create an example using mutual TLS and provision some secrets to our app, You can find the files used here in &lt;a href=&#34;https://github.com/kainlite/vault-kubernetes&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;creating-a-cert-for-our-new-client&#34;&gt;&lt;strong&gt;Creating a cert for our new client&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As we see here we need to enable kv version 1 on &lt;code&gt;/secret&lt;/code&gt; for this to work, then we just create a secret and store it as a kubernetes secret for myapp, note that the CA was created in the previous article and we rely on these certificates so we can keep building on that.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/2989cf05404896f7b65ac400068ac903.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;service-account-for-kubernetes&#34;&gt;&lt;strong&gt;Service account for kubernetes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In Kubernetes, a service account provides an identity for processes that run in a Pod so that the processes can contact the API server.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/8440fe3654d36fb2055c7ceb894f167e.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;vault-policy&#34;&gt;&lt;strong&gt;Vault policy&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Then we need to set a read-only policy for our secrets, we don&amp;rsquo;t want or app to be able to write or rewrite secrets.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/aef3234eb43aa37f7cce5f20ecf7c757.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;kubernetes-configuration&#34;&gt;&lt;strong&gt;Kubernetes configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Set the environment variables to point to the running Minikube environment and enable the &lt;a href=&#34;https://www.vaultproject.io/docs/auth/kubernetes.html#configuration&#34;&gt;kubernetes authentication method&lt;/a&gt; and then validate it from a temporal Pod.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/a47d22781b177c483bfe706cc436f049.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;the-deployment-and-the-consul-template-configuration&#34;&gt;&lt;strong&gt;The deployment and the consul-template configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;If you check the volume mounts and the secrets we load the certificates we created initially and use them to fetch the secret from vault
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/0cc0e90b668c2fef4d2442e1b9eed03f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is where the magic happens so we&amp;rsquo;re able to fetch secrets (thanks to that role and the token that then will be stored there)
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/f977a689000a20c5163ce72cea0039f5.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And last but not least we create a file based in the template provided which our nginx container will render on the screen later, this is done using Consul Template.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/3dd851d97eba8222dd978a2e7ed067a9.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;test-it&#34;&gt;&lt;strong&gt;Test it!&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The last step would be to test all that, so after having deployed the files to kubernetes we should see something like this
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/269dd3f96ef2b5505a50513eef9ff94c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This post was heavily inspired by &lt;a href=&#34;https://learn.hashicorp.com/vault/identity-access-management/vault-agent-k8s&#34;&gt;this doc page&lt;/a&gt;, the main difference is that we have mutual TLS on, the only thing left would be to auto unseal our Vault, but we will left that for a future article or as an exercise for the reader.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with HashiCorp Vault on Kubernetes</title>
      <link>https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/getting_started_with_hashicorp_vault_on_kubernetes/</guid>
      <tags>
      
        <tag>kubernetes</tag>
      
        <tag>vault</tag>
      
        <tag>linux</tag>
      
        <tag>security</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Vault secures, stores, and tightly controls access to tokens, passwords, certificates, API keys, and other secrets in modern computing. What this means is that you can safely store all your App secrets in Vault without having to worry anymore how to store, provide, and use those secrets, we will see how to install it on a running kubernetes cluster and save and read a secret by our application, in this page we will be using Vault version 1.1.1, we will be using dynamic secrets, that means that each pod will have a different secret and that secret will expire once the pod is killed.&lt;/p&gt;

&lt;p&gt;Before you start you will need &lt;a href=&#34;https://www.consul.io/docs/install/index.html&#34;&gt;Consul&lt;/a&gt;, &lt;a href=&#34;https://www.vaultproject.io/docs/install/&#34;&gt;Vault&lt;/a&gt; client binaries and &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-minikube/&#34;&gt;Minikube&lt;/a&gt; or any running cluster, you can find the files used here in &lt;a href=&#34;https://github.com/kainlite/vault-consul-tls&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the part one of &lt;a href=&#34;https://techsquad.rocks/blog/actually_using_vault_on_kubernetes/&#34;&gt;two&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;preparing-the-cluster&#34;&gt;&lt;strong&gt;Preparing the cluster&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s start minikube and validate that we can reach our cluster with &lt;code&gt;minikube start&lt;/code&gt; and then with &lt;code&gt;kubectl get nodes&lt;/code&gt;, also the dashboard can become handy you can invoke it like this &lt;code&gt;minikube dashboard&lt;/code&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/750ee3b20d03fe3e999844c1c80fcf3f.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;creating-certificates-for-consul-and-vault&#34;&gt;&lt;strong&gt;Creating certificates for Consul and Vault&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Vault needs a backend to store data, this backend can be consul, etcd, postgres, and &lt;a href=&#34;https://www.vaultproject.io/docs/configuration/storage/index.html&#34;&gt;many more&lt;/a&gt;, so the first thing that we are going to do is create a certificate so consul and vault can speak to each other securely.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/f46c829de562750d0fb21ec25f8fa91b.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;consul&#34;&gt;&lt;strong&gt;Consul&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The next steps would be to create an encryption key for the consul cluster and to create all the kubernetes resources associated with it
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/4f787ef0e5152eb14928a73b3e2b9d91.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;vault&#34;&gt;&lt;strong&gt;Vault&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Once we have Consul running starting vault should be straight forward, we need to create all kubernetes resources associated with it and then initialize and unseal the vault.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/dbe6cb3055b5c202bb3f65b7178e2f7c.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see it takes a while to configure a Vault server but I really like the pattern that renders for the apps using it, in the next post we will see how to unlock it automatically with kubernetes and also how to mount the secrets automatically to our pods so our applications can use it :), this post was heavily inspired by &lt;a href=&#34;https://testdriven.io/blog/running-vault-and-consul-on-kubernetes/&#34;&gt;this one&lt;/a&gt; and &lt;a href=&#34;https://learn.hashicorp.com/consul/advanced/day-1-operations/certificates#configuring-agents&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Socks Proxy</title>
      <link>https://techsquad.rocks/blog/ssh_socks_proxy/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/ssh_socks_proxy/</guid>
      <tags>
      
        <tag>openssh</tag>
      
        <tag>tips-and-tricks</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Socks proxy and what it means, we also will explore &lt;a href=&#34;https://techsquad.rocks/blog/ssh_remote_port_forward/&#34;&gt;SSH Remote Port Forward&lt;/a&gt; and &lt;a href=&#34;https://techsquad.rocks/blog/ssh_local_port_forward/&#34;&gt;SSH Local Port Forward&lt;/a&gt; and how to use that functionality.&lt;/p&gt;

&lt;h5 id=&#34;explanation&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SOCKS is an Internet protocol that exchanges network packets between a client and server through a proxy server (Extracted from Wikipedia). So basically it allows our remote server to become a VPNey likey thingy using SSH, so let&amp;rsquo;s see the different options of how and when to use it. But we will need to tell the application to use that SOCKS proxy, for example our browser or curl.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The command&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -D &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt; -Nn ec2-user@54.210.37.203&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;For example I started a EC2 instance for this example and this is the output from curl:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl --socks4 localhost:9999 icanhazip.com
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 54.210.37.203&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;the-parameters-and-their-meaning&#34;&gt;&lt;strong&gt;The parameters and their meaning&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I extracted a portion of the meaning of parameter from the man page, but in a nutshell it means dynamic port forward without a shell.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-N Do not execute a remote command. This is useful for just forwarding ports.
-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.
-D Specifies a local “dynamic” application-level port forwarding.  This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see this option can be really handy to have a temporary VPN or proxy, also if you want to make this automatic and not so temporary you can check autossh or any real VPN solution like OpenVPN. You can use this kind of proxy in any App that supports SOCKS, most browsers do for example.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Remote Port Forward</title>
      <link>https://techsquad.rocks/blog/ssh_remote_port_forward/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/ssh_remote_port_forward/</guid>
      <tags>
      
        <tag>openssh</tag>
      
        <tag>tips-and-tricks</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Remote port forward and what it means, we also will explore &lt;a href=&#34;https://techsquad.rocks/blog/ssh_local_port_forward/&#34;&gt;SSH Local Port Forward&lt;/a&gt; and &lt;a href=&#34;https://techsquad.rocks/blog/ssh_socks_proxy/&#34;&gt;SSH Socks Proxy&lt;/a&gt; and how to use that functionality.&lt;/p&gt;

&lt;h5 id=&#34;explanation&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Remote port forward basically let&amp;rsquo;s you forward one port from your machine to a remote machine, for example you want to connect to a local service from a remote server but just temporarily, let&amp;rsquo;s say you want to connect to a mysql instance on the default port (3306).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The command&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -Nn -R &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;:localhost:3306 user@example.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The parameters and their meaning&lt;/strong&gt;
I extracted a portion of the meaning of parameter from the man page, but in a nutshell it means remote port forward without a shell.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-N Do not execute a remote command. This is useful for just forwarding ports.
-n Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.
-R Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;server-configuration&#34;&gt;&lt;strong&gt;Server configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;There are two configuration parameters that can change the behaviour of remote and local forwarded ports, those parameters are &lt;code&gt;GatewayPorts&lt;/code&gt; and &lt;code&gt;AllowTcpForwarding&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;gatewayports&#34;&gt;&lt;strong&gt;GatewayPorts&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;By default this option is &lt;code&gt;no&lt;/code&gt; which means that only the remote computer will be able to connect to the forwarded port, you can set it to &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;clientspecified&lt;/code&gt; to allow other machines use that remote port-forward (handy and dangerous).&lt;/p&gt;

&lt;h5 id=&#34;allowtcpforwarding&#34;&gt;&lt;strong&gt;AllowTcpForwarding&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;By default this option is set to &lt;code&gt;yes&lt;/code&gt;, you can restrict remote and local port forwarding by setting it to &lt;code&gt;no&lt;/code&gt; or allow only local by setting it to &lt;code&gt;local&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;As you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don&amp;rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH Local Port Forward</title>
      <link>https://techsquad.rocks/blog/ssh_local_port_forward/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/ssh_local_port_forward/</guid>
      <tags>
      
        <tag>openssh</tag>
      
        <tag>tips-and-tricks</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;SSH is a great tool not only to connect and interact with remote servers, in this article we will explore SSH Local port forward and what it means, we also will explore &lt;a href=&#34;https://techsquad.rocks/blog/ssh_remote_port_forward/&#34;&gt;SSH Remote Port Forward&lt;/a&gt; and &lt;a href=&#34;https://techsquad.rocks/blog/ssh_socks_proxy/&#34;&gt;SSH Socks Proxy&lt;/a&gt; and how to use that functionality.&lt;/p&gt;

&lt;h5 id=&#34;explanation&#34;&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Local port forward basically let&amp;rsquo;s you forward one port from a remote machine to your local machine, for example you want to connect to a remote service from machine but just temporarily or there is a firewall that won&amp;rsquo;t let you do it, let&amp;rsquo;s say you want to connect to a mysql instance on the default port (3306).&lt;/p&gt;

&lt;h5 id=&#34;the-command&#34;&gt;&lt;strong&gt;The command&lt;/strong&gt;&lt;/h5&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet1.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Here we are forwarding localhost:3306 in the remote machine to localhost:3306, but you can specify another address in the network for example 172.16.16.200 and the command would look like this:&lt;/p&gt;

&lt;p&gt;&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet2.sh&#34;&gt;&lt;/script&gt;
This will give you access to the ip 172.16.16.200 and port 3306 in the remote network.&lt;/p&gt;

&lt;h5 id=&#34;the-parameters-and-their-meaning&#34;&gt;&lt;strong&gt;The parameters and their meaning&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I extracted a portion of the meaning of parameter from the man page, but in a nutshell it means local port forward without a shell.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/kainlite/a3db371793effeb50fbc5341166c686c.js?file=snippet3.txt&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h5 id=&#34;server-configuration&#34;&gt;&lt;strong&gt;Server configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;There is a configuration parameter that can change the behaviour of remote and local forwarded ports, that parameter is &lt;code&gt;AllowTcpForwarding&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;allowtcpforwarding&#34;&gt;&lt;strong&gt;AllowTcpForwarding&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;By default this option is set to &lt;code&gt;yes&lt;/code&gt;, you can restrict remote and local port forwarding by setting it to &lt;code&gt;no&lt;/code&gt; or allow only local by setting it to &lt;code&gt;local&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;closing-notes&#34;&gt;&lt;strong&gt;Closing notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;As you can see this option can be really handy to bypass firewalls for example or have a temporary port forward, also if you want to make this automatic and not so temporary you can check autossh. You can use nc (netcat) if you don&amp;rsquo;t want to install anything to test the connections and the tunnels (nc -l -p PORT) in the server side and (nc HOST PORT) in the client.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create an AWS lambda function in Go</title>
      <link>https://techsquad.rocks/blog/create_an_aws_lambda_function_in_go/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/create_an_aws_lambda_function_in_go/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In this article we will create a lambda function and an API Gateway route like we did with the serverless framework but only using AWS tools, we will be using the same generated code for our function from the last article &lt;a href=&#34;https://techsquad.rocks/blog/what_does_the_serverless_framework_does_for_me/&#34;&gt;What does the serverless framework does for me&lt;/a&gt;, so refer to that one before starting this one if you want to know how did we get here. Also as a side note this is a very basic example on how to get started with lambda without any additional tool.&lt;/p&gt;

&lt;h5 id=&#34;let-s-see-the-code-one-more-time&#34;&gt;&lt;strong&gt;Let&amp;rsquo;s see the code one more time&lt;/strong&gt;&lt;/h5&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/events&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#75715e&#34;&gt;// Response is of type APIGatewayProxyResponse since we&amp;#39;re leveraging the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// AWS Lambda Proxy Request functionality (default behavior)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// https://serverless.com/framework/docs/providers/aws/events/apigateway/#lambda-proxy-integration
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;events&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;APIGatewayProxyResponse&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// Handler is our lambda handler invoked by the `lambda.Start` function call
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}{
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go Serverless v1.0! Your function executed successfully!&amp;#34;&lt;/span&gt;,
    })
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HTMLEscape&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;)

    &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;:      &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;IsBase64Encoded&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;:            &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;:           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-MyCompany-Func-Reply&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-handler&amp;#34;&lt;/span&gt;,
        },
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With that code as a starting point, now we need to build, package, upload, and deploy our function:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux go build main.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Package&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;zip main.zip ./main
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   adding: main (deflated 51%)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create the role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to IAM &amp;gt; Roles &amp;gt; Create.
Then select Lambda, assign a name and a description and then get the ARN for this role. Note that with the serverless framework this is done automatically for us, so we don&amp;rsquo;t need to create a new role for each&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upload / Deploy&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws lambda create-function &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --region us-east-1 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --function-name helloworld &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --memory &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --role arn:aws:iam::894527626897:role/testing-aws-go &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --runtime go1.x &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --zip-file fileb://main.zip &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --handler main

&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;FunctionName&amp;#34;: &amp;#34;helloworld&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;FunctionArn&amp;#34;: &amp;#34;arn:aws:lambda:us-east-1:894527626897:function:helloworld&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Runtime&amp;#34;: &amp;#34;go1.x&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Role&amp;#34;: &amp;#34;arn:aws:iam::894527626897:role/testing-aws-go&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Handler&amp;#34;: &amp;#34;main&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;CodeSize&amp;#34;: 4346283,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Timeout&amp;#34;: 3,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;MemorySize&amp;#34;: 128,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;LastModified&amp;#34;: &amp;#34;2019-02-16T15:44:10.610+0000&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;CodeSha256&amp;#34;: &amp;#34;02/PQBeQuCC8JS1TLjyU38oiUwiyQSmKJXjya25XpFA=&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;Version&amp;#34;: &amp;#34;$LATEST&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;TracingConfig&amp;#34;: {&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         &amp;#34;Mode&amp;#34;: &amp;#34;PassThrough&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     },&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;RevisionId&amp;#34;: &amp;#34;7c9030e5-4a26-4f7e-968d-3a4f65dfde21&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Note that your function-name must match the name of your Lambda handler name (Handler). Note that this role might be insecure in some scenarios if you grant too much permissions, so try to restrict it as much as possible as with any role and policy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test the function&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws lambda invoke --function-name helloworld --log-type Tail /dev/stdout
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&amp;#34;statusCode&amp;#34;:200,&amp;#34;headers&amp;#34;:{&amp;#34;Content-Type&amp;#34;:&amp;#34;application/json&amp;#34;,&amp;#34;X-MyCompany-Func-Reply&amp;#34;:&amp;#34;hello-handler&amp;#34;},&amp;#34;body&amp;#34;:&amp;#34;{\&amp;#34;message\&amp;#34;:\&amp;#34;Go Serverless v1.0! Your function executed successfully!\&amp;#34;}&amp;#34;}{&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;StatusCode&amp;#34;: 200,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;LogResult&amp;#34;: &amp;#34;U1RBUlQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQgVmVyc2lvbjogJExBVEVTVApFTkQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQKUkVQT1JUIFJlcXVlc3RJZDogZmU0ZjFhOGYtZGMwMi00MmFkLWIwZWMtMDIwOWI2ODA2NWFkCUR1cmF0aW9uOiAxMy4xOSBtcwlCaWxsZWQgRHVyYXRpb246IDEwMCBtcyAJTWVtb3J5IFNpemU6IDEyOCBNQglNYXggTWVtb3J5IFVzZWQ6IDQ1IE1CCQo=&amp;#34;,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     &amp;#34;ExecutedVersion&amp;#34;: &amp;#34;$LATEST&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Everything looks about right, so what&amp;rsquo;s next? We will eventually need to communicate with this code from an external source, so let&amp;rsquo;s see how we can do that with the API Gateway. Also the log is encoded in base64, so if you want to see what the log result was do the following.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check the logs&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;U1RBUlQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQgVmVyc2lvbjogJExBVEVTVApFTkQgUmVxdWVzdElkOiBmZTRmMWE4Zi1kYzAyLTQyYWQtYjBlYy0wMjA5YjY4MDY1YWQKUkVQT1JUIFJlcXVlc3RJZDogZmU0ZjFhOGYtZGMwMi00MmFkLWIwZWMtMDIwOWI2ODA2NWFkCUR1cmF0aW9uOiAxMy4xOSBtcwlCaWxsZWQgRHVyYXRpb246IDEwMCBtcyAJTWVtb3J5IFNpemU6IDEyOCBNQglNYXggTWVtb3J5IFVzZWQ6IDQ1IE1CCQo=&amp;#34;&lt;/span&gt; | base64 -d
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# START RequestId: fe4f1a8f-dc02-42ad-b0ec-0209b68065ad Version: $LATEST&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# END RequestId: fe4f1a8f-dc02-42ad-b0ec-0209b68065ad&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# REPORT RequestId: fe4f1a8f-dc02-42ad-b0ec-0209b68065ad  Duration: 13.19 ms      Billed Duration: 100 ms         Memory Size: 128 MB     Max Memory Used: 45 MB&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
You should also be able to see this same output in CloudWatch.&lt;/p&gt;

&lt;h5 id=&#34;api-gateway&#34;&gt;&lt;strong&gt;API Gateway&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;To make this step simpler I decided to use the AWS Console instead of the CLI it will also cut down the size of this article substantially.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we need to create the API Gateway endpoint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note that you only have to go to Lambda-&amp;gt;Functions-&amp;gt;helloworld-&amp;gt;Add triggers-&amp;gt;API Gateway. And then complete as shown in the image, when you save this new trigger you will get the resource that then can be used to test the API Gateway integration.
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/lambda-helloworld-example.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The endpoint will show as follows (Click on API Gateway):
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/lambda-helloworld-example-endpoint.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test the API&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -v https://r8efasfb26.execute-api.us-east-1.amazonaws.com/default/helloworld
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *   Trying 54.236.123.239...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TCP_NODELAY set&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connected to r8efasfb26.execute-api.us-east-1.amazonaws.com (54.236.123.239) port 443 (#0)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * ALPN, offering h2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * ALPN, offering http/1.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * successfully set certificate verify locations:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *   CAfile: /etc/ssl/certs/ca-certificates.crt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   CApath: none&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.3 (OUT), TLS handshake, Client hello (1):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.3 (IN), TLS handshake, Server hello (2):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Certificate (11):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Server key exchange (12):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Server finished (14):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (OUT), TLS handshake, Client key exchange (16):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (OUT), TLS handshake, Finished (20):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * TLSv1.2 (IN), TLS handshake, Finished (20):&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * ALPN, server accepted to use h2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Server certificate:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  subject: CN=*.execute-api.us-east-1.amazonaws.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  start date: Sep 20 00:00:00 2018 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  expire date: Oct 20 12:00:00 2019 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  subjectAltName: host &amp;#34;r8efasfb26.execute-api.us-east-1.amazonaws.com&amp;#34; matched cert&amp;#39;s &amp;#34;*.execute-api.us-east-1.amazonaws.com&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# *  SSL certificate verify ok.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Using HTTP2, server supports multi-use&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connection state changed (HTTP/2 confirmed)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Using Stream ID: 1 (easy handle 0x56394c766db0)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; GET /default/helloworld HTTP/2&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; Host: r8efasfb26.execute-api.us-east-1.amazonaws.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; User-Agent: curl/7.63.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt; Accept: */*&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connection state changed (MAX_CONCURRENT_STREAMS == 128)!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; HTTP/2 200&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; date: Sat, 16 Feb 2019 17:17:58 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; content-type: application/json&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; content-length: 70&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amzn-requestid: ce5c5863-320e-11e9-9e76-875e7540974c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amz-apigw-id: VM_XAGhoIAMFqoQ=&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-mycompany-func-reply: hello-handler&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt; x-amzn-trace-id: Root=1-5c6845c6-920cfc7da3cfd94f3e644647;Sampled=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;lt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# * Connection #0 to host r8efasfb26.execute-api.us-east-1.amazonaws.com left intact&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# {&amp;#34;message&amp;#34;:&amp;#34;Go Serverless v1.0! Your function executed successfully!&amp;#34;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If you ask me that was a lot of effort to handle without automation, maybe AWS SAM or the serverless framework can make things easier and let you focus on your application rather than the boilerplate required for it to run.&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;Always remember to clean up and delete everything that you created (to avoid surprises and save money), in this article I will leave that as an exercise for the reader :)&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sending emails with AWS Lambda and SES from a HTML form</title>
      <link>https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/</guid>
      <tags>
      
        <tag>go</tag>
      
        <tag>development</tag>
      
        <tag>serverless</tag>
      
        <tag>linux</tag>
      
      </tags>
      <description>

&lt;h5 id=&#34;serverless-series&#34;&gt;&lt;strong&gt;Serverless series&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Part I: &lt;a href=&#34;https://techsquad.rocks/blog/serving_static_sites_with_s3_and_cloudfront/&#34;&gt;Serving static websites with s3 and cloudfront&lt;/a&gt;, so refer to that one before starting this one if you want to know how did we get here.&lt;/p&gt;

&lt;p&gt;Part II: &lt;a href=&#34;https://techsquad.rocks/blog/sending_emails_with_lambda_and_ses/&#34;&gt;Sending emails with AWS Lambda and SES from a HTML form&lt;/a&gt;, &lt;strong&gt;You are here&lt;/strong&gt;.&lt;/p&gt;

&lt;h5 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This article is part of the serverless series, in this article we will see how to create a serverless function in AWS Lambda to send an email coming from the HTML form in the site the source code can be &lt;a href=&#34;https://github.com/kainlite/aws-serverless-go-ses-example&#34;&gt;found here&lt;/a&gt;, that is the go version but if you prefer node you can use &lt;a href=&#34;https://github.com/kainlite/aws-serverless-nodejs-ses-example&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;serverless-framework&#34;&gt;&lt;strong&gt;Serverless framework&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;As usual I will be using the serverless framework to manage our functions, create the project&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir techsquad-functions &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd techsquad-functions &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; serverless create -t aws-go
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Generating boilerplate...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  _______                             __&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |   _   .-----.----.--.--.-----.----|  .-----.-----.-----.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |   |   |             The Serverless Application Framework&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# |       |                           serverless.com, v1.36.1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  -------&amp;#39;&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Successfully generated boilerplate for template: &amp;#34;aws-go&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: NOTE: Please update the &amp;#34;service&amp;#34; property in serverless.yml with your service name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;After creating the project we can update the serverless manifest as follow:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;service: sendMail

frameworkVersion: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;=1.28.0 &amp;lt;2.0.0&amp;#34;&lt;/span&gt;

provider:
  name: aws
  runtime: go1.x
  region: us-east-1
  memorySize: &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;
  versionFunctions: false
  stage: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prod&amp;#39;&lt;/span&gt;

  iamRoleStatements:
    - Effect: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;
      Action:
        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ses:*&amp;#34;&lt;/span&gt;
        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lambda:*&amp;#34;&lt;/span&gt;
      Resource:
        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;

package:
 exclude:
   - ./**
 include:
   - ./send_mail/send_mail

functions:
  send_mail:
    handler: send_mail/send_mail
    events:
      - http:
          path: sendMail
          method: post&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The interesting parts here are the IAM permissions and the function send_mail, the rest is pretty much standard, we define a function and the event HTTP POST for the API Gateway, where our executable can be found and we also request permissions to send emails via SES.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploy the function&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;make deploy
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# rm -rf ./send_mail/send_mail&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# env GOOS=linux go build -ldflags=&amp;#34;-s -w&amp;#34; -o send_mail/send_mail send_mail/main.go&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# sls deploy --verbose&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: WARNING: Missing &amp;#34;tenant&amp;#34; and &amp;#34;app&amp;#34; properties in serverless.yml. Without these properties, you can not publish the service to the Serverless Platform.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Packaging service...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Excluding development dependencies...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading CloudFormation file to S3...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading artifacts...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Uploading service .zip file to S3 (7.31 MB)...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Validating template...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Updating Stack...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Checking Stack update progress...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_IN_PROGRESS - AWS::CloudFormation::Stack - sendMail-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Function - SendUnderscoremailLambdaFunction&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_COMPLETE - AWS::Lambda::Function - SendUnderscoremailLambdaFunction&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246566486&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246566486&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - CREATE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246566486&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_COMPLETE_CLEANUP_IN_PROGRESS - AWS::CloudFormation::Stack - sendMail-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - DELETE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246013644&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - DELETE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1549246013644&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CloudFormation - UPDATE_COMPLETE - AWS::CloudFormation::Stack - sendMail-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Serverless: Stack update finished...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Service Information&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# service: sendMail&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stage: prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# region: us-east-1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# stack: sendMail-prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# api keys:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# endpoints:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   POST - https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod/sendMail&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# functions:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   send_mail: sendMail-prod-send_mail&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# layers:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#   None&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# Stack Outputs&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ServiceEndpoint: https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ServerlessDeploymentBucketName: sendmail-prod-serverlessdeploymentbucket-1vbmb6gwt8559&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Everything looks right, so what&amp;rsquo;s next? the source code.&lt;/p&gt;

&lt;h5 id=&#34;lambda&#34;&gt;&lt;strong&gt;Lambda&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;This is basically the full source code for this function, as you will see it&amp;rsquo;s really simple:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/events&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws/awserr&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/service/ses&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;events&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;APIGatewayProxyResponse&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RequestData&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// This could be env vars
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; (
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Sender&lt;/span&gt;    = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web@serverless.techsquad.rocks&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Recipient&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kainlite@gmail.com&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;CharSet&lt;/span&gt;   = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;events&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;APIGatewayProxyRequest&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Request: %+v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processing request data for request %s.\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestContext&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestID&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Body size = %d.\n&amp;#34;&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;))

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RequestData&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RequestData: %+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;requestData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;:      &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;IsBase64Encoded&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;:            &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;:           &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-MyCompany-Func-Reply&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;send-mail-handler&amp;#34;&lt;/span&gt;,
		},
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// This could be an env var
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sess&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewSession&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Region&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;us-east-1&amp;#34;&lt;/span&gt;)},
	)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Create an SES session.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;svc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sess&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Assemble the email.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SendEmailInput&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Destination&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Destination&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;CcAddresses&lt;/span&gt;: []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{},
			&lt;span style=&#34;color:#a6e22e&#34;&gt;ToAddresses&lt;/span&gt;: []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Recipient&lt;/span&gt;),
			},
		},
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Html&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Content&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Charset&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;CharSet&lt;/span&gt;),
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;),
				},
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Content&lt;/span&gt;{
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Charset&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;CharSet&lt;/span&gt;),
					&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;),
				},
			},
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Subject&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Content&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Charset&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;CharSet&lt;/span&gt;),
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;),
			},
		},
		&lt;span style=&#34;color:#75715e&#34;&gt;// We are using the same sender because it needs to be validated in SES.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;Source&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Sender&lt;/span&gt;),

		&lt;span style=&#34;color:#75715e&#34;&gt;// Uncomment to use a configuration set
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//ConfigurationSetName: aws.String(ConfigurationSet),
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Attempt to send the email.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;svc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SendEmail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Display error messages if they occur.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.(&lt;span style=&#34;color:#a6e22e&#34;&gt;awserr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Code&lt;/span&gt;() {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeMessageRejected&lt;/span&gt;:
				&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeMessageRejected&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeMailFromDomainNotVerifiedException&lt;/span&gt;:
				&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeMailFromDomainNotVerifiedException&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeConfigurationSetDoesNotExistException&lt;/span&gt;:
				&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ses&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ErrCodeConfigurationSetDoesNotExistException&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
			&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
				&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aerr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// Print the error, cast err to awserr.Error to get the Code and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// Message from an error.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;there was an unexpected error&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Email Sent to address: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Recipient&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sent!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The code is pretty much straight forward it only expects 2 parameters and it will send an email and return sent! if everything went well. You can debug and compile your function before uploading by issuing the command &lt;code&gt;make&lt;/code&gt; (This is really useful), and if you use &lt;code&gt;make deploy&lt;/code&gt; you will save lots of time by only deploying working files.&lt;/p&gt;

&lt;h5 id=&#34;ses&#34;&gt;&lt;strong&gt;SES&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;For this to work you will need to verify/validate your domain in SES.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;SES-&amp;gt;Domains-&amp;gt;Verify a New Domain&lt;/code&gt;.
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-ses-validate-domain.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;After putting your domain in, you will see something like this:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-ses-validation-and-dkim.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;As I don&amp;rsquo;t have this domain in Route53 I don&amp;rsquo;t have a button to add the records to it (which makes everything simpler and faster), but it&amp;rsquo;s easy enough just create a few dns records and wait a few minutes until you get something like this:
&lt;figure&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/aws-ses-validation-ok.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After that just test it&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;serverless invoke -f send_mail -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ &amp;#34;Email&amp;#34;: &amp;#34;kainlite@gmail.com&amp;#34;, &amp;#34;Message&amp;#34;: &amp;#34;test&amp;#34; }&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;statusCode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-MyCompany-Func-Reply&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;send-mail-handler&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
After hitting enter the message popped up right away in my inbox :).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Another option is to use &lt;a href=&#34;https://devhints.io/httpie&#34;&gt;httpie&lt;/a&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ &amp;#34;email&amp;#34;: &amp;#34;kainlite@gmail.com&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;test2&amp;#34; }&amp;#39;&lt;/span&gt; | http https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod/sendMail
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# HTTP/1.1 200 OK&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Access-Control-Allow-Origin: *&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Connection: keep-alive&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Content-Length: 32&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Content-Type: application/json&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Date: Sun, 03 Feb 2019 02:24:25 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Via: 1.1 3421ea0c15d4fdc0bcb792131861cb1f.cloudfront.net (CloudFront)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# X-Amz-Cf-Id: kGK4R9kTpcWjZap8aeyPu0vdiCtpQ4gnhCAtCeeA6OJufzaTDL__0w==&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# X-Amzn-Trace-Id: Root=1-5c5650d9-7c3c8fcc5e303ca480739560;Sampled=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# X-Cache: Miss from cloudfront&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amz-apigw-id: UgGR7FlWIAMF75Q=&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amzn-RequestId: d2f45b14-275a-11e9-a8f3-47d675eed13e&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# sent!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR &lt;a href=&#34;https://devhints.io/curl&#34;&gt;curl&lt;/a&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -i -X POST https://m8ebtlirjg.execute-api.us-east-1.amazonaws.com/prod/sendMail -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{ &amp;#34;email&amp;#34;: &amp;#34;kainlite@gmail.com&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;test3&amp;#34; }&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OUTPUT:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# HTTP/2 200&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# content-type: application/json&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# content-length: 32&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# date: Sun, 03 Feb 2019 02:28:04 GMT&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amzn-requestid: 55cc72d0-275b-11e9-99bd-91c3fab78a2f&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# access-control-allow-origin: *&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amz-apigw-id: UgG0OEigoAMF-Yg=&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amzn-trace-id: Root=1-5c5651b4-fc5427b4798e14dc61fe161e;Sampled=0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-cache: Miss from cloudfront&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# via: 1.1 2167e4d6cf81822217c1ea31b3d3ba7e.cloudfront.net (CloudFront)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x-amz-cf-id: FttmBoeUaSwQ2AArTgVmI5br51zwVMfUrVpXPLGm1HacV4yS9IYMHA==&lt;/span&gt;
#
&lt;span style=&#34;color:#75715e&#34;&gt;# sent!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s all for now, see you in the next article.&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Give super powers to your terminal with tmux</title>
      <link>https://techsquad.rocks/blog/give_super_powers_to_your_terminal_with_tmux/</link>
      <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/give_super_powers_to_your_terminal_with_tmux/</guid>
      <tags>
      
        <tag>urxvt</tag>
      
        <tag>vim</tag>
      
        <tag>linux</tag>
      
        <tag>tmux</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In this article I want to introduce you to &lt;code&gt;tmux&lt;/code&gt;, you might have used &lt;code&gt;screen&lt;/code&gt; in the past or heard about it, what tmux and screen are is terminal multiplexers, what does that mean? That you can have many windows/tabs and splits/panes in just one terminal window, this can really make things easier when using it as a development environment for example, you can detach from the terminal and leave things running indefinitely, or share your terminal with a colleague over ssh, for the examples I will be explaining bits of my configuration and how do I use it. The full configuration can be found &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.tmux.conf&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;m using ZSH as shell and Vim as text editor.&lt;/p&gt;

&lt;h3 id=&#34;tmux&#34;&gt;&lt;strong&gt;Tmux&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I also use tmux to maintain sessions, for example I can only have one terminal window open because with the help from ZSH it will attach automatically to a session thanks to &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; and the plugin tmux, I use tabs aka windows a lot, sometimes I also use splits aka as panes.&lt;/p&gt;

&lt;p&gt;Now you have some basic understanding of what tmux does and how does it name its things, let&amp;rsquo;s examine some bits of the config and how to use it.&lt;/p&gt;

&lt;h5 id=&#34;attach-detach-from-a-session&#34;&gt;&lt;strong&gt;Attach/detach from a session&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;In order to create a session and attach to it you need to execute &lt;code&gt;tmux new -s my-session&lt;/code&gt;, then to detach from it: &lt;code&gt;CTRL-a d&lt;/code&gt; and to re-attach &lt;code&gt;tmux a -t my-session&lt;/code&gt;, then kill it &lt;code&gt;tmux kill-session -t my-session&lt;/code&gt; or logout from all windows.&lt;/p&gt;

&lt;h5 id=&#34;prefix&#34;&gt;&lt;strong&gt;Prefix&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I don&amp;rsquo;t use the default prefix that is: &lt;code&gt;CTRL-b&lt;/code&gt;, I use &lt;code&gt;CTRL-a&lt;/code&gt; like in screen.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use ctrl-a instead of ctrl-b&lt;/span&gt;
set -g prefix C-a
unbind C-b
bind C-a send-prefix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;example&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;You can print the numbers of the panes with &lt;code&gt;CTRL-a q&lt;/code&gt;, and you can navigate windows and panes as a list with &lt;code&gt;CTRL-a w&lt;/code&gt;.
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/tmux-windows-panes.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;I usually like to have 3 panes, something like this:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/tmux-sample-usage.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

I can edit the code or whatever in the pane 0, run commands if I need to in the pane 1, and have the webserver or code compiler, etc in the pane 2. This is very handy because I can write and test things at the same time without leaving the keyboard, or look at 2 different projects/files/etc side by side.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;tmux ls&lt;/code&gt; we can list active sessions, also tmux has a command mode (&lt;code&gt;CTRL-a :&lt;/code&gt;) like Vim, where you can issue some commands or change settings on the fly, for example instead of executing &lt;code&gt;tmux ls&lt;/code&gt;, you can get the same information doing &lt;code&gt;CTRL-a :&lt;/code&gt; and then &lt;code&gt;ls&amp;lt;CR&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;defaults&#34;&gt;&lt;strong&gt;Defaults&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Some helpful settings, for example start windows at 1 instead of 0, renumber on exit also makes it easier with windows.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Start window numbers at 1 to match keyboard order with tmux window order&lt;/span&gt;
set -g base-index &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Scrollback buffer n lines&lt;/span&gt;
set -g history-limit &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Renumber tabs on exit&lt;/span&gt;
set-option -g renumber-windows on

&lt;span style=&#34;color:#75715e&#34;&gt;# Use vi keybindings in copy and choice modes&lt;/span&gt;
set-window-option -g mode-keys vi

&lt;span style=&#34;color:#75715e&#34;&gt;# Enable mouse, enables you to scroll in the tmux history buffer.&lt;/span&gt;
set -g mouse on&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;movement&#34;&gt;&lt;strong&gt;Movement&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;I move between windows with &lt;code&gt;CTRL+h&lt;/code&gt; and &lt;code&gt;CTRL+l&lt;/code&gt;, and between panes with &lt;code&gt;CTRL-a [hjkl]&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Move between windows&lt;/span&gt;
bind-key -n C-h prev
bind-key -n C-l next

&lt;span style=&#34;color:#75715e&#34;&gt;# Move between panes&lt;/span&gt;
unbind h
bind h &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -L
unbind j
bind j &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -D
unbind k
bind k &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -U
unbind l
bind l &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt;-pane -R&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;configuration&#34;&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;A handy trick if you are testing the configuration is to reload it from the file with &lt;code&gt;CTRL-a r&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Force a reload of the config file&lt;/span&gt;
unbind r
bind r source-file ~/.tmux.conf &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt; display &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reloaded!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;panes&#34;&gt;&lt;strong&gt;Panes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Everything is nice and shiny, but how do I open a pane or a new window?
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Horizontal and vertical splits&lt;/span&gt;
unbind |
bind | split-window -h
unbind -
bind - split-window&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Easy, &lt;code&gt;CTRL-a |&lt;/code&gt; will give you a vertical pane, and &lt;code&gt;CTRL-a -&lt;/code&gt; will give you an horizontal pane.
You an also re-order the panes with &lt;code&gt;CTRL-a SPACE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also re-order windows with &lt;code&gt;SHIFT-Left Arrow&lt;/code&gt; and &lt;code&gt;SHIFT-Right Arrow&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Swap windows&lt;/span&gt;
bind-key -n S-Left swap-window -t -1
bind-key -n S-Right swap-window -t +1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;status-bar&#34;&gt;&lt;strong&gt;Status bar&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;The status bar and the colors, it&amp;rsquo;s fairly simple but I like it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Status bar has a dim gray background&lt;/span&gt;
set-option -g status-bg colour234
set-option -g status-fg colour0
&lt;span style=&#34;color:#75715e&#34;&gt;# Left shows the session name, in blue&lt;/span&gt;
set-option -g status-left-bg default
set-option -g status-left-fg colour74
&lt;span style=&#34;color:#75715e&#34;&gt;# Right is some CPU stats, so terminal green&lt;/span&gt;
set-option -g status-right-bg default
set-option -g status-right-fg colour71
&lt;span style=&#34;color:#75715e&#34;&gt;# Windows are medium gray; current window is white&lt;/span&gt;
set-window-option -g window-status-fg colour244
set-window-option -g window-status-current-fg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#ffffff&amp;#39;&lt;/span&gt;
set-window-option -g window-status-current-bg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Beeped windows get a blinding orange background&lt;/span&gt;
set-window-option -g window-status-bell-fg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;
set-window-option -g window-status-bell-bg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#d78700&amp;#39;&lt;/span&gt;
set-window-option -g window-status-bell-attr none
&lt;span style=&#34;color:#75715e&#34;&gt;# Trim window titles to a reasonable length&lt;/span&gt;
set-window-option -g window-status-format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#[fg=yellow] #F#I#[default] #W &amp;#39;&lt;/span&gt;
set-window-option -g window-status-current-format &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#[bg=yellow] #I#[bg=yellow] #W &amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h5 id=&#34;copy-paste&#34;&gt;&lt;strong&gt;Copy/paste&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/tmux-vi-mode.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

Tmux also supports the vi-copy mode, you can enter this mode with &lt;code&gt;CTRL-a ESC&lt;/code&gt;, then pressing &lt;code&gt;v&lt;/code&gt; for normal selection or &lt;code&gt;V&lt;/code&gt; for line selection you can mark and copy with &lt;code&gt;Y&lt;/code&gt; (by default is &lt;code&gt;ENTER&lt;/code&gt; aka &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;And as you can imagine you can paste with &lt;code&gt;CTRL-a p&lt;/code&gt;, this is really handy when copying from one pane to another or from one window to another, in Vim I recommend you &lt;code&gt;:set paste!&lt;/code&gt; before pasting into it, so it doesn&amp;rsquo;t try to format, etc.&lt;/p&gt;

&lt;p&gt;It also copies to the clipboard buffer, using xsel.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make copy mode more vim like&lt;/span&gt;
bind Escape copy-mode
unbind p
bind p paste-buffer
bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down
unbind-key -T copy-mode-vi Space     ;   bind-key -T copy-mode-vi v send-keys -X begin-selection

unbind-key -T copy-mode-vi Enter     ;   bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xsel -i --clipboard&amp;#34;&lt;/span&gt;
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xsel -i --clipboard&amp;#34;&lt;/span&gt;

unbind-key -T copy-mode-vi C-v       ;   bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
unbind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;         ;   bind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; send-keys -X begin-selection
unbind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;         ;   bind-key -T copy-mode-vi &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; send-keys -X copy-selection&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about tmux a good place to start is the &lt;a href=&#34;https://wiki.archlinux.org/index.php/tmux&#34;&gt;Arch Linux wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;notes&#34;&gt;&lt;strong&gt;notes&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Sometimes you can have issues with the keys &lt;code&gt;HOME&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt;, this can help with that.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Home / End patch&lt;/span&gt;
bind -n End send-key C-e
bind -n Home send-key C-a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My local environment</title>
      <link>https://techsquad.rocks/blog/my_local_environment/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techsquad.rocks/blog/my_local_environment/</guid>
      <tags>
      
        <tag>urxvt</tag>
      
        <tag>vim</tag>
      
        <tag>linux</tag>
      
        <tag>tmux</tag>
      
      </tags>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;This article is about my current configuration, but I&amp;rsquo;m going to talk only about the terminal and my text editor because those will work in any linux distribution, I&amp;rsquo;m currently using &lt;strong&gt;Arch Linux&lt;/strong&gt; and &lt;strong&gt;AwesomeWM&lt;/strong&gt; (I used Gnome Shell previously, and Gnome 2 before that), you can find my &lt;a href=&#34;https://github.com/kainlite/dotfiles&#34;&gt;dotfiles here&lt;/a&gt; with all my configurations.&lt;/p&gt;

&lt;p&gt;While my terminal doesn&amp;rsquo;t look exactly like the one from the picture you can get something like that with &lt;a href=&#34;https://github.com/jtyr/gbt&#34;&gt;GBT&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;terminal&#34;&gt;Terminal&lt;/h3&gt;

&lt;p&gt;My current terminal is &lt;strong&gt;rxvt-unicode&lt;/strong&gt; and I&amp;rsquo;m pretty happy with it, it&amp;rsquo;s relatively easy to configure and use, it looks like this:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/urxvt.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

And the configuration file can be &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.Xresources&#34;&gt;found here&lt;/a&gt;, note that even if you don&amp;rsquo;t like Ponys by any reason, it&amp;rsquo;s useful to test colors in the terminal.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s different than other terminals I have tried in the way it manages and uses the configuration, it uses an additional tool called &lt;code&gt;xrdb&lt;/code&gt; (X server resource database utility) to manage the configuration provided in the configuration file &lt;code&gt;.Xresources&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Loads the configuration from Xresources in xrdb&lt;/span&gt;
$ xrdb -merge .Xresources

&lt;span style=&#34;color:#75715e&#34;&gt;# List the current configuration&lt;/span&gt;
$ xrdb -query

&lt;span style=&#34;color:#75715e&#34;&gt;# Deletes the current database&lt;/span&gt;
$ xrdb -remove&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;theme&#34;&gt;Theme&lt;/h3&gt;

&lt;p&gt;My current theme is &lt;a href=&#34;https://github.com/morhetz/gruvbox&#34;&gt;gruvbox&lt;/a&gt; in Vim and also in my &lt;a href=&#34;https://github.com/morhetz/gruvbox-contrib/blob/master/xresources/gruvbox-dark.xresources&#34;&gt;terminal&lt;/a&gt;, and changing from &lt;a href=&#34;https://ethanschoonover.com/solarized/&#34;&gt;solazired&lt;/a&gt; to it is what inspired this small article.&lt;/p&gt;

&lt;h3 id=&#34;tmux&#34;&gt;Tmux&lt;/h3&gt;

&lt;p&gt;I also use tmux to maintan sessions, some of it&amp;rsquo;s nice features are tiling, tabs. The configuration can be &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.tmux.conf&#34;&gt;found here&lt;/a&gt;. I move between tabs with control-h and control-l, and between panes with control-a [hjkl].&lt;/p&gt;

&lt;h3 id=&#34;vim&#34;&gt;Vim&lt;/h3&gt;

&lt;p&gt;As my text editor I really like and enjoy using Vim, there is always something to learn but once you make some good habits it pays off in the way you write and move around, you can check some amazing screencasts on vim &lt;a href=&#34;http://vimcasts.org/&#34;&gt;here&lt;/a&gt; and also the book Practical Vim can be really helpful to get started and/or improve your current vim-fu.&lt;/p&gt;

&lt;p&gt;As a plugin manager I use &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.vimrc.bundles&#34;&gt;Plug&lt;/a&gt; even that it&amp;rsquo;s not really necessary with Vim 8, but that is a matter of taste I guess. You can see my full vim configuration &lt;a href=&#34;https://github.com/kainlite/dotfiles/blob/master/.vimrc&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It looks something like this, as you can see I have a small tmux pane in the bottom with Hugo &lt;em&gt;compiling&lt;/em&gt; the site after every save and live reloading it in my browser:
&lt;figure class=&#34;zoom&#34;&gt;
    &lt;img src=&#34;https://techsquad.rocks/img/vim.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m also using zsh and &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;oh-my-zsh&lt;/a&gt; with the theme agnoster. I really like zsh it&amp;rsquo;s fast and has some nice features like autocomplete everywhere, but again this is a matter of taste.&lt;/li&gt;
&lt;li&gt;I like to take advantage of all the space in the screen, that&amp;rsquo;s why AwesomeWM fits great (even that I do not use the tiling feature a lot, tabs and full screen apps), with some minor configuration I&amp;rsquo;m able to do everything from the keyboard, I use the mouse when checking emails and things like that but otherwise the keyboard is more than enough.&lt;/li&gt;
&lt;li&gt;I used cowsay and ponysay in the first screenshot so you can have an idea of how the terminal looks like.&lt;/li&gt;
&lt;li&gt;If you are going to use unicode I recommend you to install the fonts from nerd-fonts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;errata&#34;&gt;Errata&lt;/h3&gt;

&lt;p&gt;If you spot any error or have any suggestion, please send me a message so it gets fixed.&lt;/p&gt;

&lt;p&gt;Also, you can check the source code and changes in the &lt;a href=&#34;https://github.com/kainlite/kainlite.github.io&#34;&gt;generated code&lt;/a&gt; and the &lt;a href=&#34;https://github.com/kainlite/blog&#34;&gt;sources here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
